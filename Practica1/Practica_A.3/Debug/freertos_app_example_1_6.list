
freertos_app_example_1_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08006da0  08006da0  00007da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fc8  08006fc8  00008084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006fc8  08006fc8  00007fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fd0  08006fd0  00008084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fd0  08006fd0  00007fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006fd4  08006fd4  00007fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08006fd8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004300  20000084  0800705c  00008084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004384  0800705c  00008384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164ba  00000000  00000000  000080b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a1  00000000  00000000  0001e56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  00021c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e58  00000000  00000000  00022ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025328  00000000  00000000  00023cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017dd3  00000000  00000000  00049020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da98c  00000000  00000000  00060df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013b77f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058ec  00000000  00000000  0013b7c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001410b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006d88 	.word	0x08006d88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08006d88 	.word	0x08006d88

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4a07      	ldr	r2, [pc, #28]	@ (8000618 <vApplicationGetIdleTaskMemory+0x2c>)
 80005fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	4a06      	ldr	r2, [pc, #24]	@ (800061c <vApplicationGetIdleTaskMemory+0x30>)
 8000602:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2280      	movs	r2, #128	@ 0x80
 8000608:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	200000a0 	.word	0x200000a0
 800061c:	20000140 	.word	0x20000140

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	b090      	sub	sp, #64	@ 0x40
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 8000626:	f005 f947 	bl	80058b8 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 fb33 	bl	8000c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f84b 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f8e1 	bl	80007f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000636:	f000 f8b5 	bl	80007a4 <MX_USART2_UART_Init>
○ printf("Hello, World!");
● Link de la guía: https://campusposgrado.fi.uba.ar/mod/url/view.php?id=14546
● Compile/depure el programa, vea que por consola sale “Hello, World!” y cierre la sesión de depuración.*/


  printf("Hello, World!\r\n");
 800063a:	481d      	ldr	r0, [pc, #116]	@ (80006b0 <main+0x90>)
 800063c:	f005 fba4 	bl	8005d88 <puts>
      /* add application, ... */
	app_init();
 8000640:	f004 fd92 	bl	8005168 <app_init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of Binary_Sem */
  osSemaphoreDef(Binary_Sem);
 8000644:	2300      	movs	r3, #0
 8000646:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000648:	2300      	movs	r3, #0
 800064a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  Binary_SemHandle = osSemaphoreCreate(osSemaphore(Binary_Sem), 1);
 800064c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000650:	2101      	movs	r1, #1
 8000652:	4618      	mov	r0, r3
 8000654:	f002 fa13 	bl	8002a7e <osSemaphoreCreate>
 8000658:	4603      	mov	r3, r0
 800065a:	4a16      	ldr	r2, [pc, #88]	@ (80006b4 <main+0x94>)
 800065c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, Task1_App, osPriorityNormal, 0, 128);
 800065e:	4b16      	ldr	r3, [pc, #88]	@ (80006b8 <main+0x98>)
 8000660:	f107 041c 	add.w	r4, r7, #28
 8000664:	461d      	mov	r5, r3
 8000666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f002 f9a0 	bl	80029be <osThreadCreate>
 800067e:	4603      	mov	r3, r0
 8000680:	4a0e      	ldr	r2, [pc, #56]	@ (80006bc <main+0x9c>)
 8000682:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_App, osPriorityNormal, 0, 128);
 8000684:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <main+0xa0>)
 8000686:	463c      	mov	r4, r7
 8000688:	461d      	mov	r5, r3
 800068a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000692:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000696:	463b      	mov	r3, r7
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f002 f98f 	bl	80029be <osThreadCreate>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a08      	ldr	r2, [pc, #32]	@ (80006c4 <main+0xa4>)
 80006a4:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */


  /* Start scheduler */
  osKernelStart();
 80006a6:	f002 f983 	bl	80029b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006aa:	bf00      	nop
 80006ac:	e7fd      	b.n	80006aa <main+0x8a>
 80006ae:	bf00      	nop
 80006b0:	08006da0 	.word	0x08006da0
 80006b4:	20000390 	.word	0x20000390
 80006b8:	08006db8 	.word	0x08006db8
 80006bc:	20000388 	.word	0x20000388
 80006c0:	08006ddc 	.word	0x08006ddc
 80006c4:	2000038c 	.word	0x2000038c

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	@ 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	2234      	movs	r2, #52	@ 0x34
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f005 fc6c 	bl	8005fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b2a      	ldr	r3, [pc, #168]	@ (800079c <SystemClock_Config+0xd4>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f4:	4a29      	ldr	r2, [pc, #164]	@ (800079c <SystemClock_Config+0xd4>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006fc:	4b27      	ldr	r3, [pc, #156]	@ (800079c <SystemClock_Config+0xd4>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000708:	2300      	movs	r3, #0
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	4b24      	ldr	r3, [pc, #144]	@ (80007a0 <SystemClock_Config+0xd8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000714:	4a22      	ldr	r2, [pc, #136]	@ (80007a0 <SystemClock_Config+0xd8>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b20      	ldr	r3, [pc, #128]	@ (80007a0 <SystemClock_Config+0xd8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800073c:	2310      	movs	r3, #16
 800073e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000740:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000744:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000746:	2304      	movs	r3, #4
 8000748:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800074a:	2302      	movs	r3, #2
 800074c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800074e:	2302      	movs	r3, #2
 8000750:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	4618      	mov	r0, r3
 8000758:	f001 f902 	bl	8001960 <HAL_RCC_OscConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000762:	f000 f90b 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000766:	230f      	movs	r3, #15
 8000768:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076a:	2302      	movs	r3, #2
 800076c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000772:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	2102      	movs	r1, #2
 8000782:	4618      	mov	r0, r3
 8000784:	f000 fd70 	bl	8001268 <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800078e:	f000 f8f5 	bl	800097c <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3750      	adds	r7, #80	@ 0x50
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007aa:	4a12      	ldr	r2, [pc, #72]	@ (80007f4 <MX_USART2_UART_Init+0x50>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ae:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007dc:	f001 fdfa 	bl	80023d4 <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007e6:	f000 f8c9 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000340 	.word	0x20000340
 80007f4:	40004400 	.word	0x40004400

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	@ 0x28
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b31      	ldr	r3, [pc, #196]	@ (80008d8 <MX_GPIO_Init+0xe0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a30      	ldr	r2, [pc, #192]	@ (80008d8 <MX_GPIO_Init+0xe0>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b2e      	ldr	r3, [pc, #184]	@ (80008d8 <MX_GPIO_Init+0xe0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b2a      	ldr	r3, [pc, #168]	@ (80008d8 <MX_GPIO_Init+0xe0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a29      	ldr	r2, [pc, #164]	@ (80008d8 <MX_GPIO_Init+0xe0>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b27      	ldr	r3, [pc, #156]	@ (80008d8 <MX_GPIO_Init+0xe0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b23      	ldr	r3, [pc, #140]	@ (80008d8 <MX_GPIO_Init+0xe0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a22      	ldr	r2, [pc, #136]	@ (80008d8 <MX_GPIO_Init+0xe0>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b20      	ldr	r3, [pc, #128]	@ (80008d8 <MX_GPIO_Init+0xe0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b1c      	ldr	r3, [pc, #112]	@ (80008d8 <MX_GPIO_Init+0xe0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a1b      	ldr	r2, [pc, #108]	@ (80008d8 <MX_GPIO_Init+0xe0>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <MX_GPIO_Init+0xe0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2120      	movs	r1, #32
 8000882:	4816      	ldr	r0, [pc, #88]	@ (80008dc <MX_GPIO_Init+0xe4>)
 8000884:	f000 fcbe 	bl	8001204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800088e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	4810      	ldr	r0, [pc, #64]	@ (80008e0 <MX_GPIO_Init+0xe8>)
 80008a0:	f000 fb1c 	bl	8000edc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a4:	2320      	movs	r3, #32
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4808      	ldr	r0, [pc, #32]	@ (80008dc <MX_GPIO_Init+0xe4>)
 80008bc:	f000 fb0e 	bl	8000edc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2105      	movs	r1, #5
 80008c4:	2028      	movs	r0, #40	@ 0x28
 80008c6:	f000 fadf 	bl	8000e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008ca:	2028      	movs	r0, #40	@ 0x28
 80008cc:	f000 faf8 	bl	8000ec0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	@ 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40020800 	.word	0x40020800

080008e4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
  if (B1_Pin == GPIO_Pin)
 80008ee:	88fb      	ldrh	r3, [r7, #6]
 80008f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008f4:	d104      	bne.n	8000900 <HAL_GPIO_EXTI_Callback+0x1c>
    osSemaphoreRelease(Binary_SemHandle);
 80008f6:	4b04      	ldr	r3, [pc, #16]	@ (8000908 <HAL_GPIO_EXTI_Callback+0x24>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f002 f940 	bl	8002b80 <osSemaphoreRelease>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000390 	.word	0x20000390

0800090c <Task1_App>:
● Link de la guía: https://campusposgrado.fi.uba.ar/mod/resource/view.php?id=10552
● Compile/depure el programa/cierre la sesión de depuración..
*/
/* USER CODE END Header_Task1_App */
void Task1_App(void const * argument)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2120      	movs	r1, #32
 8000918:	4805      	ldr	r0, [pc, #20]	@ (8000930 <Task1_App+0x24>)
 800091a:	f000 fc73 	bl	8001204 <HAL_GPIO_WritePin>
    osSemaphoreWait(Binary_SemHandle, osWaitForever);
 800091e:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <Task1_App+0x28>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f04f 31ff 	mov.w	r1, #4294967295
 8000926:	4618      	mov	r0, r3
 8000928:	f002 f8dc 	bl	8002ae4 <osSemaphoreWait>
    HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);
 800092c:	bf00      	nop
 800092e:	e7f1      	b.n	8000914 <Task1_App+0x8>
 8000930:	40020000 	.word	0x40020000
 8000934:	20000390 	.word	0x20000390

08000938 <Task2_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_App */
void Task2_App(void const * argument)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_App */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2120      	movs	r1, #32
 8000944:	4803      	ldr	r0, [pc, #12]	@ (8000954 <Task2_App+0x1c>)
 8000946:	f000 fc5d 	bl	8001204 <HAL_GPIO_WritePin>
    osDelay(1);
 800094a:	2001      	movs	r0, #1
 800094c:	f002 f883 	bl	8002a56 <osDelay>
    HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_RESET);
 8000950:	bf00      	nop
 8000952:	e7f5      	b.n	8000940 <Task2_App+0x8>
 8000954:	40020000 	.word	0x40020000

08000958 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a04      	ldr	r2, [pc, #16]	@ (8000978 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d101      	bne.n	800096e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800096a:	f000 f9b5 	bl	8000cd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40010000 	.word	0x40010000

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <Error_Handler+0x8>

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <HAL_MspInit+0x54>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000996:	4a11      	ldr	r2, [pc, #68]	@ (80009dc <HAL_MspInit+0x54>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800099c:	6453      	str	r3, [r2, #68]	@ 0x44
 800099e:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <HAL_MspInit+0x54>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <HAL_MspInit+0x54>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b2:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <HAL_MspInit+0x54>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <HAL_MspInit+0x54>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	210f      	movs	r1, #15
 80009ca:	f06f 0001 	mvn.w	r0, #1
 80009ce:	f000 fa5b 	bl	8000e88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	@ 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a19      	ldr	r2, [pc, #100]	@ (8000a64 <HAL_UART_MspInit+0x84>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d12b      	bne.n	8000a5a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b18      	ldr	r3, [pc, #96]	@ (8000a68 <HAL_UART_MspInit+0x88>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	4a17      	ldr	r2, [pc, #92]	@ (8000a68 <HAL_UART_MspInit+0x88>)
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <HAL_UART_MspInit+0x88>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <HAL_UART_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a10      	ldr	r2, [pc, #64]	@ (8000a68 <HAL_UART_MspInit+0x88>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <HAL_UART_MspInit+0x88>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <HAL_UART_MspInit+0x8c>)
 8000a56:	f000 fa41 	bl	8000edc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	@ 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40004400 	.word	0x40004400
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000

08000a70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08c      	sub	sp, #48	@ 0x30
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	4b2e      	ldr	r3, [pc, #184]	@ (8000b40 <HAL_InitTick+0xd0>)
 8000a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a88:	4a2d      	ldr	r2, [pc, #180]	@ (8000b40 <HAL_InitTick+0xd0>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a90:	4b2b      	ldr	r3, [pc, #172]	@ (8000b40 <HAL_InitTick+0xd0>)
 8000a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a9c:	f107 020c 	add.w	r2, r7, #12
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 fcf8 	bl	800149c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000aac:	f000 fce2 	bl	8001474 <HAL_RCC_GetPCLK2Freq>
 8000ab0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ab4:	4a23      	ldr	r2, [pc, #140]	@ (8000b44 <HAL_InitTick+0xd4>)
 8000ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aba:	0c9b      	lsrs	r3, r3, #18
 8000abc:	3b01      	subs	r3, #1
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ac0:	4b21      	ldr	r3, [pc, #132]	@ (8000b48 <HAL_InitTick+0xd8>)
 8000ac2:	4a22      	ldr	r2, [pc, #136]	@ (8000b4c <HAL_InitTick+0xdc>)
 8000ac4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ac6:	4b20      	ldr	r3, [pc, #128]	@ (8000b48 <HAL_InitTick+0xd8>)
 8000ac8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000acc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ace:	4a1e      	ldr	r2, [pc, #120]	@ (8000b48 <HAL_InitTick+0xd8>)
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <HAL_InitTick+0xd8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ada:	4b1b      	ldr	r3, [pc, #108]	@ (8000b48 <HAL_InitTick+0xd8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae0:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <HAL_InitTick+0xd8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ae6:	4818      	ldr	r0, [pc, #96]	@ (8000b48 <HAL_InitTick+0xd8>)
 8000ae8:	f001 f9d8 	bl	8001e9c <HAL_TIM_Base_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000af2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d11b      	bne.n	8000b32 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000afa:	4813      	ldr	r0, [pc, #76]	@ (8000b48 <HAL_InitTick+0xd8>)
 8000afc:	f001 fa28 	bl	8001f50 <HAL_TIM_Base_Start_IT>
 8000b00:	4603      	mov	r3, r0
 8000b02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d111      	bne.n	8000b32 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b0e:	2019      	movs	r0, #25
 8000b10:	f000 f9d6 	bl	8000ec0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b0f      	cmp	r3, #15
 8000b18:	d808      	bhi.n	8000b2c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	6879      	ldr	r1, [r7, #4]
 8000b1e:	2019      	movs	r0, #25
 8000b20:	f000 f9b2 	bl	8000e88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b24:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <HAL_InitTick+0xe0>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6013      	str	r3, [r2, #0]
 8000b2a:	e002      	b.n	8000b32 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3730      	adds	r7, #48	@ 0x30
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	431bde83 	.word	0x431bde83
 8000b48:	20000394 	.word	0x20000394
 8000b4c:	40010000 	.word	0x40010000
 8000b50:	20000004 	.word	0x20000004

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <NMI_Handler+0x4>

08000b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b90:	4802      	ldr	r0, [pc, #8]	@ (8000b9c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b92:	f001 fa4d 	bl	8002030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000394 	.word	0x20000394

08000ba0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ba4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ba8:	f000 fb46 	bl	8001238 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb8:	4a14      	ldr	r2, [pc, #80]	@ (8000c0c <_sbrk+0x5c>)
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <_sbrk+0x60>)
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc4:	4b13      	ldr	r3, [pc, #76]	@ (8000c14 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d102      	bne.n	8000bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <_sbrk+0x64>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	@ (8000c18 <_sbrk+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd2:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d207      	bcs.n	8000bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be0:	f005 fa94 	bl	800610c <__errno>
 8000be4:	4603      	mov	r3, r0
 8000be6:	220c      	movs	r2, #12
 8000be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	e009      	b.n	8000c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a05      	ldr	r2, [pc, #20]	@ (8000c14 <_sbrk+0x64>)
 8000c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c02:	68fb      	ldr	r3, [r7, #12]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20020000 	.word	0x20020000
 8000c10:	00000400 	.word	0x00000400
 8000c14:	200003dc 	.word	0x200003dc
 8000c18:	20004388 	.word	0x20004388

08000c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <SystemInit+0x20>)
 8000c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c26:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <SystemInit+0x20>)
 8000c28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c44:	f7ff ffea 	bl	8000c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c48:	480c      	ldr	r0, [pc, #48]	@ (8000c7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c4a:	490d      	ldr	r1, [pc, #52]	@ (8000c80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c60:	4c0a      	ldr	r4, [pc, #40]	@ (8000c8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f005 fa53 	bl	8006118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c72:	f7ff fcd5 	bl	8000620 <main>
  bx  lr    
 8000c76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c80:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000c84:	08006fd8 	.word	0x08006fd8
  ldr r2, =_sbss
 8000c88:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000c8c:	20004384 	.word	0x20004384

08000c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC_IRQHandler>
	...

08000c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c98:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd4 <HAL_Init+0x40>)
 8000c9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <HAL_Init+0x40>)
 8000caa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a07      	ldr	r2, [pc, #28]	@ (8000cd4 <HAL_Init+0x40>)
 8000cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f000 f8d8 	bl	8000e72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc2:	200f      	movs	r0, #15
 8000cc4:	f7ff fed4 	bl	8000a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc8:	f7ff fe5e 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023c00 	.word	0x40023c00

08000cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	@ (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	200003e0 	.word	0x200003e0

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	200003e0 	.word	0x200003e0

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0b      	blt.n	8000da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 021f 	and.w	r2, r3, #31
 8000d94:	4907      	ldr	r1, [pc, #28]	@ (8000db4 <__NVIC_EnableIRQ+0x38>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e100 	.word	0xe000e100

08000db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db0a      	blt.n	8000de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	490c      	ldr	r1, [pc, #48]	@ (8000e04 <__NVIC_SetPriority+0x4c>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de0:	e00a      	b.n	8000df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4908      	ldr	r1, [pc, #32]	@ (8000e08 <__NVIC_SetPriority+0x50>)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	3b04      	subs	r3, #4
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	761a      	strb	r2, [r3, #24]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	@ 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f1c3 0307 	rsb	r3, r3, #7
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	bf28      	it	cs
 8000e2a:	2304      	movcs	r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d902      	bls.n	8000e3c <NVIC_EncodePriority+0x30>
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	e000      	b.n	8000e3e <NVIC_EncodePriority+0x32>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	4313      	orrs	r3, r2
         );
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	@ 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ff4c 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9a:	f7ff ff61 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000e9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	68b9      	ldr	r1, [r7, #8]
 8000ea4:	6978      	ldr	r0, [r7, #20]
 8000ea6:	f7ff ffb1 	bl	8000e0c <NVIC_EncodePriority>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ff80 	bl	8000db8 <__NVIC_SetPriority>
}
 8000eb8:	bf00      	nop
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff54 	bl	8000d7c <__NVIC_EnableIRQ>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	@ 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
 8000ef6:	e165      	b.n	80011c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef8:	2201      	movs	r2, #1
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	f040 8154 	bne.w	80011be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d005      	beq.n	8000f2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d130      	bne.n	8000f90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f64:	2201      	movs	r2, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	091b      	lsrs	r3, r3, #4
 8000f7a:	f003 0201 	and.w	r2, r3, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	d017      	beq.n	8000fcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d123      	bne.n	8001020 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	08da      	lsrs	r2, r3, #3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3208      	adds	r2, #8
 8000fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	f003 0307 	and.w	r3, r3, #7
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	220f      	movs	r2, #15
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	691a      	ldr	r2, [r3, #16]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	08da      	lsrs	r2, r3, #3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3208      	adds	r2, #8
 800101a:	69b9      	ldr	r1, [r7, #24]
 800101c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0203 	and.w	r2, r3, #3
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800105c:	2b00      	cmp	r3, #0
 800105e:	f000 80ae 	beq.w	80011be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b5d      	ldr	r3, [pc, #372]	@ (80011dc <HAL_GPIO_Init+0x300>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106a:	4a5c      	ldr	r2, [pc, #368]	@ (80011dc <HAL_GPIO_Init+0x300>)
 800106c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001070:	6453      	str	r3, [r2, #68]	@ 0x44
 8001072:	4b5a      	ldr	r3, [pc, #360]	@ (80011dc <HAL_GPIO_Init+0x300>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001076:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800107e:	4a58      	ldr	r2, [pc, #352]	@ (80011e0 <HAL_GPIO_Init+0x304>)
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	3302      	adds	r3, #2
 8001086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	220f      	movs	r2, #15
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4f      	ldr	r2, [pc, #316]	@ (80011e4 <HAL_GPIO_Init+0x308>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d025      	beq.n	80010f6 <HAL_GPIO_Init+0x21a>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4e      	ldr	r2, [pc, #312]	@ (80011e8 <HAL_GPIO_Init+0x30c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d01f      	beq.n	80010f2 <HAL_GPIO_Init+0x216>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4d      	ldr	r2, [pc, #308]	@ (80011ec <HAL_GPIO_Init+0x310>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d019      	beq.n	80010ee <HAL_GPIO_Init+0x212>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4c      	ldr	r2, [pc, #304]	@ (80011f0 <HAL_GPIO_Init+0x314>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d013      	beq.n	80010ea <HAL_GPIO_Init+0x20e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4b      	ldr	r2, [pc, #300]	@ (80011f4 <HAL_GPIO_Init+0x318>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d00d      	beq.n	80010e6 <HAL_GPIO_Init+0x20a>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4a      	ldr	r2, [pc, #296]	@ (80011f8 <HAL_GPIO_Init+0x31c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d007      	beq.n	80010e2 <HAL_GPIO_Init+0x206>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a49      	ldr	r2, [pc, #292]	@ (80011fc <HAL_GPIO_Init+0x320>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d101      	bne.n	80010de <HAL_GPIO_Init+0x202>
 80010da:	2306      	movs	r3, #6
 80010dc:	e00c      	b.n	80010f8 <HAL_GPIO_Init+0x21c>
 80010de:	2307      	movs	r3, #7
 80010e0:	e00a      	b.n	80010f8 <HAL_GPIO_Init+0x21c>
 80010e2:	2305      	movs	r3, #5
 80010e4:	e008      	b.n	80010f8 <HAL_GPIO_Init+0x21c>
 80010e6:	2304      	movs	r3, #4
 80010e8:	e006      	b.n	80010f8 <HAL_GPIO_Init+0x21c>
 80010ea:	2303      	movs	r3, #3
 80010ec:	e004      	b.n	80010f8 <HAL_GPIO_Init+0x21c>
 80010ee:	2302      	movs	r3, #2
 80010f0:	e002      	b.n	80010f8 <HAL_GPIO_Init+0x21c>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <HAL_GPIO_Init+0x21c>
 80010f6:	2300      	movs	r3, #0
 80010f8:	69fa      	ldr	r2, [r7, #28]
 80010fa:	f002 0203 	and.w	r2, r2, #3
 80010fe:	0092      	lsls	r2, r2, #2
 8001100:	4093      	lsls	r3, r2
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001108:	4935      	ldr	r1, [pc, #212]	@ (80011e0 <HAL_GPIO_Init+0x304>)
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	089b      	lsrs	r3, r3, #2
 800110e:	3302      	adds	r3, #2
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001116:	4b3a      	ldr	r3, [pc, #232]	@ (8001200 <HAL_GPIO_Init+0x324>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800113a:	4a31      	ldr	r2, [pc, #196]	@ (8001200 <HAL_GPIO_Init+0x324>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001140:	4b2f      	ldr	r3, [pc, #188]	@ (8001200 <HAL_GPIO_Init+0x324>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001164:	4a26      	ldr	r2, [pc, #152]	@ (8001200 <HAL_GPIO_Init+0x324>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800116a:	4b25      	ldr	r3, [pc, #148]	@ (8001200 <HAL_GPIO_Init+0x324>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800118e:	4a1c      	ldr	r2, [pc, #112]	@ (8001200 <HAL_GPIO_Init+0x324>)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001194:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <HAL_GPIO_Init+0x324>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b8:	4a11      	ldr	r2, [pc, #68]	@ (8001200 <HAL_GPIO_Init+0x324>)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3301      	adds	r3, #1
 80011c2:	61fb      	str	r3, [r7, #28]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	2b0f      	cmp	r3, #15
 80011c8:	f67f ae96 	bls.w	8000ef8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3724      	adds	r7, #36	@ 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40013800 	.word	0x40013800
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40020400 	.word	0x40020400
 80011ec:	40020800 	.word	0x40020800
 80011f0:	40020c00 	.word	0x40020c00
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40021400 	.word	0x40021400
 80011fc:	40021800 	.word	0x40021800
 8001200:	40013c00 	.word	0x40013c00

08001204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]
 8001210:	4613      	mov	r3, r2
 8001212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001214:	787b      	ldrb	r3, [r7, #1]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001220:	e003      	b.n	800122a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001222:	887b      	ldrh	r3, [r7, #2]
 8001224:	041a      	lsls	r2, r3, #16
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	619a      	str	r2, [r3, #24]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001242:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001244:	695a      	ldr	r2, [r3, #20]
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	4013      	ands	r3, r2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d006      	beq.n	800125c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800124e:	4a05      	ldr	r2, [pc, #20]	@ (8001264 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fb44 	bl	80008e4 <HAL_GPIO_EXTI_Callback>
  }
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40013c00 	.word	0x40013c00

08001268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e0cc      	b.n	8001416 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800127c:	4b68      	ldr	r3, [pc, #416]	@ (8001420 <HAL_RCC_ClockConfig+0x1b8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 030f 	and.w	r3, r3, #15
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	d90c      	bls.n	80012a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128a:	4b65      	ldr	r3, [pc, #404]	@ (8001420 <HAL_RCC_ClockConfig+0x1b8>)
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001292:	4b63      	ldr	r3, [pc, #396]	@ (8001420 <HAL_RCC_ClockConfig+0x1b8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	429a      	cmp	r2, r3
 800129e:	d001      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e0b8      	b.n	8001416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d020      	beq.n	80012f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012bc:	4b59      	ldr	r3, [pc, #356]	@ (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	4a58      	ldr	r2, [pc, #352]	@ (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80012c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d005      	beq.n	80012e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012d4:	4b53      	ldr	r3, [pc, #332]	@ (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	4a52      	ldr	r2, [pc, #328]	@ (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e0:	4b50      	ldr	r3, [pc, #320]	@ (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	494d      	ldr	r1, [pc, #308]	@ (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d044      	beq.n	8001388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d107      	bne.n	8001316 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	4b47      	ldr	r3, [pc, #284]	@ (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d119      	bne.n	8001346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e07f      	b.n	8001416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d003      	beq.n	8001326 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001322:	2b03      	cmp	r3, #3
 8001324:	d107      	bne.n	8001336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001326:	4b3f      	ldr	r3, [pc, #252]	@ (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d109      	bne.n	8001346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e06f      	b.n	8001416 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001336:	4b3b      	ldr	r3, [pc, #236]	@ (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e067      	b.n	8001416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001346:	4b37      	ldr	r3, [pc, #220]	@ (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f023 0203 	bic.w	r2, r3, #3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	4934      	ldr	r1, [pc, #208]	@ (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 8001354:	4313      	orrs	r3, r2
 8001356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001358:	f7ff fcd2 	bl	8000d00 <HAL_GetTick>
 800135c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135e:	e00a      	b.n	8001376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001360:	f7ff fcce 	bl	8000d00 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800136e:	4293      	cmp	r3, r2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e04f      	b.n	8001416 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001376:	4b2b      	ldr	r3, [pc, #172]	@ (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 020c 	and.w	r2, r3, #12
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	429a      	cmp	r2, r3
 8001386:	d1eb      	bne.n	8001360 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001388:	4b25      	ldr	r3, [pc, #148]	@ (8001420 <HAL_RCC_ClockConfig+0x1b8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 030f 	and.w	r3, r3, #15
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d20c      	bcs.n	80013b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001396:	4b22      	ldr	r3, [pc, #136]	@ (8001420 <HAL_RCC_ClockConfig+0x1b8>)
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800139e:	4b20      	ldr	r3, [pc, #128]	@ (8001420 <HAL_RCC_ClockConfig+0x1b8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d001      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e032      	b.n	8001416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d008      	beq.n	80013ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013bc:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	4916      	ldr	r1, [pc, #88]	@ (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d009      	beq.n	80013ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013da:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	490e      	ldr	r1, [pc, #56]	@ (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013ee:	f000 f887 	bl	8001500 <HAL_RCC_GetSysClockFreq>
 80013f2:	4602      	mov	r2, r0
 80013f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	091b      	lsrs	r3, r3, #4
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	490a      	ldr	r1, [pc, #40]	@ (8001428 <HAL_RCC_ClockConfig+0x1c0>)
 8001400:	5ccb      	ldrb	r3, [r1, r3]
 8001402:	fa22 f303 	lsr.w	r3, r2, r3
 8001406:	4a09      	ldr	r2, [pc, #36]	@ (800142c <HAL_RCC_ClockConfig+0x1c4>)
 8001408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <HAL_RCC_ClockConfig+0x1c8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fb2e 	bl	8000a70 <HAL_InitTick>

  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40023c00 	.word	0x40023c00
 8001424:	40023800 	.word	0x40023800
 8001428:	08006f5c 	.word	0x08006f5c
 800142c:	20000000 	.word	0x20000000
 8001430:	20000004 	.word	0x20000004

08001434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001438:	4b03      	ldr	r3, [pc, #12]	@ (8001448 <HAL_RCC_GetHCLKFreq+0x14>)
 800143a:	681b      	ldr	r3, [r3, #0]
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000000 	.word	0x20000000

0800144c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001450:	f7ff fff0 	bl	8001434 <HAL_RCC_GetHCLKFreq>
 8001454:	4602      	mov	r2, r0
 8001456:	4b05      	ldr	r3, [pc, #20]	@ (800146c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	0a9b      	lsrs	r3, r3, #10
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	4903      	ldr	r1, [pc, #12]	@ (8001470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001462:	5ccb      	ldrb	r3, [r1, r3]
 8001464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001468:	4618      	mov	r0, r3
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800
 8001470:	08006f6c 	.word	0x08006f6c

08001474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001478:	f7ff ffdc 	bl	8001434 <HAL_RCC_GetHCLKFreq>
 800147c:	4602      	mov	r2, r0
 800147e:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	0b5b      	lsrs	r3, r3, #13
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	4903      	ldr	r1, [pc, #12]	@ (8001498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800148a:	5ccb      	ldrb	r3, [r1, r3]
 800148c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800
 8001498:	08006f6c 	.word	0x08006f6c

0800149c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	220f      	movs	r2, #15
 80014aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014ac:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <HAL_RCC_GetClockConfig+0x5c>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 0203 	and.w	r2, r3, #3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014b8:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <HAL_RCC_GetClockConfig+0x5c>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <HAL_RCC_GetClockConfig+0x5c>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014d0:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <HAL_RCC_GetClockConfig+0x5c>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	08db      	lsrs	r3, r3, #3
 80014d6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014de:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <HAL_RCC_GetClockConfig+0x60>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 020f 	and.w	r2, r3, #15
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	601a      	str	r2, [r3, #0]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40023c00 	.word	0x40023c00

08001500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001504:	b0ae      	sub	sp, #184	@ 0xb8
 8001506:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800151a:	2300      	movs	r3, #0
 800151c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001526:	4bcb      	ldr	r3, [pc, #812]	@ (8001854 <HAL_RCC_GetSysClockFreq+0x354>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b0c      	cmp	r3, #12
 8001530:	f200 8206 	bhi.w	8001940 <HAL_RCC_GetSysClockFreq+0x440>
 8001534:	a201      	add	r2, pc, #4	@ (adr r2, 800153c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153a:	bf00      	nop
 800153c:	08001571 	.word	0x08001571
 8001540:	08001941 	.word	0x08001941
 8001544:	08001941 	.word	0x08001941
 8001548:	08001941 	.word	0x08001941
 800154c:	08001579 	.word	0x08001579
 8001550:	08001941 	.word	0x08001941
 8001554:	08001941 	.word	0x08001941
 8001558:	08001941 	.word	0x08001941
 800155c:	08001581 	.word	0x08001581
 8001560:	08001941 	.word	0x08001941
 8001564:	08001941 	.word	0x08001941
 8001568:	08001941 	.word	0x08001941
 800156c:	08001771 	.word	0x08001771
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001570:	4bb9      	ldr	r3, [pc, #740]	@ (8001858 <HAL_RCC_GetSysClockFreq+0x358>)
 8001572:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001576:	e1e7      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001578:	4bb8      	ldr	r3, [pc, #736]	@ (800185c <HAL_RCC_GetSysClockFreq+0x35c>)
 800157a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800157e:	e1e3      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001580:	4bb4      	ldr	r3, [pc, #720]	@ (8001854 <HAL_RCC_GetSysClockFreq+0x354>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001588:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800158c:	4bb1      	ldr	r3, [pc, #708]	@ (8001854 <HAL_RCC_GetSysClockFreq+0x354>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d071      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001598:	4bae      	ldr	r3, [pc, #696]	@ (8001854 <HAL_RCC_GetSysClockFreq+0x354>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	099b      	lsrs	r3, r3, #6
 800159e:	2200      	movs	r2, #0
 80015a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80015a4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80015a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80015ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015be:	4622      	mov	r2, r4
 80015c0:	462b      	mov	r3, r5
 80015c2:	f04f 0000 	mov.w	r0, #0
 80015c6:	f04f 0100 	mov.w	r1, #0
 80015ca:	0159      	lsls	r1, r3, #5
 80015cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015d0:	0150      	lsls	r0, r2, #5
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4621      	mov	r1, r4
 80015d8:	1a51      	subs	r1, r2, r1
 80015da:	6439      	str	r1, [r7, #64]	@ 0x40
 80015dc:	4629      	mov	r1, r5
 80015de:	eb63 0301 	sbc.w	r3, r3, r1
 80015e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80015f0:	4649      	mov	r1, r9
 80015f2:	018b      	lsls	r3, r1, #6
 80015f4:	4641      	mov	r1, r8
 80015f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015fa:	4641      	mov	r1, r8
 80015fc:	018a      	lsls	r2, r1, #6
 80015fe:	4641      	mov	r1, r8
 8001600:	1a51      	subs	r1, r2, r1
 8001602:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001604:	4649      	mov	r1, r9
 8001606:	eb63 0301 	sbc.w	r3, r3, r1
 800160a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001618:	4649      	mov	r1, r9
 800161a:	00cb      	lsls	r3, r1, #3
 800161c:	4641      	mov	r1, r8
 800161e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001622:	4641      	mov	r1, r8
 8001624:	00ca      	lsls	r2, r1, #3
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	4603      	mov	r3, r0
 800162c:	4622      	mov	r2, r4
 800162e:	189b      	adds	r3, r3, r2
 8001630:	633b      	str	r3, [r7, #48]	@ 0x30
 8001632:	462b      	mov	r3, r5
 8001634:	460a      	mov	r2, r1
 8001636:	eb42 0303 	adc.w	r3, r2, r3
 800163a:	637b      	str	r3, [r7, #52]	@ 0x34
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001648:	4629      	mov	r1, r5
 800164a:	024b      	lsls	r3, r1, #9
 800164c:	4621      	mov	r1, r4
 800164e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001652:	4621      	mov	r1, r4
 8001654:	024a      	lsls	r2, r1, #9
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800165e:	2200      	movs	r2, #0
 8001660:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001664:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001668:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800166c:	f7fe fe28 	bl	80002c0 <__aeabi_uldivmod>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4613      	mov	r3, r2
 8001676:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800167a:	e067      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800167c:	4b75      	ldr	r3, [pc, #468]	@ (8001854 <HAL_RCC_GetSysClockFreq+0x354>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	099b      	lsrs	r3, r3, #6
 8001682:	2200      	movs	r2, #0
 8001684:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001688:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800168c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001694:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001696:	2300      	movs	r3, #0
 8001698:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800169a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800169e:	4622      	mov	r2, r4
 80016a0:	462b      	mov	r3, r5
 80016a2:	f04f 0000 	mov.w	r0, #0
 80016a6:	f04f 0100 	mov.w	r1, #0
 80016aa:	0159      	lsls	r1, r3, #5
 80016ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016b0:	0150      	lsls	r0, r2, #5
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4621      	mov	r1, r4
 80016b8:	1a51      	subs	r1, r2, r1
 80016ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 80016bc:	4629      	mov	r1, r5
 80016be:	eb63 0301 	sbc.w	r3, r3, r1
 80016c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80016d0:	4649      	mov	r1, r9
 80016d2:	018b      	lsls	r3, r1, #6
 80016d4:	4641      	mov	r1, r8
 80016d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016da:	4641      	mov	r1, r8
 80016dc:	018a      	lsls	r2, r1, #6
 80016de:	4641      	mov	r1, r8
 80016e0:	ebb2 0a01 	subs.w	sl, r2, r1
 80016e4:	4649      	mov	r1, r9
 80016e6:	eb63 0b01 	sbc.w	fp, r3, r1
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016f6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80016fe:	4692      	mov	sl, r2
 8001700:	469b      	mov	fp, r3
 8001702:	4623      	mov	r3, r4
 8001704:	eb1a 0303 	adds.w	r3, sl, r3
 8001708:	623b      	str	r3, [r7, #32]
 800170a:	462b      	mov	r3, r5
 800170c:	eb4b 0303 	adc.w	r3, fp, r3
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800171e:	4629      	mov	r1, r5
 8001720:	028b      	lsls	r3, r1, #10
 8001722:	4621      	mov	r1, r4
 8001724:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001728:	4621      	mov	r1, r4
 800172a:	028a      	lsls	r2, r1, #10
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001734:	2200      	movs	r2, #0
 8001736:	673b      	str	r3, [r7, #112]	@ 0x70
 8001738:	677a      	str	r2, [r7, #116]	@ 0x74
 800173a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800173e:	f7fe fdbf 	bl	80002c0 <__aeabi_uldivmod>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4613      	mov	r3, r2
 8001748:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800174c:	4b41      	ldr	r3, [pc, #260]	@ (8001854 <HAL_RCC_GetSysClockFreq+0x354>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	0c1b      	lsrs	r3, r3, #16
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	3301      	adds	r3, #1
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800175e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001762:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001766:	fbb2 f3f3 	udiv	r3, r2, r3
 800176a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800176e:	e0eb      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001770:	4b38      	ldr	r3, [pc, #224]	@ (8001854 <HAL_RCC_GetSysClockFreq+0x354>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001778:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800177c:	4b35      	ldr	r3, [pc, #212]	@ (8001854 <HAL_RCC_GetSysClockFreq+0x354>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d06b      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001788:	4b32      	ldr	r3, [pc, #200]	@ (8001854 <HAL_RCC_GetSysClockFreq+0x354>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	099b      	lsrs	r3, r3, #6
 800178e:	2200      	movs	r2, #0
 8001790:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001792:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001794:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800179a:	663b      	str	r3, [r7, #96]	@ 0x60
 800179c:	2300      	movs	r3, #0
 800179e:	667b      	str	r3, [r7, #100]	@ 0x64
 80017a0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80017a4:	4622      	mov	r2, r4
 80017a6:	462b      	mov	r3, r5
 80017a8:	f04f 0000 	mov.w	r0, #0
 80017ac:	f04f 0100 	mov.w	r1, #0
 80017b0:	0159      	lsls	r1, r3, #5
 80017b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017b6:	0150      	lsls	r0, r2, #5
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4621      	mov	r1, r4
 80017be:	1a51      	subs	r1, r2, r1
 80017c0:	61b9      	str	r1, [r7, #24]
 80017c2:	4629      	mov	r1, r5
 80017c4:	eb63 0301 	sbc.w	r3, r3, r1
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80017d6:	4659      	mov	r1, fp
 80017d8:	018b      	lsls	r3, r1, #6
 80017da:	4651      	mov	r1, sl
 80017dc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017e0:	4651      	mov	r1, sl
 80017e2:	018a      	lsls	r2, r1, #6
 80017e4:	4651      	mov	r1, sl
 80017e6:	ebb2 0801 	subs.w	r8, r2, r1
 80017ea:	4659      	mov	r1, fp
 80017ec:	eb63 0901 	sbc.w	r9, r3, r1
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001800:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001804:	4690      	mov	r8, r2
 8001806:	4699      	mov	r9, r3
 8001808:	4623      	mov	r3, r4
 800180a:	eb18 0303 	adds.w	r3, r8, r3
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	462b      	mov	r3, r5
 8001812:	eb49 0303 	adc.w	r3, r9, r3
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001824:	4629      	mov	r1, r5
 8001826:	024b      	lsls	r3, r1, #9
 8001828:	4621      	mov	r1, r4
 800182a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800182e:	4621      	mov	r1, r4
 8001830:	024a      	lsls	r2, r1, #9
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800183a:	2200      	movs	r2, #0
 800183c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800183e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001840:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001844:	f7fe fd3c 	bl	80002c0 <__aeabi_uldivmod>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4613      	mov	r3, r2
 800184e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001852:	e065      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0x420>
 8001854:	40023800 	.word	0x40023800
 8001858:	00f42400 	.word	0x00f42400
 800185c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001860:	4b3d      	ldr	r3, [pc, #244]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x458>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	099b      	lsrs	r3, r3, #6
 8001866:	2200      	movs	r2, #0
 8001868:	4618      	mov	r0, r3
 800186a:	4611      	mov	r1, r2
 800186c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001870:	653b      	str	r3, [r7, #80]	@ 0x50
 8001872:	2300      	movs	r3, #0
 8001874:	657b      	str	r3, [r7, #84]	@ 0x54
 8001876:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800187a:	4642      	mov	r2, r8
 800187c:	464b      	mov	r3, r9
 800187e:	f04f 0000 	mov.w	r0, #0
 8001882:	f04f 0100 	mov.w	r1, #0
 8001886:	0159      	lsls	r1, r3, #5
 8001888:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800188c:	0150      	lsls	r0, r2, #5
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4641      	mov	r1, r8
 8001894:	1a51      	subs	r1, r2, r1
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	4649      	mov	r1, r9
 800189a:	eb63 0301 	sbc.w	r3, r3, r1
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80018ac:	4659      	mov	r1, fp
 80018ae:	018b      	lsls	r3, r1, #6
 80018b0:	4651      	mov	r1, sl
 80018b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018b6:	4651      	mov	r1, sl
 80018b8:	018a      	lsls	r2, r1, #6
 80018ba:	4651      	mov	r1, sl
 80018bc:	1a54      	subs	r4, r2, r1
 80018be:	4659      	mov	r1, fp
 80018c0:	eb63 0501 	sbc.w	r5, r3, r1
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	00eb      	lsls	r3, r5, #3
 80018ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018d2:	00e2      	lsls	r2, r4, #3
 80018d4:	4614      	mov	r4, r2
 80018d6:	461d      	mov	r5, r3
 80018d8:	4643      	mov	r3, r8
 80018da:	18e3      	adds	r3, r4, r3
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	464b      	mov	r3, r9
 80018e0:	eb45 0303 	adc.w	r3, r5, r3
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018f2:	4629      	mov	r1, r5
 80018f4:	028b      	lsls	r3, r1, #10
 80018f6:	4621      	mov	r1, r4
 80018f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018fc:	4621      	mov	r1, r4
 80018fe:	028a      	lsls	r2, r1, #10
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001908:	2200      	movs	r2, #0
 800190a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800190c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800190e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001912:	f7fe fcd5 	bl	80002c0 <__aeabi_uldivmod>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4613      	mov	r3, r2
 800191c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001920:	4b0d      	ldr	r3, [pc, #52]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x458>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	0f1b      	lsrs	r3, r3, #28
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800192e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001932:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001936:	fbb2 f3f3 	udiv	r3, r2, r3
 800193a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800193e:	e003      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001942:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001946:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001948:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800194c:	4618      	mov	r0, r3
 800194e:	37b8      	adds	r7, #184	@ 0xb8
 8001950:	46bd      	mov	sp, r7
 8001952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800
 800195c:	00f42400 	.word	0x00f42400

08001960 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e28d      	b.n	8001e8e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 8083 	beq.w	8001a86 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001980:	4b94      	ldr	r3, [pc, #592]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b04      	cmp	r3, #4
 800198a:	d019      	beq.n	80019c0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800198c:	4b91      	ldr	r3, [pc, #580]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 030c 	and.w	r3, r3, #12
        || \
 8001994:	2b08      	cmp	r3, #8
 8001996:	d106      	bne.n	80019a6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001998:	4b8e      	ldr	r3, [pc, #568]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019a4:	d00c      	beq.n	80019c0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a6:	4b8b      	ldr	r3, [pc, #556]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019ae:	2b0c      	cmp	r3, #12
 80019b0:	d112      	bne.n	80019d8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b2:	4b88      	ldr	r3, [pc, #544]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019be:	d10b      	bne.n	80019d8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	4b84      	ldr	r3, [pc, #528]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d05b      	beq.n	8001a84 <HAL_RCC_OscConfig+0x124>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d157      	bne.n	8001a84 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e25a      	b.n	8001e8e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019e0:	d106      	bne.n	80019f0 <HAL_RCC_OscConfig+0x90>
 80019e2:	4b7c      	ldr	r3, [pc, #496]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a7b      	ldr	r2, [pc, #492]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 80019e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	e01d      	b.n	8001a2c <HAL_RCC_OscConfig+0xcc>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019f8:	d10c      	bne.n	8001a14 <HAL_RCC_OscConfig+0xb4>
 80019fa:	4b76      	ldr	r3, [pc, #472]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a75      	ldr	r2, [pc, #468]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001a00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	4b73      	ldr	r3, [pc, #460]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a72      	ldr	r2, [pc, #456]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	e00b      	b.n	8001a2c <HAL_RCC_OscConfig+0xcc>
 8001a14:	4b6f      	ldr	r3, [pc, #444]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a6e      	ldr	r2, [pc, #440]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001a1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a6b      	ldr	r2, [pc, #428]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001a26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d013      	beq.n	8001a5c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff f964 	bl	8000d00 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff f960 	bl	8000d00 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	@ 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e21f      	b.n	8001e8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	4b61      	ldr	r3, [pc, #388]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0xdc>
 8001a5a:	e014      	b.n	8001a86 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f950 	bl	8000d00 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff f94c 	bl	8000d00 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	@ 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e20b      	b.n	8001e8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a76:	4b57      	ldr	r3, [pc, #348]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x104>
 8001a82:	e000      	b.n	8001a86 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d06f      	beq.n	8001b72 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a92:	4b50      	ldr	r3, [pc, #320]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d017      	beq.n	8001ace <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a9e:	4b4d      	ldr	r3, [pc, #308]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
        || \
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d105      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00b      	beq.n	8001ace <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ab6:	4b47      	ldr	r3, [pc, #284]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001abe:	2b0c      	cmp	r3, #12
 8001ac0:	d11c      	bne.n	8001afc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ac2:	4b44      	ldr	r3, [pc, #272]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d116      	bne.n	8001afc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ace:	4b41      	ldr	r3, [pc, #260]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d005      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x186>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d001      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e1d3      	b.n	8001e8e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4937      	ldr	r1, [pc, #220]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afa:	e03a      	b.n	8001b72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d020      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b04:	4b34      	ldr	r3, [pc, #208]	@ (8001bd8 <HAL_RCC_OscConfig+0x278>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0a:	f7ff f8f9 	bl	8000d00 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b12:	f7ff f8f5 	bl	8000d00 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e1b4      	b.n	8001e8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b24:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b30:	4b28      	ldr	r3, [pc, #160]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4925      	ldr	r1, [pc, #148]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]
 8001b44:	e015      	b.n	8001b72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b46:	4b24      	ldr	r3, [pc, #144]	@ (8001bd8 <HAL_RCC_OscConfig+0x278>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff f8d8 	bl	8000d00 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b54:	f7ff f8d4 	bl	8000d00 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e193      	b.n	8001e8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b66:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d036      	beq.n	8001bec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d016      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b86:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8c:	f7ff f8b8 	bl	8000d00 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b94:	f7ff f8b4 	bl	8000d00 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e173      	b.n	8001e8e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x234>
 8001bb2:	e01b      	b.n	8001bec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb4:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <HAL_RCC_OscConfig+0x27c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bba:	f7ff f8a1 	bl	8000d00 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc0:	e00e      	b.n	8001be0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc2:	f7ff f89d 	bl	8000d00 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d907      	bls.n	8001be0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e15c      	b.n	8001e8e <HAL_RCC_OscConfig+0x52e>
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	42470000 	.word	0x42470000
 8001bdc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be0:	4b8a      	ldr	r3, [pc, #552]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001be2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1ea      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 8097 	beq.w	8001d28 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfe:	4b83      	ldr	r3, [pc, #524]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10f      	bne.n	8001c2a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	4b7f      	ldr	r3, [pc, #508]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	4a7e      	ldr	r2, [pc, #504]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1a:	4b7c      	ldr	r3, [pc, #496]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c26:	2301      	movs	r3, #1
 8001c28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2a:	4b79      	ldr	r3, [pc, #484]	@ (8001e10 <HAL_RCC_OscConfig+0x4b0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d118      	bne.n	8001c68 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c36:	4b76      	ldr	r3, [pc, #472]	@ (8001e10 <HAL_RCC_OscConfig+0x4b0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a75      	ldr	r2, [pc, #468]	@ (8001e10 <HAL_RCC_OscConfig+0x4b0>)
 8001c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c42:	f7ff f85d 	bl	8000d00 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c4a:	f7ff f859 	bl	8000d00 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e118      	b.n	8001e8e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5c:	4b6c      	ldr	r3, [pc, #432]	@ (8001e10 <HAL_RCC_OscConfig+0x4b0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x31e>
 8001c70:	4b66      	ldr	r3, [pc, #408]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c74:	4a65      	ldr	r2, [pc, #404]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c7c:	e01c      	b.n	8001cb8 <HAL_RCC_OscConfig+0x358>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b05      	cmp	r3, #5
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x340>
 8001c86:	4b61      	ldr	r3, [pc, #388]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8a:	4a60      	ldr	r2, [pc, #384]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001c8c:	f043 0304 	orr.w	r3, r3, #4
 8001c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c92:	4b5e      	ldr	r3, [pc, #376]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c96:	4a5d      	ldr	r2, [pc, #372]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c9e:	e00b      	b.n	8001cb8 <HAL_RCC_OscConfig+0x358>
 8001ca0:	4b5a      	ldr	r3, [pc, #360]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca4:	4a59      	ldr	r2, [pc, #356]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001ca6:	f023 0301 	bic.w	r3, r3, #1
 8001caa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cac:	4b57      	ldr	r3, [pc, #348]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb0:	4a56      	ldr	r2, [pc, #344]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001cb2:	f023 0304 	bic.w	r3, r3, #4
 8001cb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d015      	beq.n	8001cec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc0:	f7ff f81e 	bl	8000d00 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc6:	e00a      	b.n	8001cde <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc8:	f7ff f81a 	bl	8000d00 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e0d7      	b.n	8001e8e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cde:	4b4b      	ldr	r3, [pc, #300]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0ee      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x368>
 8001cea:	e014      	b.n	8001d16 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cec:	f7ff f808 	bl	8000d00 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf4:	f7ff f804 	bl	8000d00 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e0c1      	b.n	8001e8e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0a:	4b40      	ldr	r3, [pc, #256]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1ee      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d16:	7dfb      	ldrb	r3, [r7, #23]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d105      	bne.n	8001d28 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d20:	4a3a      	ldr	r2, [pc, #232]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001d22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 80ad 	beq.w	8001e8c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d32:	4b36      	ldr	r3, [pc, #216]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d060      	beq.n	8001e00 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d145      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d46:	4b33      	ldr	r3, [pc, #204]	@ (8001e14 <HAL_RCC_OscConfig+0x4b4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7fe ffd8 	bl	8000d00 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d54:	f7fe ffd4 	bl	8000d00 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e093      	b.n	8001e8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d66:	4b29      	ldr	r3, [pc, #164]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69da      	ldr	r2, [r3, #28]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d80:	019b      	lsls	r3, r3, #6
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d88:	085b      	lsrs	r3, r3, #1
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	041b      	lsls	r3, r3, #16
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d94:	061b      	lsls	r3, r3, #24
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9c:	071b      	lsls	r3, r3, #28
 8001d9e:	491b      	ldr	r1, [pc, #108]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e14 <HAL_RCC_OscConfig+0x4b4>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001daa:	f7fe ffa9 	bl	8000d00 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db2:	f7fe ffa5 	bl	8000d00 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e064      	b.n	8001e8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x452>
 8001dd0:	e05c      	b.n	8001e8c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd2:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <HAL_RCC_OscConfig+0x4b4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7fe ff92 	bl	8000d00 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de0:	f7fe ff8e 	bl	8000d00 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e04d      	b.n	8001e8e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df2:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <HAL_RCC_OscConfig+0x4ac>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x480>
 8001dfe:	e045      	b.n	8001e8c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d107      	bne.n	8001e18 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e040      	b.n	8001e8e <HAL_RCC_OscConfig+0x52e>
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40007000 	.word	0x40007000
 8001e14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e18:	4b1f      	ldr	r3, [pc, #124]	@ (8001e98 <HAL_RCC_OscConfig+0x538>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d030      	beq.n	8001e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d129      	bne.n	8001e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d122      	bne.n	8001e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e48:	4013      	ands	r3, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d119      	bne.n	8001e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5e:	085b      	lsrs	r3, r3, #1
 8001e60:	3b01      	subs	r3, #1
 8001e62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d10f      	bne.n	8001e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d107      	bne.n	8001e88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800

08001e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e041      	b.n	8001f32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d106      	bne.n	8001ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f839 	bl	8001f3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4610      	mov	r0, r2
 8001edc:	f000 f9c0 	bl	8002260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d001      	beq.n	8001f68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e04e      	b.n	8002006 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a23      	ldr	r2, [pc, #140]	@ (8002014 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d022      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x80>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f92:	d01d      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x80>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a1f      	ldr	r2, [pc, #124]	@ (8002018 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d018      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x80>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800201c <HAL_TIM_Base_Start_IT+0xcc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d013      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x80>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a1c      	ldr	r2, [pc, #112]	@ (8002020 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00e      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x80>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8002024 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d009      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x80>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a19      	ldr	r2, [pc, #100]	@ (8002028 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d004      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x80>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a18      	ldr	r2, [pc, #96]	@ (800202c <HAL_TIM_Base_Start_IT+0xdc>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d111      	bne.n	8001ff4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b06      	cmp	r3, #6
 8001fe0:	d010      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0201 	orr.w	r2, r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ff2:	e007      	b.n	8002004 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40010000 	.word	0x40010000
 8002018:	40000400 	.word	0x40000400
 800201c:	40000800 	.word	0x40000800
 8002020:	40000c00 	.word	0x40000c00
 8002024:	40010400 	.word	0x40010400
 8002028:	40014000 	.word	0x40014000
 800202c:	40001800 	.word	0x40001800

08002030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d020      	beq.n	8002094 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d01b      	beq.n	8002094 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0202 	mvn.w	r2, #2
 8002064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f8d2 	bl	8002224 <HAL_TIM_IC_CaptureCallback>
 8002080:	e005      	b.n	800208e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f8c4 	bl	8002210 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f8d5 	bl	8002238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b00      	cmp	r3, #0
 800209c:	d020      	beq.n	80020e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01b      	beq.n	80020e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0204 	mvn.w	r2, #4
 80020b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2202      	movs	r2, #2
 80020b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f8ac 	bl	8002224 <HAL_TIM_IC_CaptureCallback>
 80020cc:	e005      	b.n	80020da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f89e 	bl	8002210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f8af 	bl	8002238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d020      	beq.n	800212c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d01b      	beq.n	800212c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0208 	mvn.w	r2, #8
 80020fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2204      	movs	r2, #4
 8002102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f886 	bl	8002224 <HAL_TIM_IC_CaptureCallback>
 8002118:	e005      	b.n	8002126 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f878 	bl	8002210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f889 	bl	8002238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	2b00      	cmp	r3, #0
 8002134:	d020      	beq.n	8002178 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01b      	beq.n	8002178 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0210 	mvn.w	r2, #16
 8002148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2208      	movs	r2, #8
 800214e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f860 	bl	8002224 <HAL_TIM_IC_CaptureCallback>
 8002164:	e005      	b.n	8002172 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f852 	bl	8002210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f863 	bl	8002238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00c      	beq.n	800219c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0201 	mvn.w	r2, #1
 8002194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7fe fbde 	bl	8000958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00c      	beq.n	80021c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d007      	beq.n	80021c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f900 	bl	80023c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00c      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d007      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f834 	bl	800224c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f003 0320 	and.w	r3, r3, #32
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00c      	beq.n	8002208 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d007      	beq.n	8002208 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0220 	mvn.w	r2, #32
 8002200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f8d2 	bl	80023ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a43      	ldr	r2, [pc, #268]	@ (8002380 <TIM_Base_SetConfig+0x120>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d013      	beq.n	80022a0 <TIM_Base_SetConfig+0x40>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800227e:	d00f      	beq.n	80022a0 <TIM_Base_SetConfig+0x40>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a40      	ldr	r2, [pc, #256]	@ (8002384 <TIM_Base_SetConfig+0x124>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d00b      	beq.n	80022a0 <TIM_Base_SetConfig+0x40>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a3f      	ldr	r2, [pc, #252]	@ (8002388 <TIM_Base_SetConfig+0x128>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d007      	beq.n	80022a0 <TIM_Base_SetConfig+0x40>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a3e      	ldr	r2, [pc, #248]	@ (800238c <TIM_Base_SetConfig+0x12c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d003      	beq.n	80022a0 <TIM_Base_SetConfig+0x40>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a3d      	ldr	r2, [pc, #244]	@ (8002390 <TIM_Base_SetConfig+0x130>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d108      	bne.n	80022b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a32      	ldr	r2, [pc, #200]	@ (8002380 <TIM_Base_SetConfig+0x120>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d02b      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022c0:	d027      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002384 <TIM_Base_SetConfig+0x124>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d023      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002388 <TIM_Base_SetConfig+0x128>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01f      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a2d      	ldr	r2, [pc, #180]	@ (800238c <TIM_Base_SetConfig+0x12c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01b      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002390 <TIM_Base_SetConfig+0x130>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d017      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002394 <TIM_Base_SetConfig+0x134>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002398 <TIM_Base_SetConfig+0x138>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00f      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a29      	ldr	r2, [pc, #164]	@ (800239c <TIM_Base_SetConfig+0x13c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00b      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a28      	ldr	r2, [pc, #160]	@ (80023a0 <TIM_Base_SetConfig+0x140>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d007      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a27      	ldr	r2, [pc, #156]	@ (80023a4 <TIM_Base_SetConfig+0x144>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d003      	beq.n	8002312 <TIM_Base_SetConfig+0xb2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a26      	ldr	r2, [pc, #152]	@ (80023a8 <TIM_Base_SetConfig+0x148>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d108      	bne.n	8002324 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	4313      	orrs	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	4313      	orrs	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a0e      	ldr	r2, [pc, #56]	@ (8002380 <TIM_Base_SetConfig+0x120>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d003      	beq.n	8002352 <TIM_Base_SetConfig+0xf2>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a10      	ldr	r2, [pc, #64]	@ (8002390 <TIM_Base_SetConfig+0x130>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d103      	bne.n	800235a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f043 0204 	orr.w	r2, r3, #4
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	601a      	str	r2, [r3, #0]
}
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40010000 	.word	0x40010000
 8002384:	40000400 	.word	0x40000400
 8002388:	40000800 	.word	0x40000800
 800238c:	40000c00 	.word	0x40000c00
 8002390:	40010400 	.word	0x40010400
 8002394:	40014000 	.word	0x40014000
 8002398:	40014400 	.word	0x40014400
 800239c:	40014800 	.word	0x40014800
 80023a0:	40001800 	.word	0x40001800
 80023a4:	40001c00 	.word	0x40001c00
 80023a8:	40002000 	.word	0x40002000

080023ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e042      	b.n	800246c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe faf0 	bl	80009e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2224      	movs	r2, #36	@ 0x24
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002416:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f82b 	bl	8002474 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800242c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800243c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800244c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2220      	movs	r2, #32
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002478:	b0c0      	sub	sp, #256	@ 0x100
 800247a:	af00      	add	r7, sp, #0
 800247c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800248c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002490:	68d9      	ldr	r1, [r3, #12]
 8002492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	ea40 0301 	orr.w	r3, r0, r1
 800249c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800249e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80024cc:	f021 010c 	bic.w	r1, r1, #12
 80024d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80024da:	430b      	orrs	r3, r1
 80024dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80024ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ee:	6999      	ldr	r1, [r3, #24]
 80024f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	ea40 0301 	orr.w	r3, r0, r1
 80024fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	4b8f      	ldr	r3, [pc, #572]	@ (8002740 <UART_SetConfig+0x2cc>)
 8002504:	429a      	cmp	r2, r3
 8002506:	d005      	beq.n	8002514 <UART_SetConfig+0xa0>
 8002508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	4b8d      	ldr	r3, [pc, #564]	@ (8002744 <UART_SetConfig+0x2d0>)
 8002510:	429a      	cmp	r2, r3
 8002512:	d104      	bne.n	800251e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002514:	f7fe ffae 	bl	8001474 <HAL_RCC_GetPCLK2Freq>
 8002518:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800251c:	e003      	b.n	8002526 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800251e:	f7fe ff95 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8002522:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002530:	f040 810c 	bne.w	800274c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002538:	2200      	movs	r2, #0
 800253a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800253e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002542:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002546:	4622      	mov	r2, r4
 8002548:	462b      	mov	r3, r5
 800254a:	1891      	adds	r1, r2, r2
 800254c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800254e:	415b      	adcs	r3, r3
 8002550:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002552:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002556:	4621      	mov	r1, r4
 8002558:	eb12 0801 	adds.w	r8, r2, r1
 800255c:	4629      	mov	r1, r5
 800255e:	eb43 0901 	adc.w	r9, r3, r1
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800256e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002572:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002576:	4690      	mov	r8, r2
 8002578:	4699      	mov	r9, r3
 800257a:	4623      	mov	r3, r4
 800257c:	eb18 0303 	adds.w	r3, r8, r3
 8002580:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002584:	462b      	mov	r3, r5
 8002586:	eb49 0303 	adc.w	r3, r9, r3
 800258a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800258e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800259a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800259e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80025a2:	460b      	mov	r3, r1
 80025a4:	18db      	adds	r3, r3, r3
 80025a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80025a8:	4613      	mov	r3, r2
 80025aa:	eb42 0303 	adc.w	r3, r2, r3
 80025ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80025b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80025b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80025b8:	f7fd fe82 	bl	80002c0 <__aeabi_uldivmod>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4b61      	ldr	r3, [pc, #388]	@ (8002748 <UART_SetConfig+0x2d4>)
 80025c2:	fba3 2302 	umull	r2, r3, r3, r2
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	011c      	lsls	r4, r3, #4
 80025ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025ce:	2200      	movs	r2, #0
 80025d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80025d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80025dc:	4642      	mov	r2, r8
 80025de:	464b      	mov	r3, r9
 80025e0:	1891      	adds	r1, r2, r2
 80025e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80025e4:	415b      	adcs	r3, r3
 80025e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80025ec:	4641      	mov	r1, r8
 80025ee:	eb12 0a01 	adds.w	sl, r2, r1
 80025f2:	4649      	mov	r1, r9
 80025f4:	eb43 0b01 	adc.w	fp, r3, r1
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002604:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002608:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800260c:	4692      	mov	sl, r2
 800260e:	469b      	mov	fp, r3
 8002610:	4643      	mov	r3, r8
 8002612:	eb1a 0303 	adds.w	r3, sl, r3
 8002616:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800261a:	464b      	mov	r3, r9
 800261c:	eb4b 0303 	adc.w	r3, fp, r3
 8002620:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002630:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002634:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002638:	460b      	mov	r3, r1
 800263a:	18db      	adds	r3, r3, r3
 800263c:	643b      	str	r3, [r7, #64]	@ 0x40
 800263e:	4613      	mov	r3, r2
 8002640:	eb42 0303 	adc.w	r3, r2, r3
 8002644:	647b      	str	r3, [r7, #68]	@ 0x44
 8002646:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800264a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800264e:	f7fd fe37 	bl	80002c0 <__aeabi_uldivmod>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4611      	mov	r1, r2
 8002658:	4b3b      	ldr	r3, [pc, #236]	@ (8002748 <UART_SetConfig+0x2d4>)
 800265a:	fba3 2301 	umull	r2, r3, r3, r1
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	2264      	movs	r2, #100	@ 0x64
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	1acb      	subs	r3, r1, r3
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800266e:	4b36      	ldr	r3, [pc, #216]	@ (8002748 <UART_SetConfig+0x2d4>)
 8002670:	fba3 2302 	umull	r2, r3, r3, r2
 8002674:	095b      	lsrs	r3, r3, #5
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800267c:	441c      	add	r4, r3
 800267e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002682:	2200      	movs	r2, #0
 8002684:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002688:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800268c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002690:	4642      	mov	r2, r8
 8002692:	464b      	mov	r3, r9
 8002694:	1891      	adds	r1, r2, r2
 8002696:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002698:	415b      	adcs	r3, r3
 800269a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800269c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026a0:	4641      	mov	r1, r8
 80026a2:	1851      	adds	r1, r2, r1
 80026a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80026a6:	4649      	mov	r1, r9
 80026a8:	414b      	adcs	r3, r1
 80026aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80026b8:	4659      	mov	r1, fp
 80026ba:	00cb      	lsls	r3, r1, #3
 80026bc:	4651      	mov	r1, sl
 80026be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026c2:	4651      	mov	r1, sl
 80026c4:	00ca      	lsls	r2, r1, #3
 80026c6:	4610      	mov	r0, r2
 80026c8:	4619      	mov	r1, r3
 80026ca:	4603      	mov	r3, r0
 80026cc:	4642      	mov	r2, r8
 80026ce:	189b      	adds	r3, r3, r2
 80026d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80026d4:	464b      	mov	r3, r9
 80026d6:	460a      	mov	r2, r1
 80026d8:	eb42 0303 	adc.w	r3, r2, r3
 80026dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80026ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80026f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80026f4:	460b      	mov	r3, r1
 80026f6:	18db      	adds	r3, r3, r3
 80026f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026fa:	4613      	mov	r3, r2
 80026fc:	eb42 0303 	adc.w	r3, r2, r3
 8002700:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002702:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002706:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800270a:	f7fd fdd9 	bl	80002c0 <__aeabi_uldivmod>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4b0d      	ldr	r3, [pc, #52]	@ (8002748 <UART_SetConfig+0x2d4>)
 8002714:	fba3 1302 	umull	r1, r3, r3, r2
 8002718:	095b      	lsrs	r3, r3, #5
 800271a:	2164      	movs	r1, #100	@ 0x64
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	3332      	adds	r3, #50	@ 0x32
 8002726:	4a08      	ldr	r2, [pc, #32]	@ (8002748 <UART_SetConfig+0x2d4>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	f003 0207 	and.w	r2, r3, #7
 8002732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4422      	add	r2, r4
 800273a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800273c:	e106      	b.n	800294c <UART_SetConfig+0x4d8>
 800273e:	bf00      	nop
 8002740:	40011000 	.word	0x40011000
 8002744:	40011400 	.word	0x40011400
 8002748:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800274c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002750:	2200      	movs	r2, #0
 8002752:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002756:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800275a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800275e:	4642      	mov	r2, r8
 8002760:	464b      	mov	r3, r9
 8002762:	1891      	adds	r1, r2, r2
 8002764:	6239      	str	r1, [r7, #32]
 8002766:	415b      	adcs	r3, r3
 8002768:	627b      	str	r3, [r7, #36]	@ 0x24
 800276a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800276e:	4641      	mov	r1, r8
 8002770:	1854      	adds	r4, r2, r1
 8002772:	4649      	mov	r1, r9
 8002774:	eb43 0501 	adc.w	r5, r3, r1
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	00eb      	lsls	r3, r5, #3
 8002782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002786:	00e2      	lsls	r2, r4, #3
 8002788:	4614      	mov	r4, r2
 800278a:	461d      	mov	r5, r3
 800278c:	4643      	mov	r3, r8
 800278e:	18e3      	adds	r3, r4, r3
 8002790:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002794:	464b      	mov	r3, r9
 8002796:	eb45 0303 	adc.w	r3, r5, r3
 800279a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800279e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80027aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80027ba:	4629      	mov	r1, r5
 80027bc:	008b      	lsls	r3, r1, #2
 80027be:	4621      	mov	r1, r4
 80027c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027c4:	4621      	mov	r1, r4
 80027c6:	008a      	lsls	r2, r1, #2
 80027c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80027cc:	f7fd fd78 	bl	80002c0 <__aeabi_uldivmod>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4b60      	ldr	r3, [pc, #384]	@ (8002958 <UART_SetConfig+0x4e4>)
 80027d6:	fba3 2302 	umull	r2, r3, r3, r2
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	011c      	lsls	r4, r3, #4
 80027de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027e2:	2200      	movs	r2, #0
 80027e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80027e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80027ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80027f0:	4642      	mov	r2, r8
 80027f2:	464b      	mov	r3, r9
 80027f4:	1891      	adds	r1, r2, r2
 80027f6:	61b9      	str	r1, [r7, #24]
 80027f8:	415b      	adcs	r3, r3
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002800:	4641      	mov	r1, r8
 8002802:	1851      	adds	r1, r2, r1
 8002804:	6139      	str	r1, [r7, #16]
 8002806:	4649      	mov	r1, r9
 8002808:	414b      	adcs	r3, r1
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002818:	4659      	mov	r1, fp
 800281a:	00cb      	lsls	r3, r1, #3
 800281c:	4651      	mov	r1, sl
 800281e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002822:	4651      	mov	r1, sl
 8002824:	00ca      	lsls	r2, r1, #3
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	4603      	mov	r3, r0
 800282c:	4642      	mov	r2, r8
 800282e:	189b      	adds	r3, r3, r2
 8002830:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002834:	464b      	mov	r3, r9
 8002836:	460a      	mov	r2, r1
 8002838:	eb42 0303 	adc.w	r3, r2, r3
 800283c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	67bb      	str	r3, [r7, #120]	@ 0x78
 800284a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002858:	4649      	mov	r1, r9
 800285a:	008b      	lsls	r3, r1, #2
 800285c:	4641      	mov	r1, r8
 800285e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002862:	4641      	mov	r1, r8
 8002864:	008a      	lsls	r2, r1, #2
 8002866:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800286a:	f7fd fd29 	bl	80002c0 <__aeabi_uldivmod>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4611      	mov	r1, r2
 8002874:	4b38      	ldr	r3, [pc, #224]	@ (8002958 <UART_SetConfig+0x4e4>)
 8002876:	fba3 2301 	umull	r2, r3, r3, r1
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	2264      	movs	r2, #100	@ 0x64
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	1acb      	subs	r3, r1, r3
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	3332      	adds	r3, #50	@ 0x32
 8002888:	4a33      	ldr	r2, [pc, #204]	@ (8002958 <UART_SetConfig+0x4e4>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002894:	441c      	add	r4, r3
 8002896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800289a:	2200      	movs	r2, #0
 800289c:	673b      	str	r3, [r7, #112]	@ 0x70
 800289e:	677a      	str	r2, [r7, #116]	@ 0x74
 80028a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80028a4:	4642      	mov	r2, r8
 80028a6:	464b      	mov	r3, r9
 80028a8:	1891      	adds	r1, r2, r2
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	415b      	adcs	r3, r3
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028b4:	4641      	mov	r1, r8
 80028b6:	1851      	adds	r1, r2, r1
 80028b8:	6039      	str	r1, [r7, #0]
 80028ba:	4649      	mov	r1, r9
 80028bc:	414b      	adcs	r3, r1
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028cc:	4659      	mov	r1, fp
 80028ce:	00cb      	lsls	r3, r1, #3
 80028d0:	4651      	mov	r1, sl
 80028d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028d6:	4651      	mov	r1, sl
 80028d8:	00ca      	lsls	r2, r1, #3
 80028da:	4610      	mov	r0, r2
 80028dc:	4619      	mov	r1, r3
 80028de:	4603      	mov	r3, r0
 80028e0:	4642      	mov	r2, r8
 80028e2:	189b      	adds	r3, r3, r2
 80028e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028e6:	464b      	mov	r3, r9
 80028e8:	460a      	mov	r2, r1
 80028ea:	eb42 0303 	adc.w	r3, r2, r3
 80028ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80028fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002908:	4649      	mov	r1, r9
 800290a:	008b      	lsls	r3, r1, #2
 800290c:	4641      	mov	r1, r8
 800290e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002912:	4641      	mov	r1, r8
 8002914:	008a      	lsls	r2, r1, #2
 8002916:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800291a:	f7fd fcd1 	bl	80002c0 <__aeabi_uldivmod>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4b0d      	ldr	r3, [pc, #52]	@ (8002958 <UART_SetConfig+0x4e4>)
 8002924:	fba3 1302 	umull	r1, r3, r3, r2
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	2164      	movs	r1, #100	@ 0x64
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	3332      	adds	r3, #50	@ 0x32
 8002936:	4a08      	ldr	r2, [pc, #32]	@ (8002958 <UART_SetConfig+0x4e4>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	f003 020f 	and.w	r2, r3, #15
 8002942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4422      	add	r2, r4
 800294a:	609a      	str	r2, [r3, #8]
}
 800294c:	bf00      	nop
 800294e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002952:	46bd      	mov	sp, r7
 8002954:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002958:	51eb851f 	.word	0x51eb851f

0800295c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800296a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800296e:	2b84      	cmp	r3, #132	@ 0x84
 8002970:	d005      	beq.n	800297e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002972:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4413      	add	r3, r2
 800297a:	3303      	adds	r3, #3
 800297c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800297e:	68fb      	ldr	r3, [r7, #12]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002992:	f3ef 8305 	mrs	r3, IPSR
 8002996:	607b      	str	r3, [r7, #4]
  return(result);
 8002998:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800299a:	2b00      	cmp	r3, #0
 800299c:	bf14      	ite	ne
 800299e:	2301      	movne	r3, #1
 80029a0:	2300      	moveq	r3, #0
 80029a2:	b2db      	uxtb	r3, r3
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80029b4:	f001 f942 	bl	8003c3c <vTaskStartScheduler>
  
  return osOK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	bd80      	pop	{r7, pc}

080029be <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80029be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029c0:	b089      	sub	sp, #36	@ 0x24
 80029c2:	af04      	add	r7, sp, #16
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d020      	beq.n	8002a12 <osThreadCreate+0x54>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01c      	beq.n	8002a12 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685c      	ldr	r4, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691e      	ldr	r6, [r3, #16]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff ffb6 	bl	800295c <makeFreeRtosPriority>
 80029f0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029fa:	9202      	str	r2, [sp, #8]
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	9100      	str	r1, [sp, #0]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4632      	mov	r2, r6
 8002a04:	4629      	mov	r1, r5
 8002a06:	4620      	mov	r0, r4
 8002a08:	f000 ff32 	bl	8003870 <xTaskCreateStatic>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	e01c      	b.n	8002a4c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685c      	ldr	r4, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a1e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff ff98 	bl	800295c <makeFreeRtosPriority>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	f107 030c 	add.w	r3, r7, #12
 8002a32:	9301      	str	r3, [sp, #4]
 8002a34:	9200      	str	r2, [sp, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	4632      	mov	r2, r6
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f000 ff77 	bl	8003930 <xTaskCreate>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d001      	beq.n	8002a4c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e000      	b.n	8002a4e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a56 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <osDelay+0x16>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	e000      	b.n	8002a6e <osDelay+0x18>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f001 f8ae 	bl	8003bd0 <vTaskDelay>
  
  return osOK;
 8002a74:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af02      	add	r7, sp, #8
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00f      	beq.n	8002ab0 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d10a      	bne.n	8002aac <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	9200      	str	r2, [sp, #0]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	2001      	movs	r0, #1
 8002aa4:	f000 f9c0 	bl	8002e28 <xQueueGenericCreateStatic>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	e016      	b.n	8002ada <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e014      	b.n	8002ada <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d110      	bne.n	8002ad8 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	2100      	movs	r1, #0
 8002aba:	2001      	movs	r0, #1
 8002abc:	f000 fa31 	bl	8002f22 <xQueueGenericCreate>
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <osSemaphoreCreate+0x56>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	2200      	movs	r2, #0
 8002acc:	2100      	movs	r1, #0
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fa82 	bl	8002fd8 <xQueueGenericSend>
      return sema;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	e000      	b.n	8002ada <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002ad8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002af8:	2380      	movs	r3, #128	@ 0x80
 8002afa:	e03a      	b.n	8002b72 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b06:	d103      	bne.n	8002b10 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002b08:	f04f 33ff 	mov.w	r3, #4294967295
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	e009      	b.n	8002b24 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d006      	beq.n	8002b24 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <osSemaphoreWait+0x40>
      ticks = 1;
 8002b20:	2301      	movs	r3, #1
 8002b22:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002b24:	f7ff ff32 	bl	800298c <inHandlerMode>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d017      	beq.n	8002b5e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002b2e:	f107 0308 	add.w	r3, r7, #8
 8002b32:	461a      	mov	r2, r3
 8002b34:	2100      	movs	r1, #0
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fcf0 	bl	800351c <xQueueReceiveFromISR>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d001      	beq.n	8002b46 <osSemaphoreWait+0x62>
      return osErrorOS;
 8002b42:	23ff      	movs	r3, #255	@ 0xff
 8002b44:	e015      	b.n	8002b72 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d011      	beq.n	8002b70 <osSemaphoreWait+0x8c>
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <osSemaphoreWait+0x98>)
 8002b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	e008      	b.n	8002b70 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002b5e:	68f9      	ldr	r1, [r7, #12]
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fbcb 	bl	80032fc <xQueueSemaphoreTake>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d001      	beq.n	8002b70 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002b6c:	23ff      	movs	r3, #255	@ 0xff
 8002b6e:	e000      	b.n	8002b72 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	e000ed04 	.word	0xe000ed04

08002b80 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002b90:	f7ff fefc 	bl	800298c <inHandlerMode>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d016      	beq.n	8002bc8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002b9a:	f107 0308 	add.w	r3, r7, #8
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 fb1b 	bl	80031dc <xQueueGiveFromISR>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d001      	beq.n	8002bb0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002bac:	23ff      	movs	r3, #255	@ 0xff
 8002bae:	e017      	b.n	8002be0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d013      	beq.n	8002bde <osSemaphoreRelease+0x5e>
 8002bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002be8 <osSemaphoreRelease+0x68>)
 8002bb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	e00a      	b.n	8002bde <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002bc8:	2300      	movs	r3, #0
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2100      	movs	r1, #0
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fa02 	bl	8002fd8 <xQueueGenericSend>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d001      	beq.n	8002bde <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002bda:	23ff      	movs	r3, #255	@ 0xff
 8002bdc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002bde:	68fb      	ldr	r3, [r7, #12]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	e000ed04 	.word	0xe000ed04

08002bec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f103 0208 	add.w	r2, r3, #8
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f04f 32ff 	mov.w	r2, #4294967295
 8002c04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f103 0208 	add.w	r2, r3, #8
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f103 0208 	add.w	r2, r3, #8
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c46:	b480      	push	{r7}
 8002c48:	b085      	sub	sp, #20
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	601a      	str	r2, [r3, #0]
}
 8002c82:	bf00      	nop
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b085      	sub	sp, #20
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca4:	d103      	bne.n	8002cae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	e00c      	b.n	8002cc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3308      	adds	r3, #8
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	e002      	b.n	8002cbc <vListInsert+0x2e>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d2f6      	bcs.n	8002cb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	601a      	str	r2, [r3, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6892      	ldr	r2, [r2, #8]
 8002d16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6852      	ldr	r2, [r2, #4]
 8002d20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d103      	bne.n	8002d34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	1e5a      	subs	r2, r3, #1
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10b      	bne.n	8002d80 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d7a:	bf00      	nop
 8002d7c:	bf00      	nop
 8002d7e:	e7fd      	b.n	8002d7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d80:	f001 fee2 	bl	8004b48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8c:	68f9      	ldr	r1, [r7, #12]
 8002d8e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	441a      	add	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db0:	3b01      	subs	r3, #1
 8002db2:	68f9      	ldr	r1, [r7, #12]
 8002db4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002db6:	fb01 f303 	mul.w	r3, r1, r3
 8002dba:	441a      	add	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	22ff      	movs	r2, #255	@ 0xff
 8002dc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	22ff      	movs	r2, #255	@ 0xff
 8002dcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d114      	bne.n	8002e00 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d01a      	beq.n	8002e14 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	3310      	adds	r3, #16
 8002de2:	4618      	mov	r0, r3
 8002de4:	f001 f994 	bl	8004110 <xTaskRemoveFromEventList>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d012      	beq.n	8002e14 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002dee:	4b0d      	ldr	r3, [pc, #52]	@ (8002e24 <xQueueGenericReset+0xd0>)
 8002df0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	f3bf 8f6f 	isb	sy
 8002dfe:	e009      	b.n	8002e14 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	3310      	adds	r3, #16
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fef1 	bl	8002bec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	3324      	adds	r3, #36	@ 0x24
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff feec 	bl	8002bec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e14:	f001 feca 	bl	8004bac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e18:	2301      	movs	r3, #1
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	e000ed04 	.word	0xe000ed04

08002e28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08e      	sub	sp, #56	@ 0x38
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10b      	bne.n	8002e54 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e4e:	bf00      	nop
 8002e50:	bf00      	nop
 8002e52:	e7fd      	b.n	8002e50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10b      	bne.n	8002e72 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	e7fd      	b.n	8002e6e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <xQueueGenericCreateStatic+0x56>
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <xQueueGenericCreateStatic+0x5a>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <xQueueGenericCreateStatic+0x5c>
 8002e82:	2300      	movs	r3, #0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10b      	bne.n	8002ea0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e8c:	f383 8811 	msr	BASEPRI, r3
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	623b      	str	r3, [r7, #32]
}
 8002e9a:	bf00      	nop
 8002e9c:	bf00      	nop
 8002e9e:	e7fd      	b.n	8002e9c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d102      	bne.n	8002eac <xQueueGenericCreateStatic+0x84>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <xQueueGenericCreateStatic+0x88>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <xQueueGenericCreateStatic+0x8a>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10b      	bne.n	8002ece <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f3bf 8f4f 	dsb	sy
 8002ec6:	61fb      	str	r3, [r7, #28]
}
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	e7fd      	b.n	8002eca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ece:	2348      	movs	r3, #72	@ 0x48
 8002ed0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b48      	cmp	r3, #72	@ 0x48
 8002ed6:	d00b      	beq.n	8002ef0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002edc:	f383 8811 	msr	BASEPRI, r3
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	61bb      	str	r3, [r7, #24]
}
 8002eea:	bf00      	nop
 8002eec:	bf00      	nop
 8002eee:	e7fd      	b.n	8002eec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ef0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00d      	beq.n	8002f18 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f04:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f840 	bl	8002f98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3730      	adds	r7, #48	@ 0x30
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b08a      	sub	sp, #40	@ 0x28
 8002f26:	af02      	add	r7, sp, #8
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10b      	bne.n	8002f4e <xQueueGenericCreate+0x2c>
	__asm volatile
 8002f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	613b      	str	r3, [r7, #16]
}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop
 8002f4c:	e7fd      	b.n	8002f4a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	fb02 f303 	mul.w	r3, r2, r3
 8002f56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	3348      	adds	r3, #72	@ 0x48
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f001 ff15 	bl	8004d8c <pvPortMalloc>
 8002f62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d011      	beq.n	8002f8e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	3348      	adds	r3, #72	@ 0x48
 8002f72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f7c:	79fa      	ldrb	r2, [r7, #7]
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	4613      	mov	r3, r2
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 f805 	bl	8002f98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f8e:	69bb      	ldr	r3, [r7, #24]
	}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3720      	adds	r7, #32
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d103      	bne.n	8002fb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e002      	b.n	8002fba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	69b8      	ldr	r0, [r7, #24]
 8002fca:	f7ff fec3 	bl	8002d54 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08e      	sub	sp, #56	@ 0x38
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10b      	bne.n	800300c <xQueueGenericSend+0x34>
	__asm volatile
 8002ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003006:	bf00      	nop
 8003008:	bf00      	nop
 800300a:	e7fd      	b.n	8003008 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d103      	bne.n	800301a <xQueueGenericSend+0x42>
 8003012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <xQueueGenericSend+0x46>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <xQueueGenericSend+0x48>
 800301e:	2300      	movs	r3, #0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10b      	bne.n	800303c <xQueueGenericSend+0x64>
	__asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003036:	bf00      	nop
 8003038:	bf00      	nop
 800303a:	e7fd      	b.n	8003038 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d103      	bne.n	800304a <xQueueGenericSend+0x72>
 8003042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <xQueueGenericSend+0x76>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <xQueueGenericSend+0x78>
 800304e:	2300      	movs	r3, #0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10b      	bne.n	800306c <xQueueGenericSend+0x94>
	__asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	623b      	str	r3, [r7, #32]
}
 8003066:	bf00      	nop
 8003068:	bf00      	nop
 800306a:	e7fd      	b.n	8003068 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800306c:	f001 fa16 	bl	800449c <xTaskGetSchedulerState>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d102      	bne.n	800307c <xQueueGenericSend+0xa4>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <xQueueGenericSend+0xa8>
 800307c:	2301      	movs	r3, #1
 800307e:	e000      	b.n	8003082 <xQueueGenericSend+0xaa>
 8003080:	2300      	movs	r3, #0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10b      	bne.n	800309e <xQueueGenericSend+0xc6>
	__asm volatile
 8003086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	61fb      	str	r3, [r7, #28]
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	e7fd      	b.n	800309a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800309e:	f001 fd53 	bl	8004b48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d302      	bcc.n	80030b4 <xQueueGenericSend+0xdc>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d129      	bne.n	8003108 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	68b9      	ldr	r1, [r7, #8]
 80030b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030ba:	f000 fac9 	bl	8003650 <prvCopyDataToQueue>
 80030be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d010      	beq.n	80030ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ca:	3324      	adds	r3, #36	@ 0x24
 80030cc:	4618      	mov	r0, r3
 80030ce:	f001 f81f 	bl	8004110 <xTaskRemoveFromEventList>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d013      	beq.n	8003100 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030d8:	4b3f      	ldr	r3, [pc, #252]	@ (80031d8 <xQueueGenericSend+0x200>)
 80030da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	e00a      	b.n	8003100 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030f0:	4b39      	ldr	r3, [pc, #228]	@ (80031d8 <xQueueGenericSend+0x200>)
 80030f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003100:	f001 fd54 	bl	8004bac <vPortExitCritical>
				return pdPASS;
 8003104:	2301      	movs	r3, #1
 8003106:	e063      	b.n	80031d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d103      	bne.n	8003116 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800310e:	f001 fd4d 	bl	8004bac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003112:	2300      	movs	r3, #0
 8003114:	e05c      	b.n	80031d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003118:	2b00      	cmp	r3, #0
 800311a:	d106      	bne.n	800312a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	4618      	mov	r0, r3
 8003122:	f001 f859 	bl	80041d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003126:	2301      	movs	r3, #1
 8003128:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800312a:	f001 fd3f 	bl	8004bac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800312e:	f000 fdef 	bl	8003d10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003132:	f001 fd09 	bl	8004b48 <vPortEnterCritical>
 8003136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003138:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800313c:	b25b      	sxtb	r3, r3
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	d103      	bne.n	800314c <xQueueGenericSend+0x174>
 8003144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800314c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003152:	b25b      	sxtb	r3, r3
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003158:	d103      	bne.n	8003162 <xQueueGenericSend+0x18a>
 800315a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003162:	f001 fd23 	bl	8004bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003166:	1d3a      	adds	r2, r7, #4
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f001 f848 	bl	8004204 <xTaskCheckForTimeOut>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d124      	bne.n	80031c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800317a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800317c:	f000 fb60 	bl	8003840 <prvIsQueueFull>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d018      	beq.n	80031b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003188:	3310      	adds	r3, #16
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	4611      	mov	r1, r2
 800318e:	4618      	mov	r0, r3
 8003190:	f000 ff98 	bl	80040c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003194:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003196:	f000 faeb 	bl	8003770 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800319a:	f000 fdc7 	bl	8003d2c <xTaskResumeAll>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f47f af7c 	bne.w	800309e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80031a6:	4b0c      	ldr	r3, [pc, #48]	@ (80031d8 <xQueueGenericSend+0x200>)
 80031a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	e772      	b.n	800309e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031ba:	f000 fad9 	bl	8003770 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031be:	f000 fdb5 	bl	8003d2c <xTaskResumeAll>
 80031c2:	e76c      	b.n	800309e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031c6:	f000 fad3 	bl	8003770 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031ca:	f000 fdaf 	bl	8003d2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3738      	adds	r7, #56	@ 0x38
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	e000ed04 	.word	0xe000ed04

080031dc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08e      	sub	sp, #56	@ 0x38
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80031ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10b      	bne.n	8003208 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80031f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	623b      	str	r3, [r7, #32]
}
 8003202:	bf00      	nop
 8003204:	bf00      	nop
 8003206:	e7fd      	b.n	8003204 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00b      	beq.n	8003228 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8003210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003214:	f383 8811 	msr	BASEPRI, r3
 8003218:	f3bf 8f6f 	isb	sy
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	61fb      	str	r3, [r7, #28]
}
 8003222:	bf00      	nop
 8003224:	bf00      	nop
 8003226:	e7fd      	b.n	8003224 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d103      	bne.n	8003238 <xQueueGiveFromISR+0x5c>
 8003230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <xQueueGiveFromISR+0x60>
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <xQueueGiveFromISR+0x62>
 800323c:	2300      	movs	r3, #0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10b      	bne.n	800325a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	61bb      	str	r3, [r7, #24]
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	e7fd      	b.n	8003256 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800325a:	f001 fd55 	bl	8004d08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800325e:	f3ef 8211 	mrs	r2, BASEPRI
 8003262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003266:	f383 8811 	msr	BASEPRI, r3
 800326a:	f3bf 8f6f 	isb	sy
 800326e:	f3bf 8f4f 	dsb	sy
 8003272:	617a      	str	r2, [r7, #20]
 8003274:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003276:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003278:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800327a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800327e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003284:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003286:	429a      	cmp	r2, r3
 8003288:	d22b      	bcs.n	80032e2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800328a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003290:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800329c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a4:	d112      	bne.n	80032cc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d016      	beq.n	80032dc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b0:	3324      	adds	r3, #36	@ 0x24
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 ff2c 	bl	8004110 <xTaskRemoveFromEventList>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00e      	beq.n	80032dc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00b      	beq.n	80032dc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2201      	movs	r2, #1
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	e007      	b.n	80032dc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032d0:	3301      	adds	r3, #1
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	b25a      	sxtb	r2, r3
 80032d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80032dc:	2301      	movs	r3, #1
 80032de:	637b      	str	r3, [r7, #52]	@ 0x34
 80032e0:	e001      	b.n	80032e6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80032e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80032f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3738      	adds	r7, #56	@ 0x38
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08e      	sub	sp, #56	@ 0x38
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003306:	2300      	movs	r3, #0
 8003308:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800330e:	2300      	movs	r3, #0
 8003310:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10b      	bne.n	8003330 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331c:	f383 8811 	msr	BASEPRI, r3
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	f3bf 8f4f 	dsb	sy
 8003328:	623b      	str	r3, [r7, #32]
}
 800332a:	bf00      	nop
 800332c:	bf00      	nop
 800332e:	e7fd      	b.n	800332c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00b      	beq.n	8003350 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	61fb      	str	r3, [r7, #28]
}
 800334a:	bf00      	nop
 800334c:	bf00      	nop
 800334e:	e7fd      	b.n	800334c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003350:	f001 f8a4 	bl	800449c <xTaskGetSchedulerState>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d102      	bne.n	8003360 <xQueueSemaphoreTake+0x64>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <xQueueSemaphoreTake+0x68>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <xQueueSemaphoreTake+0x6a>
 8003364:	2300      	movs	r3, #0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10b      	bne.n	8003382 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800336a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800336e:	f383 8811 	msr	BASEPRI, r3
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	61bb      	str	r3, [r7, #24]
}
 800337c:	bf00      	nop
 800337e:	bf00      	nop
 8003380:	e7fd      	b.n	800337e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003382:	f001 fbe1 	bl	8004b48 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800338c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800338e:	2b00      	cmp	r3, #0
 8003390:	d024      	beq.n	80033dc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003394:	1e5a      	subs	r2, r3, #1
 8003396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003398:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800339a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d104      	bne.n	80033ac <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80033a2:	f001 fa27 	bl	80047f4 <pvTaskIncrementMutexHeldCount>
 80033a6:	4602      	mov	r2, r0
 80033a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033aa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00f      	beq.n	80033d4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b6:	3310      	adds	r3, #16
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fea9 	bl	8004110 <xTaskRemoveFromEventList>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d007      	beq.n	80033d4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033c4:	4b54      	ldr	r3, [pc, #336]	@ (8003518 <xQueueSemaphoreTake+0x21c>)
 80033c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033d4:	f001 fbea 	bl	8004bac <vPortExitCritical>
				return pdPASS;
 80033d8:	2301      	movs	r3, #1
 80033da:	e098      	b.n	800350e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d112      	bne.n	8003408 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80033e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00b      	beq.n	8003400 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80033e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	617b      	str	r3, [r7, #20]
}
 80033fa:	bf00      	nop
 80033fc:	bf00      	nop
 80033fe:	e7fd      	b.n	80033fc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003400:	f001 fbd4 	bl	8004bac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003404:	2300      	movs	r3, #0
 8003406:	e082      	b.n	800350e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800340e:	f107 030c 	add.w	r3, r7, #12
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fee0 	bl	80041d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003418:	2301      	movs	r3, #1
 800341a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800341c:	f001 fbc6 	bl	8004bac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003420:	f000 fc76 	bl	8003d10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003424:	f001 fb90 	bl	8004b48 <vPortEnterCritical>
 8003428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800342a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800342e:	b25b      	sxtb	r3, r3
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d103      	bne.n	800343e <xQueueSemaphoreTake+0x142>
 8003436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800343e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003440:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003444:	b25b      	sxtb	r3, r3
 8003446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344a:	d103      	bne.n	8003454 <xQueueSemaphoreTake+0x158>
 800344c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003454:	f001 fbaa 	bl	8004bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003458:	463a      	mov	r2, r7
 800345a:	f107 030c 	add.w	r3, r7, #12
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fecf 	bl	8004204 <xTaskCheckForTimeOut>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d132      	bne.n	80034d2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800346c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800346e:	f000 f9d1 	bl	8003814 <prvIsQueueEmpty>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d026      	beq.n	80034c6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d109      	bne.n	8003494 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003480:	f001 fb62 	bl	8004b48 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	4618      	mov	r0, r3
 800348a:	f001 f825 	bl	80044d8 <xTaskPriorityInherit>
 800348e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003490:	f001 fb8c 	bl	8004bac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003496:	3324      	adds	r3, #36	@ 0x24
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	4611      	mov	r1, r2
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fe11 	bl	80040c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034a4:	f000 f964 	bl	8003770 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034a8:	f000 fc40 	bl	8003d2c <xTaskResumeAll>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f47f af67 	bne.w	8003382 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80034b4:	4b18      	ldr	r3, [pc, #96]	@ (8003518 <xQueueSemaphoreTake+0x21c>)
 80034b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	e75d      	b.n	8003382 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80034c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034c8:	f000 f952 	bl	8003770 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034cc:	f000 fc2e 	bl	8003d2c <xTaskResumeAll>
 80034d0:	e757      	b.n	8003382 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80034d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034d4:	f000 f94c 	bl	8003770 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034d8:	f000 fc28 	bl	8003d2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034de:	f000 f999 	bl	8003814 <prvIsQueueEmpty>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f43f af4c 	beq.w	8003382 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80034ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00d      	beq.n	800350c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80034f0:	f001 fb2a 	bl	8004b48 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80034f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034f6:	f000 f893 	bl	8003620 <prvGetDisinheritPriorityAfterTimeout>
 80034fa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80034fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003502:	4618      	mov	r0, r3
 8003504:	f001 f8e6 	bl	80046d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003508:	f001 fb50 	bl	8004bac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800350c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800350e:	4618      	mov	r0, r3
 8003510:	3738      	adds	r7, #56	@ 0x38
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	e000ed04 	.word	0xe000ed04

0800351c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08e      	sub	sp, #56	@ 0x38
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800352c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10b      	bne.n	800354a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	623b      	str	r3, [r7, #32]
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop
 8003548:	e7fd      	b.n	8003546 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d103      	bne.n	8003558 <xQueueReceiveFromISR+0x3c>
 8003550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <xQueueReceiveFromISR+0x40>
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <xQueueReceiveFromISR+0x42>
 800355c:	2300      	movs	r3, #0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10b      	bne.n	800357a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003566:	f383 8811 	msr	BASEPRI, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	61fb      	str	r3, [r7, #28]
}
 8003574:	bf00      	nop
 8003576:	bf00      	nop
 8003578:	e7fd      	b.n	8003576 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800357a:	f001 fbc5 	bl	8004d08 <vPortValidateInterruptPriority>
	__asm volatile
 800357e:	f3ef 8211 	mrs	r2, BASEPRI
 8003582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003586:	f383 8811 	msr	BASEPRI, r3
 800358a:	f3bf 8f6f 	isb	sy
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	61ba      	str	r2, [r7, #24]
 8003594:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003596:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003598:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800359a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d02f      	beq.n	8003606 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80035a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035b4:	f000 f8b6 	bl	8003724 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ba:	1e5a      	subs	r2, r3, #1
 80035bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035be:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80035c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d112      	bne.n	80035f0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d016      	beq.n	8003600 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d4:	3310      	adds	r3, #16
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fd9a 	bl	8004110 <xTaskRemoveFromEventList>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00e      	beq.n	8003600 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00b      	beq.n	8003600 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	e007      	b.n	8003600 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80035f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035f4:	3301      	adds	r3, #1
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	b25a      	sxtb	r2, r3
 80035fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003600:	2301      	movs	r3, #1
 8003602:	637b      	str	r3, [r7, #52]	@ 0x34
 8003604:	e001      	b.n	800360a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003606:	2300      	movs	r3, #0
 8003608:	637b      	str	r3, [r7, #52]	@ 0x34
 800360a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800360c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f383 8811 	msr	BASEPRI, r3
}
 8003614:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003618:	4618      	mov	r0, r3
 800361a:	3738      	adds	r7, #56	@ 0x38
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362c:	2b00      	cmp	r3, #0
 800362e:	d006      	beq.n	800363e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f1c3 0307 	rsb	r3, r3, #7
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	e001      	b.n	8003642 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003642:	68fb      	ldr	r3, [r7, #12]
	}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003664:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10d      	bne.n	800368a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d14d      	bne.n	8003712 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 ffa2 	bl	80045c4 <xTaskPriorityDisinherit>
 8003680:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	e043      	b.n	8003712 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d119      	bne.n	80036c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6858      	ldr	r0, [r3, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003698:	461a      	mov	r2, r3
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	f002 fd63 	bl	8006166 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a8:	441a      	add	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d32b      	bcc.n	8003712 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	e026      	b.n	8003712 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68d8      	ldr	r0, [r3, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036cc:	461a      	mov	r2, r3
 80036ce:	68b9      	ldr	r1, [r7, #8]
 80036d0:	f002 fd49 	bl	8006166 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036dc:	425b      	negs	r3, r3
 80036de:	441a      	add	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d207      	bcs.n	8003700 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f8:	425b      	negs	r3, r3
 80036fa:	441a      	add	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d105      	bne.n	8003712 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	3b01      	subs	r3, #1
 8003710:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800371a:	697b      	ldr	r3, [r7, #20]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d018      	beq.n	8003768 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	441a      	add	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	429a      	cmp	r2, r3
 800374e:	d303      	bcc.n	8003758 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68d9      	ldr	r1, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003760:	461a      	mov	r2, r3
 8003762:	6838      	ldr	r0, [r7, #0]
 8003764:	f002 fcff 	bl	8006166 <memcpy>
	}
}
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003778:	f001 f9e6 	bl	8004b48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003782:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003784:	e011      	b.n	80037aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	2b00      	cmp	r3, #0
 800378c:	d012      	beq.n	80037b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3324      	adds	r3, #36	@ 0x24
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fcbc 	bl	8004110 <xTaskRemoveFromEventList>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800379e:	f000 fd95 	bl	80042cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	dce9      	bgt.n	8003786 <prvUnlockQueue+0x16>
 80037b2:	e000      	b.n	80037b6 <prvUnlockQueue+0x46>
					break;
 80037b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	22ff      	movs	r2, #255	@ 0xff
 80037ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80037be:	f001 f9f5 	bl	8004bac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037c2:	f001 f9c1 	bl	8004b48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037ce:	e011      	b.n	80037f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d012      	beq.n	80037fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3310      	adds	r3, #16
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fc97 	bl	8004110 <xTaskRemoveFromEventList>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037e8:	f000 fd70 	bl	80042cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037ec:	7bbb      	ldrb	r3, [r7, #14]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	dce9      	bgt.n	80037d0 <prvUnlockQueue+0x60>
 80037fc:	e000      	b.n	8003800 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	22ff      	movs	r2, #255	@ 0xff
 8003804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003808:	f001 f9d0 	bl	8004bac <vPortExitCritical>
}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800381c:	f001 f994 	bl	8004b48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003828:	2301      	movs	r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e001      	b.n	8003832 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003832:	f001 f9bb 	bl	8004bac <vPortExitCritical>

	return xReturn;
 8003836:	68fb      	ldr	r3, [r7, #12]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003848:	f001 f97e 	bl	8004b48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003854:	429a      	cmp	r2, r3
 8003856:	d102      	bne.n	800385e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003858:	2301      	movs	r3, #1
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	e001      	b.n	8003862 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003862:	f001 f9a3 	bl	8004bac <vPortExitCritical>

	return xReturn;
 8003866:	68fb      	ldr	r3, [r7, #12]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08e      	sub	sp, #56	@ 0x38
 8003874:	af04      	add	r7, sp, #16
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800387e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10b      	bne.n	800389c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	623b      	str	r3, [r7, #32]
}
 8003896:	bf00      	nop
 8003898:	bf00      	nop
 800389a:	e7fd      	b.n	8003898 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800389c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10b      	bne.n	80038ba <xTaskCreateStatic+0x4a>
	__asm volatile
 80038a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	61fb      	str	r3, [r7, #28]
}
 80038b4:	bf00      	nop
 80038b6:	bf00      	nop
 80038b8:	e7fd      	b.n	80038b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80038ba:	23a0      	movs	r3, #160	@ 0xa0
 80038bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2ba0      	cmp	r3, #160	@ 0xa0
 80038c2:	d00b      	beq.n	80038dc <xTaskCreateStatic+0x6c>
	__asm volatile
 80038c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	61bb      	str	r3, [r7, #24]
}
 80038d6:	bf00      	nop
 80038d8:	bf00      	nop
 80038da:	e7fd      	b.n	80038d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80038dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80038de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01e      	beq.n	8003922 <xTaskCreateStatic+0xb2>
 80038e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d01b      	beq.n	8003922 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038fc:	2300      	movs	r3, #0
 80038fe:	9303      	str	r3, [sp, #12]
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	9302      	str	r3, [sp, #8]
 8003904:	f107 0314 	add.w	r3, r7, #20
 8003908:	9301      	str	r3, [sp, #4]
 800390a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	68b9      	ldr	r1, [r7, #8]
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 f851 	bl	80039bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800391a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800391c:	f000 f8ee 	bl	8003afc <prvAddNewTaskToReadyList>
 8003920:	e001      	b.n	8003926 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003926:	697b      	ldr	r3, [r7, #20]
	}
 8003928:	4618      	mov	r0, r3
 800392a:	3728      	adds	r7, #40	@ 0x28
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08c      	sub	sp, #48	@ 0x30
 8003934:	af04      	add	r7, sp, #16
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003940:	88fb      	ldrh	r3, [r7, #6]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4618      	mov	r0, r3
 8003946:	f001 fa21 	bl	8004d8c <pvPortMalloc>
 800394a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00e      	beq.n	8003970 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003952:	20a0      	movs	r0, #160	@ 0xa0
 8003954:	f001 fa1a 	bl	8004d8c <pvPortMalloc>
 8003958:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	631a      	str	r2, [r3, #48]	@ 0x30
 8003966:	e005      	b.n	8003974 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003968:	6978      	ldr	r0, [r7, #20]
 800396a:	f001 fadd 	bl	8004f28 <vPortFree>
 800396e:	e001      	b.n	8003974 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d017      	beq.n	80039aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003982:	88fa      	ldrh	r2, [r7, #6]
 8003984:	2300      	movs	r3, #0
 8003986:	9303      	str	r3, [sp, #12]
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	9302      	str	r3, [sp, #8]
 800398c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800398e:	9301      	str	r3, [sp, #4]
 8003990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f80f 	bl	80039bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800399e:	69f8      	ldr	r0, [r7, #28]
 80039a0:	f000 f8ac 	bl	8003afc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80039a4:	2301      	movs	r3, #1
 80039a6:	61bb      	str	r3, [r7, #24]
 80039a8:	e002      	b.n	80039b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039aa:	f04f 33ff 	mov.w	r3, #4294967295
 80039ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039b0:	69bb      	ldr	r3, [r7, #24]
	}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3720      	adds	r7, #32
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80039ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039d4:	3b01      	subs	r3, #1
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f023 0307 	bic.w	r3, r3, #7
 80039e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	617b      	str	r3, [r7, #20]
}
 8003a00:	bf00      	nop
 8003a02:	bf00      	nop
 8003a04:	e7fd      	b.n	8003a02 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01f      	beq.n	8003a4c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61fb      	str	r3, [r7, #28]
 8003a10:	e012      	b.n	8003a38 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	4413      	add	r3, r2
 8003a18:	7819      	ldrb	r1, [r3, #0]
 8003a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	4413      	add	r3, r2
 8003a20:	3334      	adds	r3, #52	@ 0x34
 8003a22:	460a      	mov	r2, r1
 8003a24:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d006      	beq.n	8003a40 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	3301      	adds	r3, #1
 8003a36:	61fb      	str	r3, [r7, #28]
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2b0f      	cmp	r3, #15
 8003a3c:	d9e9      	bls.n	8003a12 <prvInitialiseNewTask+0x56>
 8003a3e:	e000      	b.n	8003a42 <prvInitialiseNewTask+0x86>
			{
				break;
 8003a40:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a4a:	e003      	b.n	8003a54 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a56:	2b06      	cmp	r3, #6
 8003a58:	d901      	bls.n	8003a5e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a5a:	2306      	movs	r3, #6
 8003a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a62:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a68:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a72:	3304      	adds	r3, #4
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff f8d9 	bl	8002c2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7c:	3318      	adds	r3, #24
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff f8d4 	bl	8002c2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8c:	f1c3 0207 	rsb	r2, r3, #7
 8003a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a98:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aac:	334c      	adds	r3, #76	@ 0x4c
 8003aae:	224c      	movs	r2, #76	@ 0x4c
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f002 fa7e 	bl	8005fb4 <memset>
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aba:	4a0d      	ldr	r2, [pc, #52]	@ (8003af0 <prvInitialiseNewTask+0x134>)
 8003abc:	651a      	str	r2, [r3, #80]	@ 0x50
 8003abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac0:	4a0c      	ldr	r2, [pc, #48]	@ (8003af4 <prvInitialiseNewTask+0x138>)
 8003ac2:	655a      	str	r2, [r3, #84]	@ 0x54
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8003af8 <prvInitialiseNewTask+0x13c>)
 8003ac8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	68f9      	ldr	r1, [r7, #12]
 8003ace:	69b8      	ldr	r0, [r7, #24]
 8003ad0:	f000 ff0a 	bl	80048e8 <pxPortInitialiseStack>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ae6:	bf00      	nop
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20004238 	.word	0x20004238
 8003af4:	200042a0 	.word	0x200042a0
 8003af8:	20004308 	.word	0x20004308

08003afc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b04:	f001 f820 	bl	8004b48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b08:	4b2a      	ldr	r3, [pc, #168]	@ (8003bb4 <prvAddNewTaskToReadyList+0xb8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	4a29      	ldr	r2, [pc, #164]	@ (8003bb4 <prvAddNewTaskToReadyList+0xb8>)
 8003b10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b12:	4b29      	ldr	r3, [pc, #164]	@ (8003bb8 <prvAddNewTaskToReadyList+0xbc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b1a:	4a27      	ldr	r2, [pc, #156]	@ (8003bb8 <prvAddNewTaskToReadyList+0xbc>)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b20:	4b24      	ldr	r3, [pc, #144]	@ (8003bb4 <prvAddNewTaskToReadyList+0xb8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d110      	bne.n	8003b4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b28:	f000 fbf4 	bl	8004314 <prvInitialiseTaskLists>
 8003b2c:	e00d      	b.n	8003b4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b2e:	4b23      	ldr	r3, [pc, #140]	@ (8003bbc <prvAddNewTaskToReadyList+0xc0>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d109      	bne.n	8003b4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b36:	4b20      	ldr	r3, [pc, #128]	@ (8003bb8 <prvAddNewTaskToReadyList+0xbc>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d802      	bhi.n	8003b4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b44:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb8 <prvAddNewTaskToReadyList+0xbc>)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc0 <prvAddNewTaskToReadyList+0xc4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	4a1b      	ldr	r2, [pc, #108]	@ (8003bc0 <prvAddNewTaskToReadyList+0xc4>)
 8003b52:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b58:	2201      	movs	r2, #1
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	4b19      	ldr	r3, [pc, #100]	@ (8003bc4 <prvAddNewTaskToReadyList+0xc8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	4a18      	ldr	r2, [pc, #96]	@ (8003bc4 <prvAddNewTaskToReadyList+0xc8>)
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4a15      	ldr	r2, [pc, #84]	@ (8003bc8 <prvAddNewTaskToReadyList+0xcc>)
 8003b74:	441a      	add	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	f7ff f862 	bl	8002c46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b82:	f001 f813 	bl	8004bac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b86:	4b0d      	ldr	r3, [pc, #52]	@ (8003bbc <prvAddNewTaskToReadyList+0xc0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00e      	beq.n	8003bac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb8 <prvAddNewTaskToReadyList+0xbc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d207      	bcs.n	8003bac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bcc <prvAddNewTaskToReadyList+0xd0>)
 8003b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bac:	bf00      	nop
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	200004e4 	.word	0x200004e4
 8003bb8:	200003e4 	.word	0x200003e4
 8003bbc:	200004f0 	.word	0x200004f0
 8003bc0:	20000500 	.word	0x20000500
 8003bc4:	200004ec 	.word	0x200004ec
 8003bc8:	200003e8 	.word	0x200003e8
 8003bcc:	e000ed04 	.word	0xe000ed04

08003bd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d018      	beq.n	8003c14 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003be2:	4b14      	ldr	r3, [pc, #80]	@ (8003c34 <vTaskDelay+0x64>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <vTaskDelay+0x32>
	__asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	60bb      	str	r3, [r7, #8]
}
 8003bfc:	bf00      	nop
 8003bfe:	bf00      	nop
 8003c00:	e7fd      	b.n	8003bfe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c02:	f000 f885 	bl	8003d10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c06:	2100      	movs	r1, #0
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fe07 	bl	800481c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c0e:	f000 f88d 	bl	8003d2c <xTaskResumeAll>
 8003c12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d107      	bne.n	8003c2a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003c1a:	4b07      	ldr	r3, [pc, #28]	@ (8003c38 <vTaskDelay+0x68>)
 8003c1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	2000050c 	.word	0x2000050c
 8003c38:	e000ed04 	.word	0xe000ed04

08003c3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	@ 0x28
 8003c40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c4a:	463a      	mov	r2, r7
 8003c4c:	1d39      	adds	r1, r7, #4
 8003c4e:	f107 0308 	add.w	r3, r7, #8
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fc fcca 	bl	80005ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c58:	6839      	ldr	r1, [r7, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	9202      	str	r2, [sp, #8]
 8003c60:	9301      	str	r3, [sp, #4]
 8003c62:	2300      	movs	r3, #0
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	2300      	movs	r3, #0
 8003c68:	460a      	mov	r2, r1
 8003c6a:	4921      	ldr	r1, [pc, #132]	@ (8003cf0 <vTaskStartScheduler+0xb4>)
 8003c6c:	4821      	ldr	r0, [pc, #132]	@ (8003cf4 <vTaskStartScheduler+0xb8>)
 8003c6e:	f7ff fdff 	bl	8003870 <xTaskCreateStatic>
 8003c72:	4603      	mov	r3, r0
 8003c74:	4a20      	ldr	r2, [pc, #128]	@ (8003cf8 <vTaskStartScheduler+0xbc>)
 8003c76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c78:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf8 <vTaskStartScheduler+0xbc>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c80:	2301      	movs	r3, #1
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	e001      	b.n	8003c8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d11b      	bne.n	8003cc8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	613b      	str	r3, [r7, #16]
}
 8003ca2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ca4:	4b15      	ldr	r3, [pc, #84]	@ (8003cfc <vTaskStartScheduler+0xc0>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	334c      	adds	r3, #76	@ 0x4c
 8003caa:	4a15      	ldr	r2, [pc, #84]	@ (8003d00 <vTaskStartScheduler+0xc4>)
 8003cac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003cae:	4b15      	ldr	r3, [pc, #84]	@ (8003d04 <vTaskStartScheduler+0xc8>)
 8003cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003cb6:	4b14      	ldr	r3, [pc, #80]	@ (8003d08 <vTaskStartScheduler+0xcc>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003cbc:	4b13      	ldr	r3, [pc, #76]	@ (8003d0c <vTaskStartScheduler+0xd0>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003cc2:	f000 fe9d 	bl	8004a00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003cc6:	e00f      	b.n	8003ce8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cce:	d10b      	bne.n	8003ce8 <vTaskStartScheduler+0xac>
	__asm volatile
 8003cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	60fb      	str	r3, [r7, #12]
}
 8003ce2:	bf00      	nop
 8003ce4:	bf00      	nop
 8003ce6:	e7fd      	b.n	8003ce4 <vTaskStartScheduler+0xa8>
}
 8003ce8:	bf00      	nop
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	08006df8 	.word	0x08006df8
 8003cf4:	080042e5 	.word	0x080042e5
 8003cf8:	20000508 	.word	0x20000508
 8003cfc:	200003e4 	.word	0x200003e4
 8003d00:	20000034 	.word	0x20000034
 8003d04:	20000504 	.word	0x20000504
 8003d08:	200004f0 	.word	0x200004f0
 8003d0c:	200004e8 	.word	0x200004e8

08003d10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003d14:	4b04      	ldr	r3, [pc, #16]	@ (8003d28 <vTaskSuspendAll+0x18>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	4a03      	ldr	r2, [pc, #12]	@ (8003d28 <vTaskSuspendAll+0x18>)
 8003d1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003d1e:	bf00      	nop
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	2000050c 	.word	0x2000050c

08003d2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d3a:	4b42      	ldr	r3, [pc, #264]	@ (8003e44 <xTaskResumeAll+0x118>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10b      	bne.n	8003d5a <xTaskResumeAll+0x2e>
	__asm volatile
 8003d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	603b      	str	r3, [r7, #0]
}
 8003d54:	bf00      	nop
 8003d56:	bf00      	nop
 8003d58:	e7fd      	b.n	8003d56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d5a:	f000 fef5 	bl	8004b48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d5e:	4b39      	ldr	r3, [pc, #228]	@ (8003e44 <xTaskResumeAll+0x118>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	4a37      	ldr	r2, [pc, #220]	@ (8003e44 <xTaskResumeAll+0x118>)
 8003d66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d68:	4b36      	ldr	r3, [pc, #216]	@ (8003e44 <xTaskResumeAll+0x118>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d161      	bne.n	8003e34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d70:	4b35      	ldr	r3, [pc, #212]	@ (8003e48 <xTaskResumeAll+0x11c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d05d      	beq.n	8003e34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d78:	e02e      	b.n	8003dd8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d7a:	4b34      	ldr	r3, [pc, #208]	@ (8003e4c <xTaskResumeAll+0x120>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	3318      	adds	r3, #24
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe ffba 	bl	8002d00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fe ffb5 	bl	8002d00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	409a      	lsls	r2, r3
 8003d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8003e50 <xTaskResumeAll+0x124>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	4a2a      	ldr	r2, [pc, #168]	@ (8003e50 <xTaskResumeAll+0x124>)
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4a27      	ldr	r2, [pc, #156]	@ (8003e54 <xTaskResumeAll+0x128>)
 8003db6:	441a      	add	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f7fe ff41 	bl	8002c46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc8:	4b23      	ldr	r3, [pc, #140]	@ (8003e58 <xTaskResumeAll+0x12c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d302      	bcc.n	8003dd8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003dd2:	4b22      	ldr	r3, [pc, #136]	@ (8003e5c <xTaskResumeAll+0x130>)
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8003e4c <xTaskResumeAll+0x120>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1cc      	bne.n	8003d7a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003de6:	f000 fb39 	bl	800445c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003dea:	4b1d      	ldr	r3, [pc, #116]	@ (8003e60 <xTaskResumeAll+0x134>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d010      	beq.n	8003e18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003df6:	f000 f847 	bl	8003e88 <xTaskIncrementTick>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003e00:	4b16      	ldr	r3, [pc, #88]	@ (8003e5c <xTaskResumeAll+0x130>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f1      	bne.n	8003df6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003e12:	4b13      	ldr	r3, [pc, #76]	@ (8003e60 <xTaskResumeAll+0x134>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e18:	4b10      	ldr	r3, [pc, #64]	@ (8003e5c <xTaskResumeAll+0x130>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d009      	beq.n	8003e34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e20:	2301      	movs	r3, #1
 8003e22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e24:	4b0f      	ldr	r3, [pc, #60]	@ (8003e64 <xTaskResumeAll+0x138>)
 8003e26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e34:	f000 feba 	bl	8004bac <vPortExitCritical>

	return xAlreadyYielded;
 8003e38:	68bb      	ldr	r3, [r7, #8]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	2000050c 	.word	0x2000050c
 8003e48:	200004e4 	.word	0x200004e4
 8003e4c:	200004a4 	.word	0x200004a4
 8003e50:	200004ec 	.word	0x200004ec
 8003e54:	200003e8 	.word	0x200003e8
 8003e58:	200003e4 	.word	0x200003e4
 8003e5c:	200004f8 	.word	0x200004f8
 8003e60:	200004f4 	.word	0x200004f4
 8003e64:	e000ed04 	.word	0xe000ed04

08003e68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e6e:	4b05      	ldr	r3, [pc, #20]	@ (8003e84 <xTaskGetTickCount+0x1c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e74:	687b      	ldr	r3, [r7, #4]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	200004e8 	.word	0x200004e8

08003e88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e92:	4b4f      	ldr	r3, [pc, #316]	@ (8003fd0 <xTaskIncrementTick+0x148>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f040 808f 	bne.w	8003fba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e9c:	4b4d      	ldr	r3, [pc, #308]	@ (8003fd4 <xTaskIncrementTick+0x14c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ea4:	4a4b      	ldr	r2, [pc, #300]	@ (8003fd4 <xTaskIncrementTick+0x14c>)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d121      	bne.n	8003ef4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003eb0:	4b49      	ldr	r3, [pc, #292]	@ (8003fd8 <xTaskIncrementTick+0x150>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00b      	beq.n	8003ed2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	603b      	str	r3, [r7, #0]
}
 8003ecc:	bf00      	nop
 8003ece:	bf00      	nop
 8003ed0:	e7fd      	b.n	8003ece <xTaskIncrementTick+0x46>
 8003ed2:	4b41      	ldr	r3, [pc, #260]	@ (8003fd8 <xTaskIncrementTick+0x150>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	4b40      	ldr	r3, [pc, #256]	@ (8003fdc <xTaskIncrementTick+0x154>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a3e      	ldr	r2, [pc, #248]	@ (8003fd8 <xTaskIncrementTick+0x150>)
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	4a3e      	ldr	r2, [pc, #248]	@ (8003fdc <xTaskIncrementTick+0x154>)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	4b3e      	ldr	r3, [pc, #248]	@ (8003fe0 <xTaskIncrementTick+0x158>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3301      	adds	r3, #1
 8003eec:	4a3c      	ldr	r2, [pc, #240]	@ (8003fe0 <xTaskIncrementTick+0x158>)
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	f000 fab4 	bl	800445c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ef4:	4b3b      	ldr	r3, [pc, #236]	@ (8003fe4 <xTaskIncrementTick+0x15c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d348      	bcc.n	8003f90 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003efe:	4b36      	ldr	r3, [pc, #216]	@ (8003fd8 <xTaskIncrementTick+0x150>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d104      	bne.n	8003f12 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f08:	4b36      	ldr	r3, [pc, #216]	@ (8003fe4 <xTaskIncrementTick+0x15c>)
 8003f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f0e:	601a      	str	r2, [r3, #0]
					break;
 8003f10:	e03e      	b.n	8003f90 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f12:	4b31      	ldr	r3, [pc, #196]	@ (8003fd8 <xTaskIncrementTick+0x150>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d203      	bcs.n	8003f32 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f2a:	4a2e      	ldr	r2, [pc, #184]	@ (8003fe4 <xTaskIncrementTick+0x15c>)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f30:	e02e      	b.n	8003f90 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	3304      	adds	r3, #4
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe fee2 	bl	8002d00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d004      	beq.n	8003f4e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	3318      	adds	r3, #24
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fe fed9 	bl	8002d00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	2201      	movs	r2, #1
 8003f54:	409a      	lsls	r2, r3
 8003f56:	4b24      	ldr	r3, [pc, #144]	@ (8003fe8 <xTaskIncrementTick+0x160>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	4a22      	ldr	r2, [pc, #136]	@ (8003fe8 <xTaskIncrementTick+0x160>)
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003fec <xTaskIncrementTick+0x164>)
 8003f6e:	441a      	add	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	3304      	adds	r3, #4
 8003f74:	4619      	mov	r1, r3
 8003f76:	4610      	mov	r0, r2
 8003f78:	f7fe fe65 	bl	8002c46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f80:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff0 <xTaskIncrementTick+0x168>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d3b9      	bcc.n	8003efe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f8e:	e7b6      	b.n	8003efe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f90:	4b17      	ldr	r3, [pc, #92]	@ (8003ff0 <xTaskIncrementTick+0x168>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f96:	4915      	ldr	r1, [pc, #84]	@ (8003fec <xTaskIncrementTick+0x164>)
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d901      	bls.n	8003fac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003fac:	4b11      	ldr	r3, [pc, #68]	@ (8003ff4 <xTaskIncrementTick+0x16c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d007      	beq.n	8003fc4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	e004      	b.n	8003fc4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003fba:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff8 <xTaskIncrementTick+0x170>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ff8 <xTaskIncrementTick+0x170>)
 8003fc2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003fc4:	697b      	ldr	r3, [r7, #20]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	2000050c 	.word	0x2000050c
 8003fd4:	200004e8 	.word	0x200004e8
 8003fd8:	2000049c 	.word	0x2000049c
 8003fdc:	200004a0 	.word	0x200004a0
 8003fe0:	200004fc 	.word	0x200004fc
 8003fe4:	20000504 	.word	0x20000504
 8003fe8:	200004ec 	.word	0x200004ec
 8003fec:	200003e8 	.word	0x200003e8
 8003ff0:	200003e4 	.word	0x200003e4
 8003ff4:	200004f8 	.word	0x200004f8
 8003ff8:	200004f4 	.word	0x200004f4

08003ffc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004002:	4b2a      	ldr	r3, [pc, #168]	@ (80040ac <vTaskSwitchContext+0xb0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800400a:	4b29      	ldr	r3, [pc, #164]	@ (80040b0 <vTaskSwitchContext+0xb4>)
 800400c:	2201      	movs	r2, #1
 800400e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004010:	e045      	b.n	800409e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004012:	4b27      	ldr	r3, [pc, #156]	@ (80040b0 <vTaskSwitchContext+0xb4>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004018:	4b26      	ldr	r3, [pc, #152]	@ (80040b4 <vTaskSwitchContext+0xb8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	fab3 f383 	clz	r3, r3
 8004024:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004026:	7afb      	ldrb	r3, [r7, #11]
 8004028:	f1c3 031f 	rsb	r3, r3, #31
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	4922      	ldr	r1, [pc, #136]	@ (80040b8 <vTaskSwitchContext+0xbc>)
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10b      	bne.n	800405a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	607b      	str	r3, [r7, #4]
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop
 8004058:	e7fd      	b.n	8004056 <vTaskSwitchContext+0x5a>
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4a14      	ldr	r2, [pc, #80]	@ (80040b8 <vTaskSwitchContext+0xbc>)
 8004066:	4413      	add	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	605a      	str	r2, [r3, #4]
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	3308      	adds	r3, #8
 800407c:	429a      	cmp	r2, r3
 800407e:	d104      	bne.n	800408a <vTaskSwitchContext+0x8e>
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4a0a      	ldr	r2, [pc, #40]	@ (80040bc <vTaskSwitchContext+0xc0>)
 8004092:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004094:	4b09      	ldr	r3, [pc, #36]	@ (80040bc <vTaskSwitchContext+0xc0>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	334c      	adds	r3, #76	@ 0x4c
 800409a:	4a09      	ldr	r2, [pc, #36]	@ (80040c0 <vTaskSwitchContext+0xc4>)
 800409c:	6013      	str	r3, [r2, #0]
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	2000050c 	.word	0x2000050c
 80040b0:	200004f8 	.word	0x200004f8
 80040b4:	200004ec 	.word	0x200004ec
 80040b8:	200003e8 	.word	0x200003e8
 80040bc:	200003e4 	.word	0x200003e4
 80040c0:	20000034 	.word	0x20000034

080040c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10b      	bne.n	80040ec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	60fb      	str	r3, [r7, #12]
}
 80040e6:	bf00      	nop
 80040e8:	bf00      	nop
 80040ea:	e7fd      	b.n	80040e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040ec:	4b07      	ldr	r3, [pc, #28]	@ (800410c <vTaskPlaceOnEventList+0x48>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3318      	adds	r3, #24
 80040f2:	4619      	mov	r1, r3
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7fe fdca 	bl	8002c8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040fa:	2101      	movs	r1, #1
 80040fc:	6838      	ldr	r0, [r7, #0]
 80040fe:	f000 fb8d 	bl	800481c <prvAddCurrentTaskToDelayedList>
}
 8004102:	bf00      	nop
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	200003e4 	.word	0x200003e4

08004110 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10b      	bne.n	800413e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	60fb      	str	r3, [r7, #12]
}
 8004138:	bf00      	nop
 800413a:	bf00      	nop
 800413c:	e7fd      	b.n	800413a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	3318      	adds	r3, #24
 8004142:	4618      	mov	r0, r3
 8004144:	f7fe fddc 	bl	8002d00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004148:	4b1d      	ldr	r3, [pc, #116]	@ (80041c0 <xTaskRemoveFromEventList+0xb0>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d11c      	bne.n	800418a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	3304      	adds	r3, #4
 8004154:	4618      	mov	r0, r3
 8004156:	f7fe fdd3 	bl	8002d00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415e:	2201      	movs	r2, #1
 8004160:	409a      	lsls	r2, r3
 8004162:	4b18      	ldr	r3, [pc, #96]	@ (80041c4 <xTaskRemoveFromEventList+0xb4>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4313      	orrs	r3, r2
 8004168:	4a16      	ldr	r2, [pc, #88]	@ (80041c4 <xTaskRemoveFromEventList+0xb4>)
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4a13      	ldr	r2, [pc, #76]	@ (80041c8 <xTaskRemoveFromEventList+0xb8>)
 800417a:	441a      	add	r2, r3
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	3304      	adds	r3, #4
 8004180:	4619      	mov	r1, r3
 8004182:	4610      	mov	r0, r2
 8004184:	f7fe fd5f 	bl	8002c46 <vListInsertEnd>
 8004188:	e005      	b.n	8004196 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	3318      	adds	r3, #24
 800418e:	4619      	mov	r1, r3
 8004190:	480e      	ldr	r0, [pc, #56]	@ (80041cc <xTaskRemoveFromEventList+0xbc>)
 8004192:	f7fe fd58 	bl	8002c46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800419a:	4b0d      	ldr	r3, [pc, #52]	@ (80041d0 <xTaskRemoveFromEventList+0xc0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d905      	bls.n	80041b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041a4:	2301      	movs	r3, #1
 80041a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041a8:	4b0a      	ldr	r3, [pc, #40]	@ (80041d4 <xTaskRemoveFromEventList+0xc4>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e001      	b.n	80041b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80041b4:	697b      	ldr	r3, [r7, #20]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	2000050c 	.word	0x2000050c
 80041c4:	200004ec 	.word	0x200004ec
 80041c8:	200003e8 	.word	0x200003e8
 80041cc:	200004a4 	.word	0x200004a4
 80041d0:	200003e4 	.word	0x200003e4
 80041d4:	200004f8 	.word	0x200004f8

080041d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041e0:	4b06      	ldr	r3, [pc, #24]	@ (80041fc <vTaskInternalSetTimeOutState+0x24>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041e8:	4b05      	ldr	r3, [pc, #20]	@ (8004200 <vTaskInternalSetTimeOutState+0x28>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	605a      	str	r2, [r3, #4]
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	200004fc 	.word	0x200004fc
 8004200:	200004e8 	.word	0x200004e8

08004204 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10b      	bne.n	800422c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	613b      	str	r3, [r7, #16]
}
 8004226:	bf00      	nop
 8004228:	bf00      	nop
 800422a:	e7fd      	b.n	8004228 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10b      	bne.n	800424a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	60fb      	str	r3, [r7, #12]
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop
 8004248:	e7fd      	b.n	8004246 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800424a:	f000 fc7d 	bl	8004b48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800424e:	4b1d      	ldr	r3, [pc, #116]	@ (80042c4 <xTaskCheckForTimeOut+0xc0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004266:	d102      	bne.n	800426e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004268:	2300      	movs	r3, #0
 800426a:	61fb      	str	r3, [r7, #28]
 800426c:	e023      	b.n	80042b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	4b15      	ldr	r3, [pc, #84]	@ (80042c8 <xTaskCheckForTimeOut+0xc4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d007      	beq.n	800428a <xTaskCheckForTimeOut+0x86>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	429a      	cmp	r2, r3
 8004282:	d302      	bcc.n	800428a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004284:	2301      	movs	r3, #1
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	e015      	b.n	80042b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	429a      	cmp	r2, r3
 8004292:	d20b      	bcs.n	80042ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	1ad2      	subs	r2, r2, r3
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff ff99 	bl	80041d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042a6:	2300      	movs	r3, #0
 80042a8:	61fb      	str	r3, [r7, #28]
 80042aa:	e004      	b.n	80042b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042b2:	2301      	movs	r3, #1
 80042b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042b6:	f000 fc79 	bl	8004bac <vPortExitCritical>

	return xReturn;
 80042ba:	69fb      	ldr	r3, [r7, #28]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3720      	adds	r7, #32
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	200004e8 	.word	0x200004e8
 80042c8:	200004fc 	.word	0x200004fc

080042cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042d0:	4b03      	ldr	r3, [pc, #12]	@ (80042e0 <vTaskMissedYield+0x14>)
 80042d2:	2201      	movs	r2, #1
 80042d4:	601a      	str	r2, [r3, #0]
}
 80042d6:	bf00      	nop
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	200004f8 	.word	0x200004f8

080042e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042ec:	f000 f852 	bl	8004394 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042f0:	4b06      	ldr	r3, [pc, #24]	@ (800430c <prvIdleTask+0x28>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d9f9      	bls.n	80042ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80042f8:	4b05      	ldr	r3, [pc, #20]	@ (8004310 <prvIdleTask+0x2c>)
 80042fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004308:	e7f0      	b.n	80042ec <prvIdleTask+0x8>
 800430a:	bf00      	nop
 800430c:	200003e8 	.word	0x200003e8
 8004310:	e000ed04 	.word	0xe000ed04

08004314 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800431a:	2300      	movs	r3, #0
 800431c:	607b      	str	r3, [r7, #4]
 800431e:	e00c      	b.n	800433a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4a12      	ldr	r2, [pc, #72]	@ (8004374 <prvInitialiseTaskLists+0x60>)
 800432c:	4413      	add	r3, r2
 800432e:	4618      	mov	r0, r3
 8004330:	f7fe fc5c 	bl	8002bec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3301      	adds	r3, #1
 8004338:	607b      	str	r3, [r7, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b06      	cmp	r3, #6
 800433e:	d9ef      	bls.n	8004320 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004340:	480d      	ldr	r0, [pc, #52]	@ (8004378 <prvInitialiseTaskLists+0x64>)
 8004342:	f7fe fc53 	bl	8002bec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004346:	480d      	ldr	r0, [pc, #52]	@ (800437c <prvInitialiseTaskLists+0x68>)
 8004348:	f7fe fc50 	bl	8002bec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800434c:	480c      	ldr	r0, [pc, #48]	@ (8004380 <prvInitialiseTaskLists+0x6c>)
 800434e:	f7fe fc4d 	bl	8002bec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004352:	480c      	ldr	r0, [pc, #48]	@ (8004384 <prvInitialiseTaskLists+0x70>)
 8004354:	f7fe fc4a 	bl	8002bec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004358:	480b      	ldr	r0, [pc, #44]	@ (8004388 <prvInitialiseTaskLists+0x74>)
 800435a:	f7fe fc47 	bl	8002bec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800435e:	4b0b      	ldr	r3, [pc, #44]	@ (800438c <prvInitialiseTaskLists+0x78>)
 8004360:	4a05      	ldr	r2, [pc, #20]	@ (8004378 <prvInitialiseTaskLists+0x64>)
 8004362:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004364:	4b0a      	ldr	r3, [pc, #40]	@ (8004390 <prvInitialiseTaskLists+0x7c>)
 8004366:	4a05      	ldr	r2, [pc, #20]	@ (800437c <prvInitialiseTaskLists+0x68>)
 8004368:	601a      	str	r2, [r3, #0]
}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	200003e8 	.word	0x200003e8
 8004378:	20000474 	.word	0x20000474
 800437c:	20000488 	.word	0x20000488
 8004380:	200004a4 	.word	0x200004a4
 8004384:	200004b8 	.word	0x200004b8
 8004388:	200004d0 	.word	0x200004d0
 800438c:	2000049c 	.word	0x2000049c
 8004390:	200004a0 	.word	0x200004a0

08004394 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800439a:	e019      	b.n	80043d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800439c:	f000 fbd4 	bl	8004b48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043a0:	4b10      	ldr	r3, [pc, #64]	@ (80043e4 <prvCheckTasksWaitingTermination+0x50>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3304      	adds	r3, #4
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fe fca7 	bl	8002d00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043b2:	4b0d      	ldr	r3, [pc, #52]	@ (80043e8 <prvCheckTasksWaitingTermination+0x54>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	4a0b      	ldr	r2, [pc, #44]	@ (80043e8 <prvCheckTasksWaitingTermination+0x54>)
 80043ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043bc:	4b0b      	ldr	r3, [pc, #44]	@ (80043ec <prvCheckTasksWaitingTermination+0x58>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3b01      	subs	r3, #1
 80043c2:	4a0a      	ldr	r2, [pc, #40]	@ (80043ec <prvCheckTasksWaitingTermination+0x58>)
 80043c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043c6:	f000 fbf1 	bl	8004bac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f810 	bl	80043f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043d0:	4b06      	ldr	r3, [pc, #24]	@ (80043ec <prvCheckTasksWaitingTermination+0x58>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1e1      	bne.n	800439c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043d8:	bf00      	nop
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	200004b8 	.word	0x200004b8
 80043e8:	200004e4 	.word	0x200004e4
 80043ec:	200004cc 	.word	0x200004cc

080043f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	334c      	adds	r3, #76	@ 0x4c
 80043fc:	4618      	mov	r0, r3
 80043fe:	f001 fdf1 	bl	8005fe4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004408:	2b00      	cmp	r3, #0
 800440a:	d108      	bne.n	800441e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fd89 	bl	8004f28 <vPortFree>
				vPortFree( pxTCB );
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fd86 	bl	8004f28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800441c:	e019      	b.n	8004452 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004424:	2b01      	cmp	r3, #1
 8004426:	d103      	bne.n	8004430 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fd7d 	bl	8004f28 <vPortFree>
	}
 800442e:	e010      	b.n	8004452 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004436:	2b02      	cmp	r3, #2
 8004438:	d00b      	beq.n	8004452 <prvDeleteTCB+0x62>
	__asm volatile
 800443a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	60fb      	str	r3, [r7, #12]
}
 800444c:	bf00      	nop
 800444e:	bf00      	nop
 8004450:	e7fd      	b.n	800444e <prvDeleteTCB+0x5e>
	}
 8004452:	bf00      	nop
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004462:	4b0c      	ldr	r3, [pc, #48]	@ (8004494 <prvResetNextTaskUnblockTime+0x38>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d104      	bne.n	8004476 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800446c:	4b0a      	ldr	r3, [pc, #40]	@ (8004498 <prvResetNextTaskUnblockTime+0x3c>)
 800446e:	f04f 32ff 	mov.w	r2, #4294967295
 8004472:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004474:	e008      	b.n	8004488 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004476:	4b07      	ldr	r3, [pc, #28]	@ (8004494 <prvResetNextTaskUnblockTime+0x38>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	4a04      	ldr	r2, [pc, #16]	@ (8004498 <prvResetNextTaskUnblockTime+0x3c>)
 8004486:	6013      	str	r3, [r2, #0]
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	2000049c 	.word	0x2000049c
 8004498:	20000504 	.word	0x20000504

0800449c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044a2:	4b0b      	ldr	r3, [pc, #44]	@ (80044d0 <xTaskGetSchedulerState+0x34>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d102      	bne.n	80044b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044aa:	2301      	movs	r3, #1
 80044ac:	607b      	str	r3, [r7, #4]
 80044ae:	e008      	b.n	80044c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044b0:	4b08      	ldr	r3, [pc, #32]	@ (80044d4 <xTaskGetSchedulerState+0x38>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d102      	bne.n	80044be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044b8:	2302      	movs	r3, #2
 80044ba:	607b      	str	r3, [r7, #4]
 80044bc:	e001      	b.n	80044c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044be:	2300      	movs	r3, #0
 80044c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044c2:	687b      	ldr	r3, [r7, #4]
	}
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	200004f0 	.word	0x200004f0
 80044d4:	2000050c 	.word	0x2000050c

080044d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d05e      	beq.n	80045ac <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044f2:	4b31      	ldr	r3, [pc, #196]	@ (80045b8 <xTaskPriorityInherit+0xe0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d24e      	bcs.n	800459a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	2b00      	cmp	r3, #0
 8004502:	db06      	blt.n	8004512 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004504:	4b2c      	ldr	r3, [pc, #176]	@ (80045b8 <xTaskPriorityInherit+0xe0>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450a:	f1c3 0207 	rsb	r2, r3, #7
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	6959      	ldr	r1, [r3, #20]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4a26      	ldr	r2, [pc, #152]	@ (80045bc <xTaskPriorityInherit+0xe4>)
 8004524:	4413      	add	r3, r2
 8004526:	4299      	cmp	r1, r3
 8004528:	d12f      	bne.n	800458a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	3304      	adds	r3, #4
 800452e:	4618      	mov	r0, r3
 8004530:	f7fe fbe6 	bl	8002d00 <uxListRemove>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10a      	bne.n	8004550 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453e:	2201      	movs	r2, #1
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	43da      	mvns	r2, r3
 8004546:	4b1e      	ldr	r3, [pc, #120]	@ (80045c0 <xTaskPriorityInherit+0xe8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4013      	ands	r3, r2
 800454c:	4a1c      	ldr	r2, [pc, #112]	@ (80045c0 <xTaskPriorityInherit+0xe8>)
 800454e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004550:	4b19      	ldr	r3, [pc, #100]	@ (80045b8 <xTaskPriorityInherit+0xe0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455e:	2201      	movs	r2, #1
 8004560:	409a      	lsls	r2, r3
 8004562:	4b17      	ldr	r3, [pc, #92]	@ (80045c0 <xTaskPriorityInherit+0xe8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4313      	orrs	r3, r2
 8004568:	4a15      	ldr	r2, [pc, #84]	@ (80045c0 <xTaskPriorityInherit+0xe8>)
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004570:	4613      	mov	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4a10      	ldr	r2, [pc, #64]	@ (80045bc <xTaskPriorityInherit+0xe4>)
 800457a:	441a      	add	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	3304      	adds	r3, #4
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f7fe fb5f 	bl	8002c46 <vListInsertEnd>
 8004588:	e004      	b.n	8004594 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800458a:	4b0b      	ldr	r3, [pc, #44]	@ (80045b8 <xTaskPriorityInherit+0xe0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004594:	2301      	movs	r3, #1
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	e008      	b.n	80045ac <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800459e:	4b06      	ldr	r3, [pc, #24]	@ (80045b8 <xTaskPriorityInherit+0xe0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d201      	bcs.n	80045ac <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80045a8:	2301      	movs	r3, #1
 80045aa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045ac:	68fb      	ldr	r3, [r7, #12]
	}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	200003e4 	.word	0x200003e4
 80045bc:	200003e8 	.word	0x200003e8
 80045c0:	200004ec 	.word	0x200004ec

080045c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d070      	beq.n	80046bc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045da:	4b3b      	ldr	r3, [pc, #236]	@ (80046c8 <xTaskPriorityDisinherit+0x104>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d00b      	beq.n	80045fc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	60fb      	str	r3, [r7, #12]
}
 80045f6:	bf00      	nop
 80045f8:	bf00      	nop
 80045fa:	e7fd      	b.n	80045f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10b      	bne.n	800461c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	60bb      	str	r3, [r7, #8]
}
 8004616:	bf00      	nop
 8004618:	bf00      	nop
 800461a:	e7fd      	b.n	8004618 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004620:	1e5a      	subs	r2, r3, #1
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462e:	429a      	cmp	r2, r3
 8004630:	d044      	beq.n	80046bc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004636:	2b00      	cmp	r3, #0
 8004638:	d140      	bne.n	80046bc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	3304      	adds	r3, #4
 800463e:	4618      	mov	r0, r3
 8004640:	f7fe fb5e 	bl	8002d00 <uxListRemove>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d115      	bne.n	8004676 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800464e:	491f      	ldr	r1, [pc, #124]	@ (80046cc <xTaskPriorityDisinherit+0x108>)
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10a      	bne.n	8004676 <xTaskPriorityDisinherit+0xb2>
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004664:	2201      	movs	r2, #1
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43da      	mvns	r2, r3
 800466c:	4b18      	ldr	r3, [pc, #96]	@ (80046d0 <xTaskPriorityDisinherit+0x10c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4013      	ands	r3, r2
 8004672:	4a17      	ldr	r2, [pc, #92]	@ (80046d0 <xTaskPriorityDisinherit+0x10c>)
 8004674:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004682:	f1c3 0207 	rsb	r2, r3, #7
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468e:	2201      	movs	r2, #1
 8004690:	409a      	lsls	r2, r3
 8004692:	4b0f      	ldr	r3, [pc, #60]	@ (80046d0 <xTaskPriorityDisinherit+0x10c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4313      	orrs	r3, r2
 8004698:	4a0d      	ldr	r2, [pc, #52]	@ (80046d0 <xTaskPriorityDisinherit+0x10c>)
 800469a:	6013      	str	r3, [r2, #0]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a0:	4613      	mov	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4a08      	ldr	r2, [pc, #32]	@ (80046cc <xTaskPriorityDisinherit+0x108>)
 80046aa:	441a      	add	r2, r3
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	3304      	adds	r3, #4
 80046b0:	4619      	mov	r1, r3
 80046b2:	4610      	mov	r0, r2
 80046b4:	f7fe fac7 	bl	8002c46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046b8:	2301      	movs	r3, #1
 80046ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046bc:	697b      	ldr	r3, [r7, #20]
	}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	200003e4 	.word	0x200003e4
 80046cc:	200003e8 	.word	0x200003e8
 80046d0:	200004ec 	.word	0x200004ec

080046d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b088      	sub	sp, #32
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80046e2:	2301      	movs	r3, #1
 80046e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d079      	beq.n	80047e0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10b      	bne.n	800470c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	60fb      	str	r3, [r7, #12]
}
 8004706:	bf00      	nop
 8004708:	bf00      	nop
 800470a:	e7fd      	b.n	8004708 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d902      	bls.n	800471c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	e002      	b.n	8004722 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004720:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004726:	69fa      	ldr	r2, [r7, #28]
 8004728:	429a      	cmp	r2, r3
 800472a:	d059      	beq.n	80047e0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	429a      	cmp	r2, r3
 8004734:	d154      	bne.n	80047e0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004736:	4b2c      	ldr	r3, [pc, #176]	@ (80047e8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	429a      	cmp	r2, r3
 800473e:	d10b      	bne.n	8004758 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	60bb      	str	r3, [r7, #8]
}
 8004752:	bf00      	nop
 8004754:	bf00      	nop
 8004756:	e7fd      	b.n	8004754 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	2b00      	cmp	r3, #0
 800476a:	db04      	blt.n	8004776 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f1c3 0207 	rsb	r2, r3, #7
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	6959      	ldr	r1, [r3, #20]
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4a19      	ldr	r2, [pc, #100]	@ (80047ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004786:	4413      	add	r3, r2
 8004788:	4299      	cmp	r1, r3
 800478a:	d129      	bne.n	80047e0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	3304      	adds	r3, #4
 8004790:	4618      	mov	r0, r3
 8004792:	f7fe fab5 	bl	8002d00 <uxListRemove>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10a      	bne.n	80047b2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a0:	2201      	movs	r2, #1
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	43da      	mvns	r2, r3
 80047a8:	4b11      	ldr	r3, [pc, #68]	@ (80047f0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4013      	ands	r3, r2
 80047ae:	4a10      	ldr	r2, [pc, #64]	@ (80047f0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80047b0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b6:	2201      	movs	r2, #1
 80047b8:	409a      	lsls	r2, r3
 80047ba:	4b0d      	ldr	r3, [pc, #52]	@ (80047f0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4313      	orrs	r3, r2
 80047c0:	4a0b      	ldr	r2, [pc, #44]	@ (80047f0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80047c2:	6013      	str	r3, [r2, #0]
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4a06      	ldr	r2, [pc, #24]	@ (80047ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80047d2:	441a      	add	r2, r3
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	3304      	adds	r3, #4
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f7fe fa33 	bl	8002c46 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047e0:	bf00      	nop
 80047e2:	3720      	adds	r7, #32
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	200003e4 	.word	0x200003e4
 80047ec:	200003e8 	.word	0x200003e8
 80047f0:	200004ec 	.word	0x200004ec

080047f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80047f8:	4b07      	ldr	r3, [pc, #28]	@ (8004818 <pvTaskIncrementMutexHeldCount+0x24>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d004      	beq.n	800480a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004800:	4b05      	ldr	r3, [pc, #20]	@ (8004818 <pvTaskIncrementMutexHeldCount+0x24>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004806:	3201      	adds	r2, #1
 8004808:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800480a:	4b03      	ldr	r3, [pc, #12]	@ (8004818 <pvTaskIncrementMutexHeldCount+0x24>)
 800480c:	681b      	ldr	r3, [r3, #0]
	}
 800480e:	4618      	mov	r0, r3
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	200003e4 	.word	0x200003e4

0800481c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004826:	4b29      	ldr	r3, [pc, #164]	@ (80048cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800482c:	4b28      	ldr	r3, [pc, #160]	@ (80048d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3304      	adds	r3, #4
 8004832:	4618      	mov	r0, r3
 8004834:	f7fe fa64 	bl	8002d00 <uxListRemove>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10b      	bne.n	8004856 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800483e:	4b24      	ldr	r3, [pc, #144]	@ (80048d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004844:	2201      	movs	r2, #1
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43da      	mvns	r2, r3
 800484c:	4b21      	ldr	r3, [pc, #132]	@ (80048d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4013      	ands	r3, r2
 8004852:	4a20      	ldr	r2, [pc, #128]	@ (80048d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004854:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485c:	d10a      	bne.n	8004874 <prvAddCurrentTaskToDelayedList+0x58>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d007      	beq.n	8004874 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004864:	4b1a      	ldr	r3, [pc, #104]	@ (80048d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3304      	adds	r3, #4
 800486a:	4619      	mov	r1, r3
 800486c:	481a      	ldr	r0, [pc, #104]	@ (80048d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800486e:	f7fe f9ea 	bl	8002c46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004872:	e026      	b.n	80048c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4413      	add	r3, r2
 800487a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800487c:	4b14      	ldr	r3, [pc, #80]	@ (80048d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	429a      	cmp	r2, r3
 800488a:	d209      	bcs.n	80048a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800488c:	4b13      	ldr	r3, [pc, #76]	@ (80048dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4b0f      	ldr	r3, [pc, #60]	@ (80048d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3304      	adds	r3, #4
 8004896:	4619      	mov	r1, r3
 8004898:	4610      	mov	r0, r2
 800489a:	f7fe f9f8 	bl	8002c8e <vListInsert>
}
 800489e:	e010      	b.n	80048c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048a0:	4b0f      	ldr	r3, [pc, #60]	@ (80048e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4b0a      	ldr	r3, [pc, #40]	@ (80048d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3304      	adds	r3, #4
 80048aa:	4619      	mov	r1, r3
 80048ac:	4610      	mov	r0, r2
 80048ae:	f7fe f9ee 	bl	8002c8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048b2:	4b0c      	ldr	r3, [pc, #48]	@ (80048e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d202      	bcs.n	80048c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80048bc:	4a09      	ldr	r2, [pc, #36]	@ (80048e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	6013      	str	r3, [r2, #0]
}
 80048c2:	bf00      	nop
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	200004e8 	.word	0x200004e8
 80048d0:	200003e4 	.word	0x200003e4
 80048d4:	200004ec 	.word	0x200004ec
 80048d8:	200004d0 	.word	0x200004d0
 80048dc:	200004a0 	.word	0x200004a0
 80048e0:	2000049c 	.word	0x2000049c
 80048e4:	20000504 	.word	0x20000504

080048e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	3b04      	subs	r3, #4
 80048f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004900:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3b04      	subs	r3, #4
 8004906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f023 0201 	bic.w	r2, r3, #1
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3b04      	subs	r3, #4
 8004916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004918:	4a0c      	ldr	r2, [pc, #48]	@ (800494c <pxPortInitialiseStack+0x64>)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3b14      	subs	r3, #20
 8004922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3b04      	subs	r3, #4
 800492e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f06f 0202 	mvn.w	r2, #2
 8004936:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	3b20      	subs	r3, #32
 800493c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800493e:	68fb      	ldr	r3, [r7, #12]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	08004951 	.word	0x08004951

08004950 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800495a:	4b13      	ldr	r3, [pc, #76]	@ (80049a8 <prvTaskExitError+0x58>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004962:	d00b      	beq.n	800497c <prvTaskExitError+0x2c>
	__asm volatile
 8004964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	60fb      	str	r3, [r7, #12]
}
 8004976:	bf00      	nop
 8004978:	bf00      	nop
 800497a:	e7fd      	b.n	8004978 <prvTaskExitError+0x28>
	__asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	60bb      	str	r3, [r7, #8]
}
 800498e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004990:	bf00      	nop
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0fc      	beq.n	8004992 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004998:	bf00      	nop
 800499a:	bf00      	nop
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	2000000c 	.word	0x2000000c
 80049ac:	00000000 	.word	0x00000000

080049b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80049b0:	4b07      	ldr	r3, [pc, #28]	@ (80049d0 <pxCurrentTCBConst2>)
 80049b2:	6819      	ldr	r1, [r3, #0]
 80049b4:	6808      	ldr	r0, [r1, #0]
 80049b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ba:	f380 8809 	msr	PSP, r0
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f04f 0000 	mov.w	r0, #0
 80049c6:	f380 8811 	msr	BASEPRI, r0
 80049ca:	4770      	bx	lr
 80049cc:	f3af 8000 	nop.w

080049d0 <pxCurrentTCBConst2>:
 80049d0:	200003e4 	.word	0x200003e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop

080049d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80049d8:	4808      	ldr	r0, [pc, #32]	@ (80049fc <prvPortStartFirstTask+0x24>)
 80049da:	6800      	ldr	r0, [r0, #0]
 80049dc:	6800      	ldr	r0, [r0, #0]
 80049de:	f380 8808 	msr	MSP, r0
 80049e2:	f04f 0000 	mov.w	r0, #0
 80049e6:	f380 8814 	msr	CONTROL, r0
 80049ea:	b662      	cpsie	i
 80049ec:	b661      	cpsie	f
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	df00      	svc	0
 80049f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049fa:	bf00      	nop
 80049fc:	e000ed08 	.word	0xe000ed08

08004a00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a06:	4b47      	ldr	r3, [pc, #284]	@ (8004b24 <xPortStartScheduler+0x124>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a47      	ldr	r2, [pc, #284]	@ (8004b28 <xPortStartScheduler+0x128>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d10b      	bne.n	8004a28 <xPortStartScheduler+0x28>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	60fb      	str	r3, [r7, #12]
}
 8004a22:	bf00      	nop
 8004a24:	bf00      	nop
 8004a26:	e7fd      	b.n	8004a24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a28:	4b3e      	ldr	r3, [pc, #248]	@ (8004b24 <xPortStartScheduler+0x124>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b2c <xPortStartScheduler+0x12c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d10b      	bne.n	8004a4a <xPortStartScheduler+0x4a>
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	613b      	str	r3, [r7, #16]
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop
 8004a48:	e7fd      	b.n	8004a46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a4a:	4b39      	ldr	r3, [pc, #228]	@ (8004b30 <xPortStartScheduler+0x130>)
 8004a4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	22ff      	movs	r2, #255	@ 0xff
 8004a5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	4b31      	ldr	r3, [pc, #196]	@ (8004b34 <xPortStartScheduler+0x134>)
 8004a70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a72:	4b31      	ldr	r3, [pc, #196]	@ (8004b38 <xPortStartScheduler+0x138>)
 8004a74:	2207      	movs	r2, #7
 8004a76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a78:	e009      	b.n	8004a8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8004b38 <xPortStartScheduler+0x138>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	4a2d      	ldr	r2, [pc, #180]	@ (8004b38 <xPortStartScheduler+0x138>)
 8004a82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a8e:	78fb      	ldrb	r3, [r7, #3]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a96:	2b80      	cmp	r3, #128	@ 0x80
 8004a98:	d0ef      	beq.n	8004a7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a9a:	4b27      	ldr	r3, [pc, #156]	@ (8004b38 <xPortStartScheduler+0x138>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f1c3 0307 	rsb	r3, r3, #7
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d00b      	beq.n	8004abe <xPortStartScheduler+0xbe>
	__asm volatile
 8004aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	60bb      	str	r3, [r7, #8]
}
 8004ab8:	bf00      	nop
 8004aba:	bf00      	nop
 8004abc:	e7fd      	b.n	8004aba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004abe:	4b1e      	ldr	r3, [pc, #120]	@ (8004b38 <xPortStartScheduler+0x138>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	021b      	lsls	r3, r3, #8
 8004ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b38 <xPortStartScheduler+0x138>)
 8004ac6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b38 <xPortStartScheduler+0x138>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ad0:	4a19      	ldr	r2, [pc, #100]	@ (8004b38 <xPortStartScheduler+0x138>)
 8004ad2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004adc:	4b17      	ldr	r3, [pc, #92]	@ (8004b3c <xPortStartScheduler+0x13c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a16      	ldr	r2, [pc, #88]	@ (8004b3c <xPortStartScheduler+0x13c>)
 8004ae2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ae6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ae8:	4b14      	ldr	r3, [pc, #80]	@ (8004b3c <xPortStartScheduler+0x13c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a13      	ldr	r2, [pc, #76]	@ (8004b3c <xPortStartScheduler+0x13c>)
 8004aee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004af2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004af4:	f000 f8da 	bl	8004cac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004af8:	4b11      	ldr	r3, [pc, #68]	@ (8004b40 <xPortStartScheduler+0x140>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004afe:	f000 f8f9 	bl	8004cf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b02:	4b10      	ldr	r3, [pc, #64]	@ (8004b44 <xPortStartScheduler+0x144>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a0f      	ldr	r2, [pc, #60]	@ (8004b44 <xPortStartScheduler+0x144>)
 8004b08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004b0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b0e:	f7ff ff63 	bl	80049d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b12:	f7ff fa73 	bl	8003ffc <vTaskSwitchContext>
	prvTaskExitError();
 8004b16:	f7ff ff1b 	bl	8004950 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	e000ed00 	.word	0xe000ed00
 8004b28:	410fc271 	.word	0x410fc271
 8004b2c:	410fc270 	.word	0x410fc270
 8004b30:	e000e400 	.word	0xe000e400
 8004b34:	20000510 	.word	0x20000510
 8004b38:	20000514 	.word	0x20000514
 8004b3c:	e000ed20 	.word	0xe000ed20
 8004b40:	2000000c 	.word	0x2000000c
 8004b44:	e000ef34 	.word	0xe000ef34

08004b48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	607b      	str	r3, [r7, #4]
}
 8004b60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b62:	4b10      	ldr	r3, [pc, #64]	@ (8004ba4 <vPortEnterCritical+0x5c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3301      	adds	r3, #1
 8004b68:	4a0e      	ldr	r2, [pc, #56]	@ (8004ba4 <vPortEnterCritical+0x5c>)
 8004b6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba4 <vPortEnterCritical+0x5c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d110      	bne.n	8004b96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b74:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba8 <vPortEnterCritical+0x60>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00b      	beq.n	8004b96 <vPortEnterCritical+0x4e>
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	603b      	str	r3, [r7, #0]
}
 8004b90:	bf00      	nop
 8004b92:	bf00      	nop
 8004b94:	e7fd      	b.n	8004b92 <vPortEnterCritical+0x4a>
	}
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	2000000c 	.word	0x2000000c
 8004ba8:	e000ed04 	.word	0xe000ed04

08004bac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004bb2:	4b12      	ldr	r3, [pc, #72]	@ (8004bfc <vPortExitCritical+0x50>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10b      	bne.n	8004bd2 <vPortExitCritical+0x26>
	__asm volatile
 8004bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	607b      	str	r3, [r7, #4]
}
 8004bcc:	bf00      	nop
 8004bce:	bf00      	nop
 8004bd0:	e7fd      	b.n	8004bce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bfc <vPortExitCritical+0x50>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	4a08      	ldr	r2, [pc, #32]	@ (8004bfc <vPortExitCritical+0x50>)
 8004bda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004bdc:	4b07      	ldr	r3, [pc, #28]	@ (8004bfc <vPortExitCritical+0x50>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d105      	bne.n	8004bf0 <vPortExitCritical+0x44>
 8004be4:	2300      	movs	r3, #0
 8004be6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	f383 8811 	msr	BASEPRI, r3
}
 8004bee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	2000000c 	.word	0x2000000c

08004c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c00:	f3ef 8009 	mrs	r0, PSP
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	4b15      	ldr	r3, [pc, #84]	@ (8004c60 <pxCurrentTCBConst>)
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	f01e 0f10 	tst.w	lr, #16
 8004c10:	bf08      	it	eq
 8004c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1a:	6010      	str	r0, [r2, #0]
 8004c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004c24:	f380 8811 	msr	BASEPRI, r0
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f7ff f9e4 	bl	8003ffc <vTaskSwitchContext>
 8004c34:	f04f 0000 	mov.w	r0, #0
 8004c38:	f380 8811 	msr	BASEPRI, r0
 8004c3c:	bc09      	pop	{r0, r3}
 8004c3e:	6819      	ldr	r1, [r3, #0]
 8004c40:	6808      	ldr	r0, [r1, #0]
 8004c42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c46:	f01e 0f10 	tst.w	lr, #16
 8004c4a:	bf08      	it	eq
 8004c4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c50:	f380 8809 	msr	PSP, r0
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	f3af 8000 	nop.w

08004c60 <pxCurrentTCBConst>:
 8004c60:	200003e4 	.word	0x200003e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop

08004c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	607b      	str	r3, [r7, #4]
}
 8004c80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c82:	f7ff f901 	bl	8003e88 <xTaskIncrementTick>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c8c:	4b06      	ldr	r3, [pc, #24]	@ (8004ca8 <SysTick_Handler+0x40>)
 8004c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	2300      	movs	r3, #0
 8004c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	f383 8811 	msr	BASEPRI, r3
}
 8004c9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ca0:	bf00      	nop
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	e000ed04 	.word	0xe000ed04

08004cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce0 <vPortSetupTimerInterrupt+0x34>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce4 <vPortSetupTimerInterrupt+0x38>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce8 <vPortSetupTimerInterrupt+0x3c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8004cec <vPortSetupTimerInterrupt+0x40>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	099b      	lsrs	r3, r3, #6
 8004cc8:	4a09      	ldr	r2, [pc, #36]	@ (8004cf0 <vPortSetupTimerInterrupt+0x44>)
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cce:	4b04      	ldr	r3, [pc, #16]	@ (8004ce0 <vPortSetupTimerInterrupt+0x34>)
 8004cd0:	2207      	movs	r2, #7
 8004cd2:	601a      	str	r2, [r3, #0]
}
 8004cd4:	bf00      	nop
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	e000e010 	.word	0xe000e010
 8004ce4:	e000e018 	.word	0xe000e018
 8004ce8:	20000000 	.word	0x20000000
 8004cec:	10624dd3 	.word	0x10624dd3
 8004cf0:	e000e014 	.word	0xe000e014

08004cf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004d04 <vPortEnableVFP+0x10>
 8004cf8:	6801      	ldr	r1, [r0, #0]
 8004cfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004cfe:	6001      	str	r1, [r0, #0]
 8004d00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d02:	bf00      	nop
 8004d04:	e000ed88 	.word	0xe000ed88

08004d08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d0e:	f3ef 8305 	mrs	r3, IPSR
 8004d12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b0f      	cmp	r3, #15
 8004d18:	d915      	bls.n	8004d46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d1a:	4a18      	ldr	r2, [pc, #96]	@ (8004d7c <vPortValidateInterruptPriority+0x74>)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4413      	add	r3, r2
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d24:	4b16      	ldr	r3, [pc, #88]	@ (8004d80 <vPortValidateInterruptPriority+0x78>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	7afa      	ldrb	r2, [r7, #11]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d20b      	bcs.n	8004d46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	607b      	str	r3, [r7, #4]
}
 8004d40:	bf00      	nop
 8004d42:	bf00      	nop
 8004d44:	e7fd      	b.n	8004d42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d46:	4b0f      	ldr	r3, [pc, #60]	@ (8004d84 <vPortValidateInterruptPriority+0x7c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004d88 <vPortValidateInterruptPriority+0x80>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d90b      	bls.n	8004d6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	603b      	str	r3, [r7, #0]
}
 8004d68:	bf00      	nop
 8004d6a:	bf00      	nop
 8004d6c:	e7fd      	b.n	8004d6a <vPortValidateInterruptPriority+0x62>
	}
 8004d6e:	bf00      	nop
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	e000e3f0 	.word	0xe000e3f0
 8004d80:	20000510 	.word	0x20000510
 8004d84:	e000ed0c 	.word	0xe000ed0c
 8004d88:	20000514 	.word	0x20000514

08004d8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08a      	sub	sp, #40	@ 0x28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d94:	2300      	movs	r3, #0
 8004d96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d98:	f7fe ffba 	bl	8003d10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d9c:	4b5c      	ldr	r3, [pc, #368]	@ (8004f10 <pvPortMalloc+0x184>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004da4:	f000 f924 	bl	8004ff0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004da8:	4b5a      	ldr	r3, [pc, #360]	@ (8004f14 <pvPortMalloc+0x188>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4013      	ands	r3, r2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f040 8095 	bne.w	8004ee0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01e      	beq.n	8004dfa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004dbc:	2208      	movs	r2, #8
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d015      	beq.n	8004dfa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f023 0307 	bic.w	r3, r3, #7
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00b      	beq.n	8004dfa <pvPortMalloc+0x6e>
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	617b      	str	r3, [r7, #20]
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop
 8004df8:	e7fd      	b.n	8004df6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d06f      	beq.n	8004ee0 <pvPortMalloc+0x154>
 8004e00:	4b45      	ldr	r3, [pc, #276]	@ (8004f18 <pvPortMalloc+0x18c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d86a      	bhi.n	8004ee0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e0a:	4b44      	ldr	r3, [pc, #272]	@ (8004f1c <pvPortMalloc+0x190>)
 8004e0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e0e:	4b43      	ldr	r3, [pc, #268]	@ (8004f1c <pvPortMalloc+0x190>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e14:	e004      	b.n	8004e20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d903      	bls.n	8004e32 <pvPortMalloc+0xa6>
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f1      	bne.n	8004e16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e32:	4b37      	ldr	r3, [pc, #220]	@ (8004f10 <pvPortMalloc+0x184>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d051      	beq.n	8004ee0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2208      	movs	r2, #8
 8004e42:	4413      	add	r3, r2
 8004e44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	1ad2      	subs	r2, r2, r3
 8004e56:	2308      	movs	r3, #8
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d920      	bls.n	8004ea0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4413      	add	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00b      	beq.n	8004e88 <pvPortMalloc+0xfc>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	613b      	str	r3, [r7, #16]
}
 8004e82:	bf00      	nop
 8004e84:	bf00      	nop
 8004e86:	e7fd      	b.n	8004e84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	1ad2      	subs	r2, r2, r3
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e9a:	69b8      	ldr	r0, [r7, #24]
 8004e9c:	f000 f90a 	bl	80050b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f18 <pvPortMalloc+0x18c>)
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8004f18 <pvPortMalloc+0x18c>)
 8004eac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004eae:	4b1a      	ldr	r3, [pc, #104]	@ (8004f18 <pvPortMalloc+0x18c>)
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f20 <pvPortMalloc+0x194>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d203      	bcs.n	8004ec2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004eba:	4b17      	ldr	r3, [pc, #92]	@ (8004f18 <pvPortMalloc+0x18c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a18      	ldr	r2, [pc, #96]	@ (8004f20 <pvPortMalloc+0x194>)
 8004ec0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	4b13      	ldr	r3, [pc, #76]	@ (8004f14 <pvPortMalloc+0x188>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ece:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004ed6:	4b13      	ldr	r3, [pc, #76]	@ (8004f24 <pvPortMalloc+0x198>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3301      	adds	r3, #1
 8004edc:	4a11      	ldr	r2, [pc, #68]	@ (8004f24 <pvPortMalloc+0x198>)
 8004ede:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ee0:	f7fe ff24 	bl	8003d2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00b      	beq.n	8004f06 <pvPortMalloc+0x17a>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	60fb      	str	r3, [r7, #12]
}
 8004f00:	bf00      	nop
 8004f02:	bf00      	nop
 8004f04:	e7fd      	b.n	8004f02 <pvPortMalloc+0x176>
	return pvReturn;
 8004f06:	69fb      	ldr	r3, [r7, #28]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3728      	adds	r7, #40	@ 0x28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	20004120 	.word	0x20004120
 8004f14:	20004134 	.word	0x20004134
 8004f18:	20004124 	.word	0x20004124
 8004f1c:	20004118 	.word	0x20004118
 8004f20:	20004128 	.word	0x20004128
 8004f24:	2000412c 	.word	0x2000412c

08004f28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d04f      	beq.n	8004fda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f3a:	2308      	movs	r3, #8
 8004f3c:	425b      	negs	r3, r3
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4413      	add	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	4b25      	ldr	r3, [pc, #148]	@ (8004fe4 <vPortFree+0xbc>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4013      	ands	r3, r2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10b      	bne.n	8004f6e <vPortFree+0x46>
	__asm volatile
 8004f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5a:	f383 8811 	msr	BASEPRI, r3
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	60fb      	str	r3, [r7, #12]
}
 8004f68:	bf00      	nop
 8004f6a:	bf00      	nop
 8004f6c:	e7fd      	b.n	8004f6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00b      	beq.n	8004f8e <vPortFree+0x66>
	__asm volatile
 8004f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	60bb      	str	r3, [r7, #8]
}
 8004f88:	bf00      	nop
 8004f8a:	bf00      	nop
 8004f8c:	e7fd      	b.n	8004f8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	4b14      	ldr	r3, [pc, #80]	@ (8004fe4 <vPortFree+0xbc>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4013      	ands	r3, r2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01e      	beq.n	8004fda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d11a      	bne.n	8004fda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe4 <vPortFree+0xbc>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	43db      	mvns	r3, r3
 8004fae:	401a      	ands	r2, r3
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004fb4:	f7fe feac 	bl	8003d10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe8 <vPortFree+0xc0>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	4a09      	ldr	r2, [pc, #36]	@ (8004fe8 <vPortFree+0xc0>)
 8004fc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004fc6:	6938      	ldr	r0, [r7, #16]
 8004fc8:	f000 f874 	bl	80050b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004fcc:	4b07      	ldr	r3, [pc, #28]	@ (8004fec <vPortFree+0xc4>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	4a06      	ldr	r2, [pc, #24]	@ (8004fec <vPortFree+0xc4>)
 8004fd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004fd6:	f7fe fea9 	bl	8003d2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004fda:	bf00      	nop
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20004134 	.word	0x20004134
 8004fe8:	20004124 	.word	0x20004124
 8004fec:	20004130 	.word	0x20004130

08004ff0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ff6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004ffa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ffc:	4b27      	ldr	r3, [pc, #156]	@ (800509c <prvHeapInit+0xac>)
 8004ffe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00c      	beq.n	8005024 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	3307      	adds	r3, #7
 800500e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0307 	bic.w	r3, r3, #7
 8005016:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	4a1f      	ldr	r2, [pc, #124]	@ (800509c <prvHeapInit+0xac>)
 8005020:	4413      	add	r3, r2
 8005022:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005028:	4a1d      	ldr	r2, [pc, #116]	@ (80050a0 <prvHeapInit+0xb0>)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800502e:	4b1c      	ldr	r3, [pc, #112]	@ (80050a0 <prvHeapInit+0xb0>)
 8005030:	2200      	movs	r2, #0
 8005032:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	4413      	add	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800503c:	2208      	movs	r2, #8
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1a9b      	subs	r3, r3, r2
 8005042:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0307 	bic.w	r3, r3, #7
 800504a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4a15      	ldr	r2, [pc, #84]	@ (80050a4 <prvHeapInit+0xb4>)
 8005050:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005052:	4b14      	ldr	r3, [pc, #80]	@ (80050a4 <prvHeapInit+0xb4>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2200      	movs	r2, #0
 8005058:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800505a:	4b12      	ldr	r3, [pc, #72]	@ (80050a4 <prvHeapInit+0xb4>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	1ad2      	subs	r2, r2, r3
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005070:	4b0c      	ldr	r3, [pc, #48]	@ (80050a4 <prvHeapInit+0xb4>)
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	4a0a      	ldr	r2, [pc, #40]	@ (80050a8 <prvHeapInit+0xb8>)
 800507e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	4a09      	ldr	r2, [pc, #36]	@ (80050ac <prvHeapInit+0xbc>)
 8005086:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005088:	4b09      	ldr	r3, [pc, #36]	@ (80050b0 <prvHeapInit+0xc0>)
 800508a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800508e:	601a      	str	r2, [r3, #0]
}
 8005090:	bf00      	nop
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	20000518 	.word	0x20000518
 80050a0:	20004118 	.word	0x20004118
 80050a4:	20004120 	.word	0x20004120
 80050a8:	20004128 	.word	0x20004128
 80050ac:	20004124 	.word	0x20004124
 80050b0:	20004134 	.word	0x20004134

080050b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050bc:	4b28      	ldr	r3, [pc, #160]	@ (8005160 <prvInsertBlockIntoFreeList+0xac>)
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	e002      	b.n	80050c8 <prvInsertBlockIntoFreeList+0x14>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d8f7      	bhi.n	80050c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	4413      	add	r3, r2
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d108      	bne.n	80050f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	441a      	add	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	441a      	add	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	429a      	cmp	r2, r3
 8005108:	d118      	bne.n	800513c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	4b15      	ldr	r3, [pc, #84]	@ (8005164 <prvInsertBlockIntoFreeList+0xb0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d00d      	beq.n	8005132 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	441a      	add	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	e008      	b.n	8005144 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005132:	4b0c      	ldr	r3, [pc, #48]	@ (8005164 <prvInsertBlockIntoFreeList+0xb0>)
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	e003      	b.n	8005144 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	429a      	cmp	r2, r3
 800514a:	d002      	beq.n	8005152 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005152:	bf00      	nop
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	20004118 	.word	0x20004118
 8005164:	20004120 	.word	0x20004120

08005168 <app_init>:
TaskHandle_t h_task_a;
TaskHandle_t h_task_b;

/********************** external functions definition ************************/
void app_init(void)
{
 8005168:	b590      	push	{r4, r7, lr}
 800516a:	b087      	sub	sp, #28
 800516c:	af02      	add	r7, sp, #8
	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 800516e:	f7ff fceb 	bl	8004b48 <vPortEnterCritical>
 8005172:	4b4d      	ldr	r3, [pc, #308]	@ (80052a8 <app_init+0x140>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a4d      	ldr	r2, [pc, #308]	@ (80052ac <app_init+0x144>)
 8005178:	213f      	movs	r1, #63	@ 0x3f
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fe0c 	bl	8005d98 <sniprintf>
 8005180:	4603      	mov	r3, r0
 8005182:	4a4b      	ldr	r2, [pc, #300]	@ (80052b0 <app_init+0x148>)
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	4b48      	ldr	r3, [pc, #288]	@ (80052a8 <app_init+0x140>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4618      	mov	r0, r3
 800518c:	f000 f8aa 	bl	80052e4 <logger_log_print_>
 8005190:	f7ff fd0c 	bl	8004bac <vPortExitCritical>
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_init), (int)xTaskGetTickCount());
 8005194:	f7ff fcd8 	bl	8004b48 <vPortEnterCritical>
 8005198:	4b43      	ldr	r3, [pc, #268]	@ (80052a8 <app_init+0x140>)
 800519a:	681c      	ldr	r4, [r3, #0]
 800519c:	f7fe fe64 	bl	8003e68 <xTaskGetTickCount>
 80051a0:	4603      	mov	r3, r0
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	4b43      	ldr	r3, [pc, #268]	@ (80052b4 <app_init+0x14c>)
 80051a6:	4a44      	ldr	r2, [pc, #272]	@ (80052b8 <app_init+0x150>)
 80051a8:	213f      	movs	r1, #63	@ 0x3f
 80051aa:	4620      	mov	r0, r4
 80051ac:	f000 fdf4 	bl	8005d98 <sniprintf>
 80051b0:	4603      	mov	r3, r0
 80051b2:	4a3f      	ldr	r2, [pc, #252]	@ (80052b0 <app_init+0x148>)
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	4b3c      	ldr	r3, [pc, #240]	@ (80052a8 <app_init+0x140>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 f892 	bl	80052e4 <logger_log_print_>
 80051c0:	f7ff fcf4 	bl	8004bac <vPortExitCritical>

	LOGGER_LOG(p_sys);
 80051c4:	f7ff fcc0 	bl	8004b48 <vPortEnterCritical>
 80051c8:	4b37      	ldr	r3, [pc, #220]	@ (80052a8 <app_init+0x140>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a3b      	ldr	r2, [pc, #236]	@ (80052bc <app_init+0x154>)
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	213f      	movs	r1, #63	@ 0x3f
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fde0 	bl	8005d98 <sniprintf>
 80051d8:	4603      	mov	r3, r0
 80051da:	4a35      	ldr	r2, [pc, #212]	@ (80052b0 <app_init+0x148>)
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	4b32      	ldr	r3, [pc, #200]	@ (80052a8 <app_init+0x140>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 f87e 	bl	80052e4 <logger_log_print_>
 80051e8:	f7ff fce0 	bl	8004bac <vPortExitCritical>
	LOGGER_LOG(p_app);
 80051ec:	f7ff fcac 	bl	8004b48 <vPortEnterCritical>
 80051f0:	4b2d      	ldr	r3, [pc, #180]	@ (80052a8 <app_init+0x140>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a32      	ldr	r2, [pc, #200]	@ (80052c0 <app_init+0x158>)
 80051f6:	6812      	ldr	r2, [r2, #0]
 80051f8:	213f      	movs	r1, #63	@ 0x3f
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 fdcc 	bl	8005d98 <sniprintf>
 8005200:	4603      	mov	r3, r0
 8005202:	4a2b      	ldr	r2, [pc, #172]	@ (80052b0 <app_init+0x148>)
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	4b28      	ldr	r3, [pc, #160]	@ (80052a8 <app_init+0x140>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f000 f86a 	bl	80052e4 <logger_log_print_>
 8005210:	f7ff fccc 	bl	8004bac <vPortExitCritical>

	/* Add threads, ... */
    BaseType_t ret;

    /* Task A thread at priority 1 */
    ret = xTaskCreate(task_a,							/* Pointer to the function thats implement the task. */
 8005214:	4b2b      	ldr	r3, [pc, #172]	@ (80052c4 <app_init+0x15c>)
 8005216:	9301      	str	r3, [sp, #4]
 8005218:	2301      	movs	r3, #1
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	2300      	movs	r3, #0
 800521e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005222:	4929      	ldr	r1, [pc, #164]	@ (80052c8 <app_init+0x160>)
 8005224:	4829      	ldr	r0, [pc, #164]	@ (80052cc <app_init+0x164>)
 8005226:	f7fe fb83 	bl	8003930 <xTaskCreate>
 800522a:	60f8      	str	r0, [r7, #12]
					  NULL,								/* We are not using the task parameter. */
					  (tskIDLE_PRIORITY + 1ul),			/* This task will run at priority 1. */
					  &h_task_a);						/* We are using a variable as task handle. */

    /* Check the thread was created successfully. */
    configASSERT(pdPASS == ret);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d00b      	beq.n	800524a <app_init+0xe2>
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	60bb      	str	r3, [r7, #8]
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop
 8005248:	e7fd      	b.n	8005246 <app_init+0xde>

    /* Task B thread at priority 1 */
    ret = xTaskCreate(task_b,							/* Pointer to the function thats implement the task. */
 800524a:	4b21      	ldr	r3, [pc, #132]	@ (80052d0 <app_init+0x168>)
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	2301      	movs	r3, #1
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	2300      	movs	r3, #0
 8005254:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005258:	491e      	ldr	r1, [pc, #120]	@ (80052d4 <app_init+0x16c>)
 800525a:	481f      	ldr	r0, [pc, #124]	@ (80052d8 <app_init+0x170>)
 800525c:	f7fe fb68 	bl	8003930 <xTaskCreate>
 8005260:	60f8      	str	r0, [r7, #12]
					  NULL,								/* We are not using the task parameter. */
					  (tskIDLE_PRIORITY + 1ul),			/* This task will run at priority 1. */
					  &h_task_b);						/* We are using a variable as task handle. */

    /* Check the thread was created successfully. */
    configASSERT(pdPASS == ret);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d00b      	beq.n	8005280 <app_init+0x118>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	607b      	str	r3, [r7, #4]
}
 800527a:	bf00      	nop
 800527c:	bf00      	nop
 800527e:	e7fd      	b.n	800527c <app_init+0x114>

	cycle_counter_init();
 8005280:	4b16      	ldr	r3, [pc, #88]	@ (80052dc <app_init+0x174>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	4a15      	ldr	r2, [pc, #84]	@ (80052dc <app_init+0x174>)
 8005286:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800528a:	60d3      	str	r3, [r2, #12]
 800528c:	4b14      	ldr	r3, [pc, #80]	@ (80052e0 <app_init+0x178>)
 800528e:	2200      	movs	r2, #0
 8005290:	605a      	str	r2, [r3, #4]
 8005292:	4b13      	ldr	r3, [pc, #76]	@ (80052e0 <app_init+0x178>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a12      	ldr	r2, [pc, #72]	@ (80052e0 <app_init+0x178>)
 8005298:	f043 0301 	orr.w	r3, r3, #1
 800529c:	6013      	str	r3, [r2, #0]
}
 800529e:	bf00      	nop
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd90      	pop	{r4, r7, pc}
 80052a6:	bf00      	nop
 80052a8:	08006f74 	.word	0x08006f74
 80052ac:	08006e50 	.word	0x08006e50
 80052b0:	20004180 	.word	0x20004180
 80052b4:	08006e54 	.word	0x08006e54
 80052b8:	08006e60 	.word	0x08006e60
 80052bc:	20000010 	.word	0x20000010
 80052c0:	20000014 	.word	0x20000014
 80052c4:	20004138 	.word	0x20004138
 80052c8:	08006e84 	.word	0x08006e84
 80052cc:	0800530d 	.word	0x0800530d
 80052d0:	2000413c 	.word	0x2000413c
 80052d4:	08006e8c 	.word	0x08006e8c
 80052d8:	080053c5 	.word	0x080053c5
 80052dc:	e000edf0 	.word	0xe000edf0
 80052e0:	e0001000 	.word	0xe0001000

080052e4 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
	printf(msg);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fce3 	bl	8005cb8 <iprintf>
	fflush(stdout);
 80052f2:	4b05      	ldr	r3, [pc, #20]	@ (8005308 <logger_log_print_+0x24>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 fc07 	bl	8005b0c <fflush>
}
 80052fe:	bf00      	nop
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000034 	.word	0x20000034

0800530c <task_a>:
uint32_t g_task_a_cnt;

/********************** external functions definition ************************/
/* Task A thread */
void task_a(void *parameters)
{
 800530c:	b590      	push	{r4, r7, lr}
 800530e:	b087      	sub	sp, #28
 8005310:	af02      	add	r7, sp, #8
 8005312:	6078      	str	r0, [r7, #4]
	#if (TEST_X == TEST_0)

	uint32_t task_a_cnt;
	g_task_a_cnt = G_TASK_A_CNT_INI;
 8005314:	4b23      	ldr	r3, [pc, #140]	@ (80053a4 <task_a+0x98>)
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]
	{

		#if (TEST_X == TEST_0)

		/* Update Task A Counter */
		g_task_a_cnt++;
 800531a:	4b22      	ldr	r3, [pc, #136]	@ (80053a4 <task_a+0x98>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3301      	adds	r3, #1
 8005320:	4a20      	ldr	r2, [pc, #128]	@ (80053a4 <task_a+0x98>)
 8005322:	6013      	str	r3, [r2, #0]

		/* Print out: Application Update */
		LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_a), p_task_a);
 8005324:	f7ff fc10 	bl	8004b48 <vPortEnterCritical>
 8005328:	4b1f      	ldr	r3, [pc, #124]	@ (80053a8 <task_a+0x9c>)
 800532a:	6818      	ldr	r0, [r3, #0]
 800532c:	4b1f      	ldr	r3, [pc, #124]	@ (80053ac <task_a+0xa0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	4b1f      	ldr	r3, [pc, #124]	@ (80053b0 <task_a+0xa4>)
 8005334:	4a1f      	ldr	r2, [pc, #124]	@ (80053b4 <task_a+0xa8>)
 8005336:	213f      	movs	r1, #63	@ 0x3f
 8005338:	f000 fd2e 	bl	8005d98 <sniprintf>
 800533c:	4603      	mov	r3, r0
 800533e:	4a1e      	ldr	r2, [pc, #120]	@ (80053b8 <task_a+0xac>)
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	4b19      	ldr	r3, [pc, #100]	@ (80053a8 <task_a+0x9c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff ffcc 	bl	80052e4 <logger_log_print_>
 800534c:	f7ff fc2e 	bl	8004bac <vPortExitCritical>

		/* Print out: Task execution counter */
		LOGGER_LOG("   Tick [mS] = %d - %s = %d\r\n", (int)xTaskGetTickCount(), GET_NAME(g_task_a_cnt), (int)g_task_a_cnt);
 8005350:	f7ff fbfa 	bl	8004b48 <vPortEnterCritical>
 8005354:	4b14      	ldr	r3, [pc, #80]	@ (80053a8 <task_a+0x9c>)
 8005356:	681c      	ldr	r4, [r3, #0]
 8005358:	f7fe fd86 	bl	8003e68 <xTaskGetTickCount>
 800535c:	4603      	mov	r3, r0
 800535e:	461a      	mov	r2, r3
 8005360:	4b10      	ldr	r3, [pc, #64]	@ (80053a4 <task_a+0x98>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	9301      	str	r3, [sp, #4]
 8005366:	4b15      	ldr	r3, [pc, #84]	@ (80053bc <task_a+0xb0>)
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	4613      	mov	r3, r2
 800536c:	4a14      	ldr	r2, [pc, #80]	@ (80053c0 <task_a+0xb4>)
 800536e:	213f      	movs	r1, #63	@ 0x3f
 8005370:	4620      	mov	r0, r4
 8005372:	f000 fd11 	bl	8005d98 <sniprintf>
 8005376:	4603      	mov	r3, r0
 8005378:	4a0f      	ldr	r2, [pc, #60]	@ (80053b8 <task_a+0xac>)
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	4b0a      	ldr	r3, [pc, #40]	@ (80053a8 <task_a+0x9c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff ffaf 	bl	80052e4 <logger_log_print_>
 8005386:	f7ff fc11 	bl	8004bac <vPortExitCritical>

		for (task_a_cnt = TASK_A_CNT_INI; TASK_A_CNT_MAX > task_a_cnt; task_a_cnt++);
 800538a:	2300      	movs	r3, #0
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	e002      	b.n	8005396 <task_a+0x8a>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	3301      	adds	r3, #1
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f242 720f 	movw	r2, #9999	@ 0x270f
 800539c:	4293      	cmp	r3, r2
 800539e:	d9f7      	bls.n	8005390 <task_a+0x84>
		g_task_a_cnt++;
 80053a0:	e7bb      	b.n	800531a <task_a+0xe>
 80053a2:	bf00      	nop
 80053a4:	20004184 	.word	0x20004184
 80053a8:	08006f74 	.word	0x08006f74
 80053ac:	20000018 	.word	0x20000018
 80053b0:	08006ea8 	.word	0x08006ea8
 80053b4:	08006eb0 	.word	0x08006eb0
 80053b8:	20004180 	.word	0x20004180
 80053bc:	08006ee8 	.word	0x08006ee8
 80053c0:	08006ec8 	.word	0x08006ec8

080053c4 <task_b>:
uint32_t g_task_b_cnt;

/********************** external functions definition ************************/
/* Task B thread */
void task_b(void *parameters)
{
 80053c4:	b590      	push	{r4, r7, lr}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	6078      	str	r0, [r7, #4]
	#if (TEST_X == TEST_0)

	uint32_t task_b_cnt;
	g_task_b_cnt = G_TASK_B_CNT_INI;
 80053cc:	4b23      	ldr	r3, [pc, #140]	@ (800545c <task_b+0x98>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]
	for (;;)
    {
		#if (TEST_X == TEST_0)

		/* Update Task B Counter */
		g_task_b_cnt++;
 80053d2:	4b22      	ldr	r3, [pc, #136]	@ (800545c <task_b+0x98>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3301      	adds	r3, #1
 80053d8:	4a20      	ldr	r2, [pc, #128]	@ (800545c <task_b+0x98>)
 80053da:	6013      	str	r3, [r2, #0]

		/* Print out: Application Update */
		LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_b), p_task_b);
 80053dc:	f7ff fbb4 	bl	8004b48 <vPortEnterCritical>
 80053e0:	4b1f      	ldr	r3, [pc, #124]	@ (8005460 <task_b+0x9c>)
 80053e2:	6818      	ldr	r0, [r3, #0]
 80053e4:	4b1f      	ldr	r3, [pc, #124]	@ (8005464 <task_b+0xa0>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	4b1f      	ldr	r3, [pc, #124]	@ (8005468 <task_b+0xa4>)
 80053ec:	4a1f      	ldr	r2, [pc, #124]	@ (800546c <task_b+0xa8>)
 80053ee:	213f      	movs	r1, #63	@ 0x3f
 80053f0:	f000 fcd2 	bl	8005d98 <sniprintf>
 80053f4:	4603      	mov	r3, r0
 80053f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005470 <task_b+0xac>)
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	4b19      	ldr	r3, [pc, #100]	@ (8005460 <task_b+0x9c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff ff70 	bl	80052e4 <logger_log_print_>
 8005404:	f7ff fbd2 	bl	8004bac <vPortExitCritical>

		/* Print out: Task execution counter */
		LOGGER_LOG("   Tick [mS] = %d - %s = %d\r\n", (int)xTaskGetTickCount(), GET_NAME(g_task_b_cnt), (int)g_task_b_cnt);
 8005408:	f7ff fb9e 	bl	8004b48 <vPortEnterCritical>
 800540c:	4b14      	ldr	r3, [pc, #80]	@ (8005460 <task_b+0x9c>)
 800540e:	681c      	ldr	r4, [r3, #0]
 8005410:	f7fe fd2a 	bl	8003e68 <xTaskGetTickCount>
 8005414:	4603      	mov	r3, r0
 8005416:	461a      	mov	r2, r3
 8005418:	4b10      	ldr	r3, [pc, #64]	@ (800545c <task_b+0x98>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	9301      	str	r3, [sp, #4]
 800541e:	4b15      	ldr	r3, [pc, #84]	@ (8005474 <task_b+0xb0>)
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	4613      	mov	r3, r2
 8005424:	4a14      	ldr	r2, [pc, #80]	@ (8005478 <task_b+0xb4>)
 8005426:	213f      	movs	r1, #63	@ 0x3f
 8005428:	4620      	mov	r0, r4
 800542a:	f000 fcb5 	bl	8005d98 <sniprintf>
 800542e:	4603      	mov	r3, r0
 8005430:	4a0f      	ldr	r2, [pc, #60]	@ (8005470 <task_b+0xac>)
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	4b0a      	ldr	r3, [pc, #40]	@ (8005460 <task_b+0x9c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff ff53 	bl	80052e4 <logger_log_print_>
 800543e:	f7ff fbb5 	bl	8004bac <vPortExitCritical>

		for (task_b_cnt = TASK_B_CNT_INI; TASK_B_CNT_MAX > task_b_cnt; task_b_cnt++);
 8005442:	2300      	movs	r3, #0
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	e002      	b.n	800544e <task_b+0x8a>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	3301      	adds	r3, #1
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005454:	4293      	cmp	r3, r2
 8005456:	d9f7      	bls.n	8005448 <task_b+0x84>
		g_task_b_cnt++;
 8005458:	e7bb      	b.n	80053d2 <task_b+0xe>
 800545a:	bf00      	nop
 800545c:	20004188 	.word	0x20004188
 8005460:	08006f74 	.word	0x08006f74
 8005464:	2000001c 	.word	0x2000001c
 8005468:	08006f0c 	.word	0x08006f0c
 800546c:	08006f14 	.word	0x08006f14
 8005470:	20004180 	.word	0x20004180
 8005474:	08006f4c 	.word	0x08006f4c
 8005478:	08006f2c 	.word	0x08006f2c

0800547c <findslot>:
 800547c:	4b0a      	ldr	r3, [pc, #40]	@ (80054a8 <findslot+0x2c>)
 800547e:	b510      	push	{r4, lr}
 8005480:	4604      	mov	r4, r0
 8005482:	6818      	ldr	r0, [r3, #0]
 8005484:	b118      	cbz	r0, 800548e <findslot+0x12>
 8005486:	6a03      	ldr	r3, [r0, #32]
 8005488:	b90b      	cbnz	r3, 800548e <findslot+0x12>
 800548a:	f000 fbdf 	bl	8005c4c <__sinit>
 800548e:	2c13      	cmp	r4, #19
 8005490:	d807      	bhi.n	80054a2 <findslot+0x26>
 8005492:	4806      	ldr	r0, [pc, #24]	@ (80054ac <findslot+0x30>)
 8005494:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005498:	3201      	adds	r2, #1
 800549a:	d002      	beq.n	80054a2 <findslot+0x26>
 800549c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80054a0:	bd10      	pop	{r4, pc}
 80054a2:	2000      	movs	r0, #0
 80054a4:	e7fc      	b.n	80054a0 <findslot+0x24>
 80054a6:	bf00      	nop
 80054a8:	20000034 	.word	0x20000034
 80054ac:	20004198 	.word	0x20004198

080054b0 <error>:
 80054b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b2:	4604      	mov	r4, r0
 80054b4:	f000 fe2a 	bl	800610c <__errno>
 80054b8:	2613      	movs	r6, #19
 80054ba:	4605      	mov	r5, r0
 80054bc:	2700      	movs	r7, #0
 80054be:	4630      	mov	r0, r6
 80054c0:	4639      	mov	r1, r7
 80054c2:	beab      	bkpt	0x00ab
 80054c4:	4606      	mov	r6, r0
 80054c6:	602e      	str	r6, [r5, #0]
 80054c8:	4620      	mov	r0, r4
 80054ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080054cc <checkerror>:
 80054cc:	1c43      	adds	r3, r0, #1
 80054ce:	d101      	bne.n	80054d4 <checkerror+0x8>
 80054d0:	f7ff bfee 	b.w	80054b0 <error>
 80054d4:	4770      	bx	lr

080054d6 <_swiread>:
 80054d6:	b530      	push	{r4, r5, lr}
 80054d8:	b085      	sub	sp, #20
 80054da:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80054de:	9203      	str	r2, [sp, #12]
 80054e0:	2406      	movs	r4, #6
 80054e2:	ad01      	add	r5, sp, #4
 80054e4:	4620      	mov	r0, r4
 80054e6:	4629      	mov	r1, r5
 80054e8:	beab      	bkpt	0x00ab
 80054ea:	4604      	mov	r4, r0
 80054ec:	4620      	mov	r0, r4
 80054ee:	f7ff ffed 	bl	80054cc <checkerror>
 80054f2:	b005      	add	sp, #20
 80054f4:	bd30      	pop	{r4, r5, pc}

080054f6 <_read>:
 80054f6:	b570      	push	{r4, r5, r6, lr}
 80054f8:	460e      	mov	r6, r1
 80054fa:	4614      	mov	r4, r2
 80054fc:	f7ff ffbe 	bl	800547c <findslot>
 8005500:	4605      	mov	r5, r0
 8005502:	b930      	cbnz	r0, 8005512 <_read+0x1c>
 8005504:	f000 fe02 	bl	800610c <__errno>
 8005508:	2309      	movs	r3, #9
 800550a:	6003      	str	r3, [r0, #0]
 800550c:	f04f 30ff 	mov.w	r0, #4294967295
 8005510:	bd70      	pop	{r4, r5, r6, pc}
 8005512:	6800      	ldr	r0, [r0, #0]
 8005514:	4622      	mov	r2, r4
 8005516:	4631      	mov	r1, r6
 8005518:	f7ff ffdd 	bl	80054d6 <_swiread>
 800551c:	1c43      	adds	r3, r0, #1
 800551e:	d0f5      	beq.n	800550c <_read+0x16>
 8005520:	686b      	ldr	r3, [r5, #4]
 8005522:	1a20      	subs	r0, r4, r0
 8005524:	4403      	add	r3, r0
 8005526:	606b      	str	r3, [r5, #4]
 8005528:	e7f2      	b.n	8005510 <_read+0x1a>

0800552a <_swilseek>:
 800552a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800552c:	460c      	mov	r4, r1
 800552e:	4616      	mov	r6, r2
 8005530:	f7ff ffa4 	bl	800547c <findslot>
 8005534:	4605      	mov	r5, r0
 8005536:	b940      	cbnz	r0, 800554a <_swilseek+0x20>
 8005538:	f000 fde8 	bl	800610c <__errno>
 800553c:	2309      	movs	r3, #9
 800553e:	6003      	str	r3, [r0, #0]
 8005540:	f04f 34ff 	mov.w	r4, #4294967295
 8005544:	4620      	mov	r0, r4
 8005546:	b003      	add	sp, #12
 8005548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800554a:	2e02      	cmp	r6, #2
 800554c:	d903      	bls.n	8005556 <_swilseek+0x2c>
 800554e:	f000 fddd 	bl	800610c <__errno>
 8005552:	2316      	movs	r3, #22
 8005554:	e7f3      	b.n	800553e <_swilseek+0x14>
 8005556:	2e01      	cmp	r6, #1
 8005558:	d112      	bne.n	8005580 <_swilseek+0x56>
 800555a:	6843      	ldr	r3, [r0, #4]
 800555c:	18e4      	adds	r4, r4, r3
 800555e:	d4f6      	bmi.n	800554e <_swilseek+0x24>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	260a      	movs	r6, #10
 8005564:	e9cd 3400 	strd	r3, r4, [sp]
 8005568:	466f      	mov	r7, sp
 800556a:	4630      	mov	r0, r6
 800556c:	4639      	mov	r1, r7
 800556e:	beab      	bkpt	0x00ab
 8005570:	4606      	mov	r6, r0
 8005572:	4630      	mov	r0, r6
 8005574:	f7ff ffaa 	bl	80054cc <checkerror>
 8005578:	2800      	cmp	r0, #0
 800557a:	dbe1      	blt.n	8005540 <_swilseek+0x16>
 800557c:	606c      	str	r4, [r5, #4]
 800557e:	e7e1      	b.n	8005544 <_swilseek+0x1a>
 8005580:	2e02      	cmp	r6, #2
 8005582:	6803      	ldr	r3, [r0, #0]
 8005584:	d1ec      	bne.n	8005560 <_swilseek+0x36>
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	260c      	movs	r6, #12
 800558a:	466f      	mov	r7, sp
 800558c:	4630      	mov	r0, r6
 800558e:	4639      	mov	r1, r7
 8005590:	beab      	bkpt	0x00ab
 8005592:	4606      	mov	r6, r0
 8005594:	4630      	mov	r0, r6
 8005596:	f7ff ff99 	bl	80054cc <checkerror>
 800559a:	1c43      	adds	r3, r0, #1
 800559c:	d0d0      	beq.n	8005540 <_swilseek+0x16>
 800559e:	4404      	add	r4, r0
 80055a0:	e7de      	b.n	8005560 <_swilseek+0x36>

080055a2 <_lseek>:
 80055a2:	f7ff bfc2 	b.w	800552a <_swilseek>

080055a6 <_swiwrite>:
 80055a6:	b530      	push	{r4, r5, lr}
 80055a8:	b085      	sub	sp, #20
 80055aa:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80055ae:	9203      	str	r2, [sp, #12]
 80055b0:	2405      	movs	r4, #5
 80055b2:	ad01      	add	r5, sp, #4
 80055b4:	4620      	mov	r0, r4
 80055b6:	4629      	mov	r1, r5
 80055b8:	beab      	bkpt	0x00ab
 80055ba:	4604      	mov	r4, r0
 80055bc:	4620      	mov	r0, r4
 80055be:	f7ff ff85 	bl	80054cc <checkerror>
 80055c2:	b005      	add	sp, #20
 80055c4:	bd30      	pop	{r4, r5, pc}

080055c6 <_write>:
 80055c6:	b570      	push	{r4, r5, r6, lr}
 80055c8:	460e      	mov	r6, r1
 80055ca:	4615      	mov	r5, r2
 80055cc:	f7ff ff56 	bl	800547c <findslot>
 80055d0:	4604      	mov	r4, r0
 80055d2:	b930      	cbnz	r0, 80055e2 <_write+0x1c>
 80055d4:	f000 fd9a 	bl	800610c <__errno>
 80055d8:	2309      	movs	r3, #9
 80055da:	6003      	str	r3, [r0, #0]
 80055dc:	f04f 30ff 	mov.w	r0, #4294967295
 80055e0:	bd70      	pop	{r4, r5, r6, pc}
 80055e2:	6800      	ldr	r0, [r0, #0]
 80055e4:	462a      	mov	r2, r5
 80055e6:	4631      	mov	r1, r6
 80055e8:	f7ff ffdd 	bl	80055a6 <_swiwrite>
 80055ec:	1e03      	subs	r3, r0, #0
 80055ee:	dbf5      	blt.n	80055dc <_write+0x16>
 80055f0:	6862      	ldr	r2, [r4, #4]
 80055f2:	1ae8      	subs	r0, r5, r3
 80055f4:	4402      	add	r2, r0
 80055f6:	42ab      	cmp	r3, r5
 80055f8:	6062      	str	r2, [r4, #4]
 80055fa:	d1f1      	bne.n	80055e0 <_write+0x1a>
 80055fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005600:	2000      	movs	r0, #0
 8005602:	f7ff bf55 	b.w	80054b0 <error>

08005606 <_swiclose>:
 8005606:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005608:	2402      	movs	r4, #2
 800560a:	9001      	str	r0, [sp, #4]
 800560c:	ad01      	add	r5, sp, #4
 800560e:	4620      	mov	r0, r4
 8005610:	4629      	mov	r1, r5
 8005612:	beab      	bkpt	0x00ab
 8005614:	4604      	mov	r4, r0
 8005616:	4620      	mov	r0, r4
 8005618:	f7ff ff58 	bl	80054cc <checkerror>
 800561c:	b003      	add	sp, #12
 800561e:	bd30      	pop	{r4, r5, pc}

08005620 <_close>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4605      	mov	r5, r0
 8005624:	f7ff ff2a 	bl	800547c <findslot>
 8005628:	4604      	mov	r4, r0
 800562a:	b930      	cbnz	r0, 800563a <_close+0x1a>
 800562c:	f000 fd6e 	bl	800610c <__errno>
 8005630:	2309      	movs	r3, #9
 8005632:	6003      	str	r3, [r0, #0]
 8005634:	f04f 30ff 	mov.w	r0, #4294967295
 8005638:	bd38      	pop	{r3, r4, r5, pc}
 800563a:	3d01      	subs	r5, #1
 800563c:	2d01      	cmp	r5, #1
 800563e:	d809      	bhi.n	8005654 <_close+0x34>
 8005640:	4b09      	ldr	r3, [pc, #36]	@ (8005668 <_close+0x48>)
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	429a      	cmp	r2, r3
 8005648:	d104      	bne.n	8005654 <_close+0x34>
 800564a:	f04f 33ff 	mov.w	r3, #4294967295
 800564e:	6003      	str	r3, [r0, #0]
 8005650:	2000      	movs	r0, #0
 8005652:	e7f1      	b.n	8005638 <_close+0x18>
 8005654:	6820      	ldr	r0, [r4, #0]
 8005656:	f7ff ffd6 	bl	8005606 <_swiclose>
 800565a:	2800      	cmp	r0, #0
 800565c:	d1ec      	bne.n	8005638 <_close+0x18>
 800565e:	f04f 33ff 	mov.w	r3, #4294967295
 8005662:	6023      	str	r3, [r4, #0]
 8005664:	e7e8      	b.n	8005638 <_close+0x18>
 8005666:	bf00      	nop
 8005668:	20004198 	.word	0x20004198

0800566c <_swistat>:
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	460c      	mov	r4, r1
 8005670:	f7ff ff04 	bl	800547c <findslot>
 8005674:	4605      	mov	r5, r0
 8005676:	b930      	cbnz	r0, 8005686 <_swistat+0x1a>
 8005678:	f000 fd48 	bl	800610c <__errno>
 800567c:	2309      	movs	r3, #9
 800567e:	6003      	str	r3, [r0, #0]
 8005680:	f04f 30ff 	mov.w	r0, #4294967295
 8005684:	bd70      	pop	{r4, r5, r6, pc}
 8005686:	6863      	ldr	r3, [r4, #4]
 8005688:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800568c:	6063      	str	r3, [r4, #4]
 800568e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005692:	64a3      	str	r3, [r4, #72]	@ 0x48
 8005694:	260c      	movs	r6, #12
 8005696:	4630      	mov	r0, r6
 8005698:	4629      	mov	r1, r5
 800569a:	beab      	bkpt	0x00ab
 800569c:	4605      	mov	r5, r0
 800569e:	4628      	mov	r0, r5
 80056a0:	f7ff ff14 	bl	80054cc <checkerror>
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	d0eb      	beq.n	8005680 <_swistat+0x14>
 80056a8:	6120      	str	r0, [r4, #16]
 80056aa:	2000      	movs	r0, #0
 80056ac:	e7ea      	b.n	8005684 <_swistat+0x18>

080056ae <_fstat>:
 80056ae:	460b      	mov	r3, r1
 80056b0:	b510      	push	{r4, lr}
 80056b2:	2100      	movs	r1, #0
 80056b4:	4604      	mov	r4, r0
 80056b6:	2258      	movs	r2, #88	@ 0x58
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 fc7b 	bl	8005fb4 <memset>
 80056be:	4601      	mov	r1, r0
 80056c0:	4620      	mov	r0, r4
 80056c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056c6:	f7ff bfd1 	b.w	800566c <_swistat>

080056ca <_stat>:
 80056ca:	b538      	push	{r3, r4, r5, lr}
 80056cc:	460d      	mov	r5, r1
 80056ce:	4604      	mov	r4, r0
 80056d0:	2258      	movs	r2, #88	@ 0x58
 80056d2:	2100      	movs	r1, #0
 80056d4:	4628      	mov	r0, r5
 80056d6:	f000 fc6d 	bl	8005fb4 <memset>
 80056da:	4620      	mov	r0, r4
 80056dc:	2100      	movs	r1, #0
 80056de:	f000 f811 	bl	8005704 <_swiopen>
 80056e2:	1c43      	adds	r3, r0, #1
 80056e4:	4604      	mov	r4, r0
 80056e6:	d00b      	beq.n	8005700 <_stat+0x36>
 80056e8:	686b      	ldr	r3, [r5, #4]
 80056ea:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80056ee:	606b      	str	r3, [r5, #4]
 80056f0:	4629      	mov	r1, r5
 80056f2:	f7ff ffbb 	bl	800566c <_swistat>
 80056f6:	4605      	mov	r5, r0
 80056f8:	4620      	mov	r0, r4
 80056fa:	f7ff ff91 	bl	8005620 <_close>
 80056fe:	462c      	mov	r4, r5
 8005700:	4620      	mov	r0, r4
 8005702:	bd38      	pop	{r3, r4, r5, pc}

08005704 <_swiopen>:
 8005704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005708:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 80057b4 <_swiopen+0xb0>
 800570c:	b096      	sub	sp, #88	@ 0x58
 800570e:	4607      	mov	r7, r0
 8005710:	460e      	mov	r6, r1
 8005712:	2400      	movs	r4, #0
 8005714:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8005718:	3301      	adds	r3, #1
 800571a:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800571e:	d032      	beq.n	8005786 <_swiopen+0x82>
 8005720:	3401      	adds	r4, #1
 8005722:	2c14      	cmp	r4, #20
 8005724:	d1f6      	bne.n	8005714 <_swiopen+0x10>
 8005726:	f000 fcf1 	bl	800610c <__errno>
 800572a:	2318      	movs	r3, #24
 800572c:	e03a      	b.n	80057a4 <_swiopen+0xa0>
 800572e:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8005732:	f240 6301 	movw	r3, #1537	@ 0x601
 8005736:	07b2      	lsls	r2, r6, #30
 8005738:	bf48      	it	mi
 800573a:	f045 0502 	orrmi.w	r5, r5, #2
 800573e:	421e      	tst	r6, r3
 8005740:	bf18      	it	ne
 8005742:	f045 0504 	orrne.w	r5, r5, #4
 8005746:	0733      	lsls	r3, r6, #28
 8005748:	bf48      	it	mi
 800574a:	f025 0504 	bicmi.w	r5, r5, #4
 800574e:	4638      	mov	r0, r7
 8005750:	bf48      	it	mi
 8005752:	f045 0508 	orrmi.w	r5, r5, #8
 8005756:	9700      	str	r7, [sp, #0]
 8005758:	f7fa fd5a 	bl	8000210 <strlen>
 800575c:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8005760:	2501      	movs	r5, #1
 8005762:	4628      	mov	r0, r5
 8005764:	4651      	mov	r1, sl
 8005766:	beab      	bkpt	0x00ab
 8005768:	4605      	mov	r5, r0
 800576a:	2d00      	cmp	r5, #0
 800576c:	db06      	blt.n	800577c <_swiopen+0x78>
 800576e:	44c8      	add	r8, r9
 8005770:	2300      	movs	r3, #0
 8005772:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8005776:	f8c8 3004 	str.w	r3, [r8, #4]
 800577a:	e016      	b.n	80057aa <_swiopen+0xa6>
 800577c:	4628      	mov	r0, r5
 800577e:	f7ff fe97 	bl	80054b0 <error>
 8005782:	4604      	mov	r4, r0
 8005784:	e011      	b.n	80057aa <_swiopen+0xa6>
 8005786:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 800578a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800578e:	46ea      	mov	sl, sp
 8005790:	d1cd      	bne.n	800572e <_swiopen+0x2a>
 8005792:	4651      	mov	r1, sl
 8005794:	4638      	mov	r0, r7
 8005796:	f7ff ff98 	bl	80056ca <_stat>
 800579a:	3001      	adds	r0, #1
 800579c:	d0c7      	beq.n	800572e <_swiopen+0x2a>
 800579e:	f000 fcb5 	bl	800610c <__errno>
 80057a2:	2311      	movs	r3, #17
 80057a4:	6003      	str	r3, [r0, #0]
 80057a6:	f04f 34ff 	mov.w	r4, #4294967295
 80057aa:	4620      	mov	r0, r4
 80057ac:	b016      	add	sp, #88	@ 0x58
 80057ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b2:	bf00      	nop
 80057b4:	20004198 	.word	0x20004198

080057b8 <_get_semihosting_exts>:
 80057b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80057bc:	4606      	mov	r6, r0
 80057be:	460f      	mov	r7, r1
 80057c0:	4829      	ldr	r0, [pc, #164]	@ (8005868 <_get_semihosting_exts+0xb0>)
 80057c2:	2100      	movs	r1, #0
 80057c4:	4615      	mov	r5, r2
 80057c6:	f7ff ff9d 	bl	8005704 <_swiopen>
 80057ca:	462a      	mov	r2, r5
 80057cc:	4604      	mov	r4, r0
 80057ce:	2100      	movs	r1, #0
 80057d0:	4630      	mov	r0, r6
 80057d2:	f000 fbef 	bl	8005fb4 <memset>
 80057d6:	1c63      	adds	r3, r4, #1
 80057d8:	d014      	beq.n	8005804 <_get_semihosting_exts+0x4c>
 80057da:	4620      	mov	r0, r4
 80057dc:	f7ff fe4e 	bl	800547c <findslot>
 80057e0:	f04f 080c 	mov.w	r8, #12
 80057e4:	4681      	mov	r9, r0
 80057e6:	4640      	mov	r0, r8
 80057e8:	4649      	mov	r1, r9
 80057ea:	beab      	bkpt	0x00ab
 80057ec:	4680      	mov	r8, r0
 80057ee:	4640      	mov	r0, r8
 80057f0:	f7ff fe6c 	bl	80054cc <checkerror>
 80057f4:	2803      	cmp	r0, #3
 80057f6:	dd02      	ble.n	80057fe <_get_semihosting_exts+0x46>
 80057f8:	1ec3      	subs	r3, r0, #3
 80057fa:	42ab      	cmp	r3, r5
 80057fc:	dc07      	bgt.n	800580e <_get_semihosting_exts+0x56>
 80057fe:	4620      	mov	r0, r4
 8005800:	f7ff ff0e 	bl	8005620 <_close>
 8005804:	f04f 30ff 	mov.w	r0, #4294967295
 8005808:	b003      	add	sp, #12
 800580a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800580e:	2204      	movs	r2, #4
 8005810:	eb0d 0102 	add.w	r1, sp, r2
 8005814:	4620      	mov	r0, r4
 8005816:	f7ff fe6e 	bl	80054f6 <_read>
 800581a:	2803      	cmp	r0, #3
 800581c:	ddef      	ble.n	80057fe <_get_semihosting_exts+0x46>
 800581e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005822:	2b53      	cmp	r3, #83	@ 0x53
 8005824:	d1eb      	bne.n	80057fe <_get_semihosting_exts+0x46>
 8005826:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800582a:	2b48      	cmp	r3, #72	@ 0x48
 800582c:	d1e7      	bne.n	80057fe <_get_semihosting_exts+0x46>
 800582e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005832:	2b46      	cmp	r3, #70	@ 0x46
 8005834:	d1e3      	bne.n	80057fe <_get_semihosting_exts+0x46>
 8005836:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800583a:	2b42      	cmp	r3, #66	@ 0x42
 800583c:	d1df      	bne.n	80057fe <_get_semihosting_exts+0x46>
 800583e:	2201      	movs	r2, #1
 8005840:	4639      	mov	r1, r7
 8005842:	4620      	mov	r0, r4
 8005844:	f7ff fe71 	bl	800552a <_swilseek>
 8005848:	2800      	cmp	r0, #0
 800584a:	dbd8      	blt.n	80057fe <_get_semihosting_exts+0x46>
 800584c:	462a      	mov	r2, r5
 800584e:	4631      	mov	r1, r6
 8005850:	4620      	mov	r0, r4
 8005852:	f7ff fe50 	bl	80054f6 <_read>
 8005856:	4605      	mov	r5, r0
 8005858:	4620      	mov	r0, r4
 800585a:	f7ff fee1 	bl	8005620 <_close>
 800585e:	4628      	mov	r0, r5
 8005860:	f7ff fe34 	bl	80054cc <checkerror>
 8005864:	e7d0      	b.n	8005808 <_get_semihosting_exts+0x50>
 8005866:	bf00      	nop
 8005868:	08006f78 	.word	0x08006f78

0800586c <initialise_semihosting_exts>:
 800586c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800586e:	4d0a      	ldr	r5, [pc, #40]	@ (8005898 <initialise_semihosting_exts+0x2c>)
 8005870:	4c0a      	ldr	r4, [pc, #40]	@ (800589c <initialise_semihosting_exts+0x30>)
 8005872:	2100      	movs	r1, #0
 8005874:	2201      	movs	r2, #1
 8005876:	a801      	add	r0, sp, #4
 8005878:	6029      	str	r1, [r5, #0]
 800587a:	6022      	str	r2, [r4, #0]
 800587c:	f7ff ff9c 	bl	80057b8 <_get_semihosting_exts>
 8005880:	2800      	cmp	r0, #0
 8005882:	dd07      	ble.n	8005894 <initialise_semihosting_exts+0x28>
 8005884:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005888:	f003 0201 	and.w	r2, r3, #1
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	602a      	str	r2, [r5, #0]
 8005892:	6023      	str	r3, [r4, #0]
 8005894:	b003      	add	sp, #12
 8005896:	bd30      	pop	{r4, r5, pc}
 8005898:	20000024 	.word	0x20000024
 800589c:	20000020 	.word	0x20000020

080058a0 <_has_ext_stdout_stderr>:
 80058a0:	b510      	push	{r4, lr}
 80058a2:	4c04      	ldr	r4, [pc, #16]	@ (80058b4 <_has_ext_stdout_stderr+0x14>)
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	da01      	bge.n	80058ae <_has_ext_stdout_stderr+0xe>
 80058aa:	f7ff ffdf 	bl	800586c <initialise_semihosting_exts>
 80058ae:	6820      	ldr	r0, [r4, #0]
 80058b0:	bd10      	pop	{r4, pc}
 80058b2:	bf00      	nop
 80058b4:	20000020 	.word	0x20000020

080058b8 <initialise_monitor_handles>:
 80058b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058bc:	b085      	sub	sp, #20
 80058be:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8005970 <initialise_monitor_handles+0xb8>
 80058c2:	f8cd 9004 	str.w	r9, [sp, #4]
 80058c6:	2303      	movs	r3, #3
 80058c8:	2400      	movs	r4, #0
 80058ca:	9303      	str	r3, [sp, #12]
 80058cc:	af01      	add	r7, sp, #4
 80058ce:	9402      	str	r4, [sp, #8]
 80058d0:	2501      	movs	r5, #1
 80058d2:	4628      	mov	r0, r5
 80058d4:	4639      	mov	r1, r7
 80058d6:	beab      	bkpt	0x00ab
 80058d8:	4605      	mov	r5, r0
 80058da:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8005974 <initialise_monitor_handles+0xbc>
 80058de:	4623      	mov	r3, r4
 80058e0:	4c20      	ldr	r4, [pc, #128]	@ (8005964 <initialise_monitor_handles+0xac>)
 80058e2:	f8c8 5000 	str.w	r5, [r8]
 80058e6:	f04f 32ff 	mov.w	r2, #4294967295
 80058ea:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80058ee:	3301      	adds	r3, #1
 80058f0:	2b14      	cmp	r3, #20
 80058f2:	d1fa      	bne.n	80058ea <initialise_monitor_handles+0x32>
 80058f4:	f7ff ffd4 	bl	80058a0 <_has_ext_stdout_stderr>
 80058f8:	4d1b      	ldr	r5, [pc, #108]	@ (8005968 <initialise_monitor_handles+0xb0>)
 80058fa:	b1d0      	cbz	r0, 8005932 <initialise_monitor_handles+0x7a>
 80058fc:	f04f 0a03 	mov.w	sl, #3
 8005900:	2304      	movs	r3, #4
 8005902:	f8cd 9004 	str.w	r9, [sp, #4]
 8005906:	2601      	movs	r6, #1
 8005908:	f8cd a00c 	str.w	sl, [sp, #12]
 800590c:	9302      	str	r3, [sp, #8]
 800590e:	4630      	mov	r0, r6
 8005910:	4639      	mov	r1, r7
 8005912:	beab      	bkpt	0x00ab
 8005914:	4683      	mov	fp, r0
 8005916:	4b15      	ldr	r3, [pc, #84]	@ (800596c <initialise_monitor_handles+0xb4>)
 8005918:	f8cd 9004 	str.w	r9, [sp, #4]
 800591c:	f8c3 b000 	str.w	fp, [r3]
 8005920:	2308      	movs	r3, #8
 8005922:	f8cd a00c 	str.w	sl, [sp, #12]
 8005926:	9302      	str	r3, [sp, #8]
 8005928:	4630      	mov	r0, r6
 800592a:	4639      	mov	r1, r7
 800592c:	beab      	bkpt	0x00ab
 800592e:	4606      	mov	r6, r0
 8005930:	602e      	str	r6, [r5, #0]
 8005932:	682b      	ldr	r3, [r5, #0]
 8005934:	3301      	adds	r3, #1
 8005936:	bf02      	ittt	eq
 8005938:	4b0c      	ldreq	r3, [pc, #48]	@ (800596c <initialise_monitor_handles+0xb4>)
 800593a:	681b      	ldreq	r3, [r3, #0]
 800593c:	602b      	streq	r3, [r5, #0]
 800593e:	2600      	movs	r6, #0
 8005940:	f8d8 3000 	ldr.w	r3, [r8]
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	6066      	str	r6, [r4, #4]
 8005948:	f7ff ffaa 	bl	80058a0 <_has_ext_stdout_stderr>
 800594c:	b130      	cbz	r0, 800595c <initialise_monitor_handles+0xa4>
 800594e:	4b07      	ldr	r3, [pc, #28]	@ (800596c <initialise_monitor_handles+0xb4>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8005956:	682b      	ldr	r3, [r5, #0]
 8005958:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800595c:	b005      	add	sp, #20
 800595e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005962:	bf00      	nop
 8005964:	20004198 	.word	0x20004198
 8005968:	2000418c 	.word	0x2000418c
 800596c:	20004190 	.word	0x20004190
 8005970:	08006f8e 	.word	0x08006f8e
 8005974:	20004194 	.word	0x20004194

08005978 <_isatty>:
 8005978:	b570      	push	{r4, r5, r6, lr}
 800597a:	f7ff fd7f 	bl	800547c <findslot>
 800597e:	2409      	movs	r4, #9
 8005980:	4605      	mov	r5, r0
 8005982:	b920      	cbnz	r0, 800598e <_isatty+0x16>
 8005984:	f000 fbc2 	bl	800610c <__errno>
 8005988:	6004      	str	r4, [r0, #0]
 800598a:	2000      	movs	r0, #0
 800598c:	bd70      	pop	{r4, r5, r6, pc}
 800598e:	4620      	mov	r0, r4
 8005990:	4629      	mov	r1, r5
 8005992:	beab      	bkpt	0x00ab
 8005994:	4604      	mov	r4, r0
 8005996:	2c01      	cmp	r4, #1
 8005998:	4620      	mov	r0, r4
 800599a:	d0f7      	beq.n	800598c <_isatty+0x14>
 800599c:	f000 fbb6 	bl	800610c <__errno>
 80059a0:	2513      	movs	r5, #19
 80059a2:	4604      	mov	r4, r0
 80059a4:	2600      	movs	r6, #0
 80059a6:	4628      	mov	r0, r5
 80059a8:	4631      	mov	r1, r6
 80059aa:	beab      	bkpt	0x00ab
 80059ac:	4605      	mov	r5, r0
 80059ae:	6025      	str	r5, [r4, #0]
 80059b0:	e7eb      	b.n	800598a <_isatty+0x12>
	...

080059b4 <__sflush_r>:
 80059b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059bc:	0716      	lsls	r6, r2, #28
 80059be:	4605      	mov	r5, r0
 80059c0:	460c      	mov	r4, r1
 80059c2:	d454      	bmi.n	8005a6e <__sflush_r+0xba>
 80059c4:	684b      	ldr	r3, [r1, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	dc02      	bgt.n	80059d0 <__sflush_r+0x1c>
 80059ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	dd48      	ble.n	8005a62 <__sflush_r+0xae>
 80059d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80059d2:	2e00      	cmp	r6, #0
 80059d4:	d045      	beq.n	8005a62 <__sflush_r+0xae>
 80059d6:	2300      	movs	r3, #0
 80059d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80059dc:	682f      	ldr	r7, [r5, #0]
 80059de:	6a21      	ldr	r1, [r4, #32]
 80059e0:	602b      	str	r3, [r5, #0]
 80059e2:	d030      	beq.n	8005a46 <__sflush_r+0x92>
 80059e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80059e6:	89a3      	ldrh	r3, [r4, #12]
 80059e8:	0759      	lsls	r1, r3, #29
 80059ea:	d505      	bpl.n	80059f8 <__sflush_r+0x44>
 80059ec:	6863      	ldr	r3, [r4, #4]
 80059ee:	1ad2      	subs	r2, r2, r3
 80059f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80059f2:	b10b      	cbz	r3, 80059f8 <__sflush_r+0x44>
 80059f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80059f6:	1ad2      	subs	r2, r2, r3
 80059f8:	2300      	movs	r3, #0
 80059fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80059fc:	6a21      	ldr	r1, [r4, #32]
 80059fe:	4628      	mov	r0, r5
 8005a00:	47b0      	blx	r6
 8005a02:	1c43      	adds	r3, r0, #1
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	d106      	bne.n	8005a16 <__sflush_r+0x62>
 8005a08:	6829      	ldr	r1, [r5, #0]
 8005a0a:	291d      	cmp	r1, #29
 8005a0c:	d82b      	bhi.n	8005a66 <__sflush_r+0xb2>
 8005a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8005ab8 <__sflush_r+0x104>)
 8005a10:	40ca      	lsrs	r2, r1
 8005a12:	07d6      	lsls	r6, r2, #31
 8005a14:	d527      	bpl.n	8005a66 <__sflush_r+0xb2>
 8005a16:	2200      	movs	r2, #0
 8005a18:	6062      	str	r2, [r4, #4]
 8005a1a:	04d9      	lsls	r1, r3, #19
 8005a1c:	6922      	ldr	r2, [r4, #16]
 8005a1e:	6022      	str	r2, [r4, #0]
 8005a20:	d504      	bpl.n	8005a2c <__sflush_r+0x78>
 8005a22:	1c42      	adds	r2, r0, #1
 8005a24:	d101      	bne.n	8005a2a <__sflush_r+0x76>
 8005a26:	682b      	ldr	r3, [r5, #0]
 8005a28:	b903      	cbnz	r3, 8005a2c <__sflush_r+0x78>
 8005a2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005a2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a2e:	602f      	str	r7, [r5, #0]
 8005a30:	b1b9      	cbz	r1, 8005a62 <__sflush_r+0xae>
 8005a32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a36:	4299      	cmp	r1, r3
 8005a38:	d002      	beq.n	8005a40 <__sflush_r+0x8c>
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f000 fba2 	bl	8006184 <_free_r>
 8005a40:	2300      	movs	r3, #0
 8005a42:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a44:	e00d      	b.n	8005a62 <__sflush_r+0xae>
 8005a46:	2301      	movs	r3, #1
 8005a48:	4628      	mov	r0, r5
 8005a4a:	47b0      	blx	r6
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	1c50      	adds	r0, r2, #1
 8005a50:	d1c9      	bne.n	80059e6 <__sflush_r+0x32>
 8005a52:	682b      	ldr	r3, [r5, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0c6      	beq.n	80059e6 <__sflush_r+0x32>
 8005a58:	2b1d      	cmp	r3, #29
 8005a5a:	d001      	beq.n	8005a60 <__sflush_r+0xac>
 8005a5c:	2b16      	cmp	r3, #22
 8005a5e:	d11e      	bne.n	8005a9e <__sflush_r+0xea>
 8005a60:	602f      	str	r7, [r5, #0]
 8005a62:	2000      	movs	r0, #0
 8005a64:	e022      	b.n	8005aac <__sflush_r+0xf8>
 8005a66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a6a:	b21b      	sxth	r3, r3
 8005a6c:	e01b      	b.n	8005aa6 <__sflush_r+0xf2>
 8005a6e:	690f      	ldr	r7, [r1, #16]
 8005a70:	2f00      	cmp	r7, #0
 8005a72:	d0f6      	beq.n	8005a62 <__sflush_r+0xae>
 8005a74:	0793      	lsls	r3, r2, #30
 8005a76:	680e      	ldr	r6, [r1, #0]
 8005a78:	bf08      	it	eq
 8005a7a:	694b      	ldreq	r3, [r1, #20]
 8005a7c:	600f      	str	r7, [r1, #0]
 8005a7e:	bf18      	it	ne
 8005a80:	2300      	movne	r3, #0
 8005a82:	eba6 0807 	sub.w	r8, r6, r7
 8005a86:	608b      	str	r3, [r1, #8]
 8005a88:	f1b8 0f00 	cmp.w	r8, #0
 8005a8c:	dde9      	ble.n	8005a62 <__sflush_r+0xae>
 8005a8e:	6a21      	ldr	r1, [r4, #32]
 8005a90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005a92:	4643      	mov	r3, r8
 8005a94:	463a      	mov	r2, r7
 8005a96:	4628      	mov	r0, r5
 8005a98:	47b0      	blx	r6
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	dc08      	bgt.n	8005ab0 <__sflush_r+0xfc>
 8005a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005aa6:	81a3      	strh	r3, [r4, #12]
 8005aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab0:	4407      	add	r7, r0
 8005ab2:	eba8 0800 	sub.w	r8, r8, r0
 8005ab6:	e7e7      	b.n	8005a88 <__sflush_r+0xd4>
 8005ab8:	20400001 	.word	0x20400001

08005abc <_fflush_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	690b      	ldr	r3, [r1, #16]
 8005ac0:	4605      	mov	r5, r0
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	b913      	cbnz	r3, 8005acc <_fflush_r+0x10>
 8005ac6:	2500      	movs	r5, #0
 8005ac8:	4628      	mov	r0, r5
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
 8005acc:	b118      	cbz	r0, 8005ad6 <_fflush_r+0x1a>
 8005ace:	6a03      	ldr	r3, [r0, #32]
 8005ad0:	b90b      	cbnz	r3, 8005ad6 <_fflush_r+0x1a>
 8005ad2:	f000 f8bb 	bl	8005c4c <__sinit>
 8005ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0f3      	beq.n	8005ac6 <_fflush_r+0xa>
 8005ade:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ae0:	07d0      	lsls	r0, r2, #31
 8005ae2:	d404      	bmi.n	8005aee <_fflush_r+0x32>
 8005ae4:	0599      	lsls	r1, r3, #22
 8005ae6:	d402      	bmi.n	8005aee <_fflush_r+0x32>
 8005ae8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005aea:	f000 fb3a 	bl	8006162 <__retarget_lock_acquire_recursive>
 8005aee:	4628      	mov	r0, r5
 8005af0:	4621      	mov	r1, r4
 8005af2:	f7ff ff5f 	bl	80059b4 <__sflush_r>
 8005af6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005af8:	07da      	lsls	r2, r3, #31
 8005afa:	4605      	mov	r5, r0
 8005afc:	d4e4      	bmi.n	8005ac8 <_fflush_r+0xc>
 8005afe:	89a3      	ldrh	r3, [r4, #12]
 8005b00:	059b      	lsls	r3, r3, #22
 8005b02:	d4e1      	bmi.n	8005ac8 <_fflush_r+0xc>
 8005b04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b06:	f000 fb2d 	bl	8006164 <__retarget_lock_release_recursive>
 8005b0a:	e7dd      	b.n	8005ac8 <_fflush_r+0xc>

08005b0c <fflush>:
 8005b0c:	4601      	mov	r1, r0
 8005b0e:	b920      	cbnz	r0, 8005b1a <fflush+0xe>
 8005b10:	4a04      	ldr	r2, [pc, #16]	@ (8005b24 <fflush+0x18>)
 8005b12:	4905      	ldr	r1, [pc, #20]	@ (8005b28 <fflush+0x1c>)
 8005b14:	4805      	ldr	r0, [pc, #20]	@ (8005b2c <fflush+0x20>)
 8005b16:	f000 b8b1 	b.w	8005c7c <_fwalk_sglue>
 8005b1a:	4b05      	ldr	r3, [pc, #20]	@ (8005b30 <fflush+0x24>)
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	f7ff bfcd 	b.w	8005abc <_fflush_r>
 8005b22:	bf00      	nop
 8005b24:	20000028 	.word	0x20000028
 8005b28:	08005abd 	.word	0x08005abd
 8005b2c:	20000038 	.word	0x20000038
 8005b30:	20000034 	.word	0x20000034

08005b34 <std>:
 8005b34:	2300      	movs	r3, #0
 8005b36:	b510      	push	{r4, lr}
 8005b38:	4604      	mov	r4, r0
 8005b3a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b42:	6083      	str	r3, [r0, #8]
 8005b44:	8181      	strh	r1, [r0, #12]
 8005b46:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b48:	81c2      	strh	r2, [r0, #14]
 8005b4a:	6183      	str	r3, [r0, #24]
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	2208      	movs	r2, #8
 8005b50:	305c      	adds	r0, #92	@ 0x5c
 8005b52:	f000 fa2f 	bl	8005fb4 <memset>
 8005b56:	4b0d      	ldr	r3, [pc, #52]	@ (8005b8c <std+0x58>)
 8005b58:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b90 <std+0x5c>)
 8005b5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b94 <std+0x60>)
 8005b60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b62:	4b0d      	ldr	r3, [pc, #52]	@ (8005b98 <std+0x64>)
 8005b64:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b66:	4b0d      	ldr	r3, [pc, #52]	@ (8005b9c <std+0x68>)
 8005b68:	6224      	str	r4, [r4, #32]
 8005b6a:	429c      	cmp	r4, r3
 8005b6c:	d006      	beq.n	8005b7c <std+0x48>
 8005b6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b72:	4294      	cmp	r4, r2
 8005b74:	d002      	beq.n	8005b7c <std+0x48>
 8005b76:	33d0      	adds	r3, #208	@ 0xd0
 8005b78:	429c      	cmp	r4, r3
 8005b7a:	d105      	bne.n	8005b88 <std+0x54>
 8005b7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b84:	f000 baec 	b.w	8006160 <__retarget_lock_init_recursive>
 8005b88:	bd10      	pop	{r4, pc}
 8005b8a:	bf00      	nop
 8005b8c:	08005e05 	.word	0x08005e05
 8005b90:	08005e27 	.word	0x08005e27
 8005b94:	08005e5f 	.word	0x08005e5f
 8005b98:	08005e83 	.word	0x08005e83
 8005b9c:	20004238 	.word	0x20004238

08005ba0 <stdio_exit_handler>:
 8005ba0:	4a02      	ldr	r2, [pc, #8]	@ (8005bac <stdio_exit_handler+0xc>)
 8005ba2:	4903      	ldr	r1, [pc, #12]	@ (8005bb0 <stdio_exit_handler+0x10>)
 8005ba4:	4803      	ldr	r0, [pc, #12]	@ (8005bb4 <stdio_exit_handler+0x14>)
 8005ba6:	f000 b869 	b.w	8005c7c <_fwalk_sglue>
 8005baa:	bf00      	nop
 8005bac:	20000028 	.word	0x20000028
 8005bb0:	08005abd 	.word	0x08005abd
 8005bb4:	20000038 	.word	0x20000038

08005bb8 <cleanup_stdio>:
 8005bb8:	6841      	ldr	r1, [r0, #4]
 8005bba:	4b0c      	ldr	r3, [pc, #48]	@ (8005bec <cleanup_stdio+0x34>)
 8005bbc:	4299      	cmp	r1, r3
 8005bbe:	b510      	push	{r4, lr}
 8005bc0:	4604      	mov	r4, r0
 8005bc2:	d001      	beq.n	8005bc8 <cleanup_stdio+0x10>
 8005bc4:	f7ff ff7a 	bl	8005abc <_fflush_r>
 8005bc8:	68a1      	ldr	r1, [r4, #8]
 8005bca:	4b09      	ldr	r3, [pc, #36]	@ (8005bf0 <cleanup_stdio+0x38>)
 8005bcc:	4299      	cmp	r1, r3
 8005bce:	d002      	beq.n	8005bd6 <cleanup_stdio+0x1e>
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f7ff ff73 	bl	8005abc <_fflush_r>
 8005bd6:	68e1      	ldr	r1, [r4, #12]
 8005bd8:	4b06      	ldr	r3, [pc, #24]	@ (8005bf4 <cleanup_stdio+0x3c>)
 8005bda:	4299      	cmp	r1, r3
 8005bdc:	d004      	beq.n	8005be8 <cleanup_stdio+0x30>
 8005bde:	4620      	mov	r0, r4
 8005be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005be4:	f7ff bf6a 	b.w	8005abc <_fflush_r>
 8005be8:	bd10      	pop	{r4, pc}
 8005bea:	bf00      	nop
 8005bec:	20004238 	.word	0x20004238
 8005bf0:	200042a0 	.word	0x200042a0
 8005bf4:	20004308 	.word	0x20004308

08005bf8 <global_stdio_init.part.0>:
 8005bf8:	b510      	push	{r4, lr}
 8005bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8005c28 <global_stdio_init.part.0+0x30>)
 8005bfc:	4c0b      	ldr	r4, [pc, #44]	@ (8005c2c <global_stdio_init.part.0+0x34>)
 8005bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8005c30 <global_stdio_init.part.0+0x38>)
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	4620      	mov	r0, r4
 8005c04:	2200      	movs	r2, #0
 8005c06:	2104      	movs	r1, #4
 8005c08:	f7ff ff94 	bl	8005b34 <std>
 8005c0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c10:	2201      	movs	r2, #1
 8005c12:	2109      	movs	r1, #9
 8005c14:	f7ff ff8e 	bl	8005b34 <std>
 8005c18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c22:	2112      	movs	r1, #18
 8005c24:	f7ff bf86 	b.w	8005b34 <std>
 8005c28:	20004370 	.word	0x20004370
 8005c2c:	20004238 	.word	0x20004238
 8005c30:	08005ba1 	.word	0x08005ba1

08005c34 <__sfp_lock_acquire>:
 8005c34:	4801      	ldr	r0, [pc, #4]	@ (8005c3c <__sfp_lock_acquire+0x8>)
 8005c36:	f000 ba94 	b.w	8006162 <__retarget_lock_acquire_recursive>
 8005c3a:	bf00      	nop
 8005c3c:	20004379 	.word	0x20004379

08005c40 <__sfp_lock_release>:
 8005c40:	4801      	ldr	r0, [pc, #4]	@ (8005c48 <__sfp_lock_release+0x8>)
 8005c42:	f000 ba8f 	b.w	8006164 <__retarget_lock_release_recursive>
 8005c46:	bf00      	nop
 8005c48:	20004379 	.word	0x20004379

08005c4c <__sinit>:
 8005c4c:	b510      	push	{r4, lr}
 8005c4e:	4604      	mov	r4, r0
 8005c50:	f7ff fff0 	bl	8005c34 <__sfp_lock_acquire>
 8005c54:	6a23      	ldr	r3, [r4, #32]
 8005c56:	b11b      	cbz	r3, 8005c60 <__sinit+0x14>
 8005c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c5c:	f7ff bff0 	b.w	8005c40 <__sfp_lock_release>
 8005c60:	4b04      	ldr	r3, [pc, #16]	@ (8005c74 <__sinit+0x28>)
 8005c62:	6223      	str	r3, [r4, #32]
 8005c64:	4b04      	ldr	r3, [pc, #16]	@ (8005c78 <__sinit+0x2c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1f5      	bne.n	8005c58 <__sinit+0xc>
 8005c6c:	f7ff ffc4 	bl	8005bf8 <global_stdio_init.part.0>
 8005c70:	e7f2      	b.n	8005c58 <__sinit+0xc>
 8005c72:	bf00      	nop
 8005c74:	08005bb9 	.word	0x08005bb9
 8005c78:	20004370 	.word	0x20004370

08005c7c <_fwalk_sglue>:
 8005c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c80:	4607      	mov	r7, r0
 8005c82:	4688      	mov	r8, r1
 8005c84:	4614      	mov	r4, r2
 8005c86:	2600      	movs	r6, #0
 8005c88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c8c:	f1b9 0901 	subs.w	r9, r9, #1
 8005c90:	d505      	bpl.n	8005c9e <_fwalk_sglue+0x22>
 8005c92:	6824      	ldr	r4, [r4, #0]
 8005c94:	2c00      	cmp	r4, #0
 8005c96:	d1f7      	bne.n	8005c88 <_fwalk_sglue+0xc>
 8005c98:	4630      	mov	r0, r6
 8005c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c9e:	89ab      	ldrh	r3, [r5, #12]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d907      	bls.n	8005cb4 <_fwalk_sglue+0x38>
 8005ca4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	d003      	beq.n	8005cb4 <_fwalk_sglue+0x38>
 8005cac:	4629      	mov	r1, r5
 8005cae:	4638      	mov	r0, r7
 8005cb0:	47c0      	blx	r8
 8005cb2:	4306      	orrs	r6, r0
 8005cb4:	3568      	adds	r5, #104	@ 0x68
 8005cb6:	e7e9      	b.n	8005c8c <_fwalk_sglue+0x10>

08005cb8 <iprintf>:
 8005cb8:	b40f      	push	{r0, r1, r2, r3}
 8005cba:	b507      	push	{r0, r1, r2, lr}
 8005cbc:	4906      	ldr	r1, [pc, #24]	@ (8005cd8 <iprintf+0x20>)
 8005cbe:	ab04      	add	r3, sp, #16
 8005cc0:	6808      	ldr	r0, [r1, #0]
 8005cc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cc6:	6881      	ldr	r1, [r0, #8]
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	f000 fcd5 	bl	8006678 <_vfiprintf_r>
 8005cce:	b003      	add	sp, #12
 8005cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cd4:	b004      	add	sp, #16
 8005cd6:	4770      	bx	lr
 8005cd8:	20000034 	.word	0x20000034

08005cdc <_puts_r>:
 8005cdc:	6a03      	ldr	r3, [r0, #32]
 8005cde:	b570      	push	{r4, r5, r6, lr}
 8005ce0:	6884      	ldr	r4, [r0, #8]
 8005ce2:	4605      	mov	r5, r0
 8005ce4:	460e      	mov	r6, r1
 8005ce6:	b90b      	cbnz	r3, 8005cec <_puts_r+0x10>
 8005ce8:	f7ff ffb0 	bl	8005c4c <__sinit>
 8005cec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cee:	07db      	lsls	r3, r3, #31
 8005cf0:	d405      	bmi.n	8005cfe <_puts_r+0x22>
 8005cf2:	89a3      	ldrh	r3, [r4, #12]
 8005cf4:	0598      	lsls	r0, r3, #22
 8005cf6:	d402      	bmi.n	8005cfe <_puts_r+0x22>
 8005cf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cfa:	f000 fa32 	bl	8006162 <__retarget_lock_acquire_recursive>
 8005cfe:	89a3      	ldrh	r3, [r4, #12]
 8005d00:	0719      	lsls	r1, r3, #28
 8005d02:	d502      	bpl.n	8005d0a <_puts_r+0x2e>
 8005d04:	6923      	ldr	r3, [r4, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d135      	bne.n	8005d76 <_puts_r+0x9a>
 8005d0a:	4621      	mov	r1, r4
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	f000 f8fb 	bl	8005f08 <__swsetup_r>
 8005d12:	b380      	cbz	r0, 8005d76 <_puts_r+0x9a>
 8005d14:	f04f 35ff 	mov.w	r5, #4294967295
 8005d18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d1a:	07da      	lsls	r2, r3, #31
 8005d1c:	d405      	bmi.n	8005d2a <_puts_r+0x4e>
 8005d1e:	89a3      	ldrh	r3, [r4, #12]
 8005d20:	059b      	lsls	r3, r3, #22
 8005d22:	d402      	bmi.n	8005d2a <_puts_r+0x4e>
 8005d24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d26:	f000 fa1d 	bl	8006164 <__retarget_lock_release_recursive>
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	bd70      	pop	{r4, r5, r6, pc}
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	da04      	bge.n	8005d3c <_puts_r+0x60>
 8005d32:	69a2      	ldr	r2, [r4, #24]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	dc17      	bgt.n	8005d68 <_puts_r+0x8c>
 8005d38:	290a      	cmp	r1, #10
 8005d3a:	d015      	beq.n	8005d68 <_puts_r+0x8c>
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	6022      	str	r2, [r4, #0]
 8005d42:	7019      	strb	r1, [r3, #0]
 8005d44:	68a3      	ldr	r3, [r4, #8]
 8005d46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	60a3      	str	r3, [r4, #8]
 8005d4e:	2900      	cmp	r1, #0
 8005d50:	d1ed      	bne.n	8005d2e <_puts_r+0x52>
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	da11      	bge.n	8005d7a <_puts_r+0x9e>
 8005d56:	4622      	mov	r2, r4
 8005d58:	210a      	movs	r1, #10
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	f000 f895 	bl	8005e8a <__swbuf_r>
 8005d60:	3001      	adds	r0, #1
 8005d62:	d0d7      	beq.n	8005d14 <_puts_r+0x38>
 8005d64:	250a      	movs	r5, #10
 8005d66:	e7d7      	b.n	8005d18 <_puts_r+0x3c>
 8005d68:	4622      	mov	r2, r4
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	f000 f88d 	bl	8005e8a <__swbuf_r>
 8005d70:	3001      	adds	r0, #1
 8005d72:	d1e7      	bne.n	8005d44 <_puts_r+0x68>
 8005d74:	e7ce      	b.n	8005d14 <_puts_r+0x38>
 8005d76:	3e01      	subs	r6, #1
 8005d78:	e7e4      	b.n	8005d44 <_puts_r+0x68>
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	6022      	str	r2, [r4, #0]
 8005d80:	220a      	movs	r2, #10
 8005d82:	701a      	strb	r2, [r3, #0]
 8005d84:	e7ee      	b.n	8005d64 <_puts_r+0x88>
	...

08005d88 <puts>:
 8005d88:	4b02      	ldr	r3, [pc, #8]	@ (8005d94 <puts+0xc>)
 8005d8a:	4601      	mov	r1, r0
 8005d8c:	6818      	ldr	r0, [r3, #0]
 8005d8e:	f7ff bfa5 	b.w	8005cdc <_puts_r>
 8005d92:	bf00      	nop
 8005d94:	20000034 	.word	0x20000034

08005d98 <sniprintf>:
 8005d98:	b40c      	push	{r2, r3}
 8005d9a:	b530      	push	{r4, r5, lr}
 8005d9c:	4b18      	ldr	r3, [pc, #96]	@ (8005e00 <sniprintf+0x68>)
 8005d9e:	1e0c      	subs	r4, r1, #0
 8005da0:	681d      	ldr	r5, [r3, #0]
 8005da2:	b09d      	sub	sp, #116	@ 0x74
 8005da4:	da08      	bge.n	8005db8 <sniprintf+0x20>
 8005da6:	238b      	movs	r3, #139	@ 0x8b
 8005da8:	602b      	str	r3, [r5, #0]
 8005daa:	f04f 30ff 	mov.w	r0, #4294967295
 8005dae:	b01d      	add	sp, #116	@ 0x74
 8005db0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005db4:	b002      	add	sp, #8
 8005db6:	4770      	bx	lr
 8005db8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005dbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005dc0:	f04f 0300 	mov.w	r3, #0
 8005dc4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005dc6:	bf14      	ite	ne
 8005dc8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005dcc:	4623      	moveq	r3, r4
 8005dce:	9304      	str	r3, [sp, #16]
 8005dd0:	9307      	str	r3, [sp, #28]
 8005dd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005dd6:	9002      	str	r0, [sp, #8]
 8005dd8:	9006      	str	r0, [sp, #24]
 8005dda:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005dde:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005de0:	ab21      	add	r3, sp, #132	@ 0x84
 8005de2:	a902      	add	r1, sp, #8
 8005de4:	4628      	mov	r0, r5
 8005de6:	9301      	str	r3, [sp, #4]
 8005de8:	f000 fb20 	bl	800642c <_svfiprintf_r>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	bfbc      	itt	lt
 8005df0:	238b      	movlt	r3, #139	@ 0x8b
 8005df2:	602b      	strlt	r3, [r5, #0]
 8005df4:	2c00      	cmp	r4, #0
 8005df6:	d0da      	beq.n	8005dae <sniprintf+0x16>
 8005df8:	9b02      	ldr	r3, [sp, #8]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	701a      	strb	r2, [r3, #0]
 8005dfe:	e7d6      	b.n	8005dae <sniprintf+0x16>
 8005e00:	20000034 	.word	0x20000034

08005e04 <__sread>:
 8005e04:	b510      	push	{r4, lr}
 8005e06:	460c      	mov	r4, r1
 8005e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e0c:	f000 f95a 	bl	80060c4 <_read_r>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	bfab      	itete	ge
 8005e14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e16:	89a3      	ldrhlt	r3, [r4, #12]
 8005e18:	181b      	addge	r3, r3, r0
 8005e1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e1e:	bfac      	ite	ge
 8005e20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e22:	81a3      	strhlt	r3, [r4, #12]
 8005e24:	bd10      	pop	{r4, pc}

08005e26 <__swrite>:
 8005e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e2a:	461f      	mov	r7, r3
 8005e2c:	898b      	ldrh	r3, [r1, #12]
 8005e2e:	05db      	lsls	r3, r3, #23
 8005e30:	4605      	mov	r5, r0
 8005e32:	460c      	mov	r4, r1
 8005e34:	4616      	mov	r6, r2
 8005e36:	d505      	bpl.n	8005e44 <__swrite+0x1e>
 8005e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f000 f92e 	bl	80060a0 <_lseek_r>
 8005e44:	89a3      	ldrh	r3, [r4, #12]
 8005e46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e4e:	81a3      	strh	r3, [r4, #12]
 8005e50:	4632      	mov	r2, r6
 8005e52:	463b      	mov	r3, r7
 8005e54:	4628      	mov	r0, r5
 8005e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e5a:	f000 b945 	b.w	80060e8 <_write_r>

08005e5e <__sseek>:
 8005e5e:	b510      	push	{r4, lr}
 8005e60:	460c      	mov	r4, r1
 8005e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e66:	f000 f91b 	bl	80060a0 <_lseek_r>
 8005e6a:	1c43      	adds	r3, r0, #1
 8005e6c:	89a3      	ldrh	r3, [r4, #12]
 8005e6e:	bf15      	itete	ne
 8005e70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e7a:	81a3      	strheq	r3, [r4, #12]
 8005e7c:	bf18      	it	ne
 8005e7e:	81a3      	strhne	r3, [r4, #12]
 8005e80:	bd10      	pop	{r4, pc}

08005e82 <__sclose>:
 8005e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e86:	f000 b89d 	b.w	8005fc4 <_close_r>

08005e8a <__swbuf_r>:
 8005e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8c:	460e      	mov	r6, r1
 8005e8e:	4614      	mov	r4, r2
 8005e90:	4605      	mov	r5, r0
 8005e92:	b118      	cbz	r0, 8005e9c <__swbuf_r+0x12>
 8005e94:	6a03      	ldr	r3, [r0, #32]
 8005e96:	b90b      	cbnz	r3, 8005e9c <__swbuf_r+0x12>
 8005e98:	f7ff fed8 	bl	8005c4c <__sinit>
 8005e9c:	69a3      	ldr	r3, [r4, #24]
 8005e9e:	60a3      	str	r3, [r4, #8]
 8005ea0:	89a3      	ldrh	r3, [r4, #12]
 8005ea2:	071a      	lsls	r2, r3, #28
 8005ea4:	d501      	bpl.n	8005eaa <__swbuf_r+0x20>
 8005ea6:	6923      	ldr	r3, [r4, #16]
 8005ea8:	b943      	cbnz	r3, 8005ebc <__swbuf_r+0x32>
 8005eaa:	4621      	mov	r1, r4
 8005eac:	4628      	mov	r0, r5
 8005eae:	f000 f82b 	bl	8005f08 <__swsetup_r>
 8005eb2:	b118      	cbz	r0, 8005ebc <__swbuf_r+0x32>
 8005eb4:	f04f 37ff 	mov.w	r7, #4294967295
 8005eb8:	4638      	mov	r0, r7
 8005eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ebc:	6823      	ldr	r3, [r4, #0]
 8005ebe:	6922      	ldr	r2, [r4, #16]
 8005ec0:	1a98      	subs	r0, r3, r2
 8005ec2:	6963      	ldr	r3, [r4, #20]
 8005ec4:	b2f6      	uxtb	r6, r6
 8005ec6:	4283      	cmp	r3, r0
 8005ec8:	4637      	mov	r7, r6
 8005eca:	dc05      	bgt.n	8005ed8 <__swbuf_r+0x4e>
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f7ff fdf4 	bl	8005abc <_fflush_r>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d1ed      	bne.n	8005eb4 <__swbuf_r+0x2a>
 8005ed8:	68a3      	ldr	r3, [r4, #8]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	60a3      	str	r3, [r4, #8]
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	6022      	str	r2, [r4, #0]
 8005ee4:	701e      	strb	r6, [r3, #0]
 8005ee6:	6962      	ldr	r2, [r4, #20]
 8005ee8:	1c43      	adds	r3, r0, #1
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d004      	beq.n	8005ef8 <__swbuf_r+0x6e>
 8005eee:	89a3      	ldrh	r3, [r4, #12]
 8005ef0:	07db      	lsls	r3, r3, #31
 8005ef2:	d5e1      	bpl.n	8005eb8 <__swbuf_r+0x2e>
 8005ef4:	2e0a      	cmp	r6, #10
 8005ef6:	d1df      	bne.n	8005eb8 <__swbuf_r+0x2e>
 8005ef8:	4621      	mov	r1, r4
 8005efa:	4628      	mov	r0, r5
 8005efc:	f7ff fdde 	bl	8005abc <_fflush_r>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	d0d9      	beq.n	8005eb8 <__swbuf_r+0x2e>
 8005f04:	e7d6      	b.n	8005eb4 <__swbuf_r+0x2a>
	...

08005f08 <__swsetup_r>:
 8005f08:	b538      	push	{r3, r4, r5, lr}
 8005f0a:	4b29      	ldr	r3, [pc, #164]	@ (8005fb0 <__swsetup_r+0xa8>)
 8005f0c:	4605      	mov	r5, r0
 8005f0e:	6818      	ldr	r0, [r3, #0]
 8005f10:	460c      	mov	r4, r1
 8005f12:	b118      	cbz	r0, 8005f1c <__swsetup_r+0x14>
 8005f14:	6a03      	ldr	r3, [r0, #32]
 8005f16:	b90b      	cbnz	r3, 8005f1c <__swsetup_r+0x14>
 8005f18:	f7ff fe98 	bl	8005c4c <__sinit>
 8005f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f20:	0719      	lsls	r1, r3, #28
 8005f22:	d422      	bmi.n	8005f6a <__swsetup_r+0x62>
 8005f24:	06da      	lsls	r2, r3, #27
 8005f26:	d407      	bmi.n	8005f38 <__swsetup_r+0x30>
 8005f28:	2209      	movs	r2, #9
 8005f2a:	602a      	str	r2, [r5, #0]
 8005f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f30:	81a3      	strh	r3, [r4, #12]
 8005f32:	f04f 30ff 	mov.w	r0, #4294967295
 8005f36:	e033      	b.n	8005fa0 <__swsetup_r+0x98>
 8005f38:	0758      	lsls	r0, r3, #29
 8005f3a:	d512      	bpl.n	8005f62 <__swsetup_r+0x5a>
 8005f3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f3e:	b141      	cbz	r1, 8005f52 <__swsetup_r+0x4a>
 8005f40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f44:	4299      	cmp	r1, r3
 8005f46:	d002      	beq.n	8005f4e <__swsetup_r+0x46>
 8005f48:	4628      	mov	r0, r5
 8005f4a:	f000 f91b 	bl	8006184 <_free_r>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f52:	89a3      	ldrh	r3, [r4, #12]
 8005f54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f58:	81a3      	strh	r3, [r4, #12]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	6063      	str	r3, [r4, #4]
 8005f5e:	6923      	ldr	r3, [r4, #16]
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	89a3      	ldrh	r3, [r4, #12]
 8005f64:	f043 0308 	orr.w	r3, r3, #8
 8005f68:	81a3      	strh	r3, [r4, #12]
 8005f6a:	6923      	ldr	r3, [r4, #16]
 8005f6c:	b94b      	cbnz	r3, 8005f82 <__swsetup_r+0x7a>
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f78:	d003      	beq.n	8005f82 <__swsetup_r+0x7a>
 8005f7a:	4621      	mov	r1, r4
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	f000 fe45 	bl	8006c0c <__smakebuf_r>
 8005f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f86:	f013 0201 	ands.w	r2, r3, #1
 8005f8a:	d00a      	beq.n	8005fa2 <__swsetup_r+0x9a>
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	60a2      	str	r2, [r4, #8]
 8005f90:	6962      	ldr	r2, [r4, #20]
 8005f92:	4252      	negs	r2, r2
 8005f94:	61a2      	str	r2, [r4, #24]
 8005f96:	6922      	ldr	r2, [r4, #16]
 8005f98:	b942      	cbnz	r2, 8005fac <__swsetup_r+0xa4>
 8005f9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f9e:	d1c5      	bne.n	8005f2c <__swsetup_r+0x24>
 8005fa0:	bd38      	pop	{r3, r4, r5, pc}
 8005fa2:	0799      	lsls	r1, r3, #30
 8005fa4:	bf58      	it	pl
 8005fa6:	6962      	ldrpl	r2, [r4, #20]
 8005fa8:	60a2      	str	r2, [r4, #8]
 8005faa:	e7f4      	b.n	8005f96 <__swsetup_r+0x8e>
 8005fac:	2000      	movs	r0, #0
 8005fae:	e7f7      	b.n	8005fa0 <__swsetup_r+0x98>
 8005fb0:	20000034 	.word	0x20000034

08005fb4 <memset>:
 8005fb4:	4402      	add	r2, r0
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d100      	bne.n	8005fbe <memset+0xa>
 8005fbc:	4770      	bx	lr
 8005fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8005fc2:	e7f9      	b.n	8005fb8 <memset+0x4>

08005fc4 <_close_r>:
 8005fc4:	b538      	push	{r3, r4, r5, lr}
 8005fc6:	4d06      	ldr	r5, [pc, #24]	@ (8005fe0 <_close_r+0x1c>)
 8005fc8:	2300      	movs	r3, #0
 8005fca:	4604      	mov	r4, r0
 8005fcc:	4608      	mov	r0, r1
 8005fce:	602b      	str	r3, [r5, #0]
 8005fd0:	f7ff fb26 	bl	8005620 <_close>
 8005fd4:	1c43      	adds	r3, r0, #1
 8005fd6:	d102      	bne.n	8005fde <_close_r+0x1a>
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	b103      	cbz	r3, 8005fde <_close_r+0x1a>
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	bd38      	pop	{r3, r4, r5, pc}
 8005fe0:	20004374 	.word	0x20004374

08005fe4 <_reclaim_reent>:
 8005fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800609c <_reclaim_reent+0xb8>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4283      	cmp	r3, r0
 8005fea:	b570      	push	{r4, r5, r6, lr}
 8005fec:	4604      	mov	r4, r0
 8005fee:	d053      	beq.n	8006098 <_reclaim_reent+0xb4>
 8005ff0:	69c3      	ldr	r3, [r0, #28]
 8005ff2:	b31b      	cbz	r3, 800603c <_reclaim_reent+0x58>
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	b163      	cbz	r3, 8006012 <_reclaim_reent+0x2e>
 8005ff8:	2500      	movs	r5, #0
 8005ffa:	69e3      	ldr	r3, [r4, #28]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	5959      	ldr	r1, [r3, r5]
 8006000:	b9b1      	cbnz	r1, 8006030 <_reclaim_reent+0x4c>
 8006002:	3504      	adds	r5, #4
 8006004:	2d80      	cmp	r5, #128	@ 0x80
 8006006:	d1f8      	bne.n	8005ffa <_reclaim_reent+0x16>
 8006008:	69e3      	ldr	r3, [r4, #28]
 800600a:	4620      	mov	r0, r4
 800600c:	68d9      	ldr	r1, [r3, #12]
 800600e:	f000 f8b9 	bl	8006184 <_free_r>
 8006012:	69e3      	ldr	r3, [r4, #28]
 8006014:	6819      	ldr	r1, [r3, #0]
 8006016:	b111      	cbz	r1, 800601e <_reclaim_reent+0x3a>
 8006018:	4620      	mov	r0, r4
 800601a:	f000 f8b3 	bl	8006184 <_free_r>
 800601e:	69e3      	ldr	r3, [r4, #28]
 8006020:	689d      	ldr	r5, [r3, #8]
 8006022:	b15d      	cbz	r5, 800603c <_reclaim_reent+0x58>
 8006024:	4629      	mov	r1, r5
 8006026:	4620      	mov	r0, r4
 8006028:	682d      	ldr	r5, [r5, #0]
 800602a:	f000 f8ab 	bl	8006184 <_free_r>
 800602e:	e7f8      	b.n	8006022 <_reclaim_reent+0x3e>
 8006030:	680e      	ldr	r6, [r1, #0]
 8006032:	4620      	mov	r0, r4
 8006034:	f000 f8a6 	bl	8006184 <_free_r>
 8006038:	4631      	mov	r1, r6
 800603a:	e7e1      	b.n	8006000 <_reclaim_reent+0x1c>
 800603c:	6961      	ldr	r1, [r4, #20]
 800603e:	b111      	cbz	r1, 8006046 <_reclaim_reent+0x62>
 8006040:	4620      	mov	r0, r4
 8006042:	f000 f89f 	bl	8006184 <_free_r>
 8006046:	69e1      	ldr	r1, [r4, #28]
 8006048:	b111      	cbz	r1, 8006050 <_reclaim_reent+0x6c>
 800604a:	4620      	mov	r0, r4
 800604c:	f000 f89a 	bl	8006184 <_free_r>
 8006050:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006052:	b111      	cbz	r1, 800605a <_reclaim_reent+0x76>
 8006054:	4620      	mov	r0, r4
 8006056:	f000 f895 	bl	8006184 <_free_r>
 800605a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800605c:	b111      	cbz	r1, 8006064 <_reclaim_reent+0x80>
 800605e:	4620      	mov	r0, r4
 8006060:	f000 f890 	bl	8006184 <_free_r>
 8006064:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006066:	b111      	cbz	r1, 800606e <_reclaim_reent+0x8a>
 8006068:	4620      	mov	r0, r4
 800606a:	f000 f88b 	bl	8006184 <_free_r>
 800606e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006070:	b111      	cbz	r1, 8006078 <_reclaim_reent+0x94>
 8006072:	4620      	mov	r0, r4
 8006074:	f000 f886 	bl	8006184 <_free_r>
 8006078:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800607a:	b111      	cbz	r1, 8006082 <_reclaim_reent+0x9e>
 800607c:	4620      	mov	r0, r4
 800607e:	f000 f881 	bl	8006184 <_free_r>
 8006082:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006084:	b111      	cbz	r1, 800608c <_reclaim_reent+0xa8>
 8006086:	4620      	mov	r0, r4
 8006088:	f000 f87c 	bl	8006184 <_free_r>
 800608c:	6a23      	ldr	r3, [r4, #32]
 800608e:	b11b      	cbz	r3, 8006098 <_reclaim_reent+0xb4>
 8006090:	4620      	mov	r0, r4
 8006092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006096:	4718      	bx	r3
 8006098:	bd70      	pop	{r4, r5, r6, pc}
 800609a:	bf00      	nop
 800609c:	20000034 	.word	0x20000034

080060a0 <_lseek_r>:
 80060a0:	b538      	push	{r3, r4, r5, lr}
 80060a2:	4d07      	ldr	r5, [pc, #28]	@ (80060c0 <_lseek_r+0x20>)
 80060a4:	4604      	mov	r4, r0
 80060a6:	4608      	mov	r0, r1
 80060a8:	4611      	mov	r1, r2
 80060aa:	2200      	movs	r2, #0
 80060ac:	602a      	str	r2, [r5, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	f7ff fa77 	bl	80055a2 <_lseek>
 80060b4:	1c43      	adds	r3, r0, #1
 80060b6:	d102      	bne.n	80060be <_lseek_r+0x1e>
 80060b8:	682b      	ldr	r3, [r5, #0]
 80060ba:	b103      	cbz	r3, 80060be <_lseek_r+0x1e>
 80060bc:	6023      	str	r3, [r4, #0]
 80060be:	bd38      	pop	{r3, r4, r5, pc}
 80060c0:	20004374 	.word	0x20004374

080060c4 <_read_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	4d07      	ldr	r5, [pc, #28]	@ (80060e4 <_read_r+0x20>)
 80060c8:	4604      	mov	r4, r0
 80060ca:	4608      	mov	r0, r1
 80060cc:	4611      	mov	r1, r2
 80060ce:	2200      	movs	r2, #0
 80060d0:	602a      	str	r2, [r5, #0]
 80060d2:	461a      	mov	r2, r3
 80060d4:	f7ff fa0f 	bl	80054f6 <_read>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d102      	bne.n	80060e2 <_read_r+0x1e>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	b103      	cbz	r3, 80060e2 <_read_r+0x1e>
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	20004374 	.word	0x20004374

080060e8 <_write_r>:
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	4d07      	ldr	r5, [pc, #28]	@ (8006108 <_write_r+0x20>)
 80060ec:	4604      	mov	r4, r0
 80060ee:	4608      	mov	r0, r1
 80060f0:	4611      	mov	r1, r2
 80060f2:	2200      	movs	r2, #0
 80060f4:	602a      	str	r2, [r5, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	f7ff fa65 	bl	80055c6 <_write>
 80060fc:	1c43      	adds	r3, r0, #1
 80060fe:	d102      	bne.n	8006106 <_write_r+0x1e>
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	b103      	cbz	r3, 8006106 <_write_r+0x1e>
 8006104:	6023      	str	r3, [r4, #0]
 8006106:	bd38      	pop	{r3, r4, r5, pc}
 8006108:	20004374 	.word	0x20004374

0800610c <__errno>:
 800610c:	4b01      	ldr	r3, [pc, #4]	@ (8006114 <__errno+0x8>)
 800610e:	6818      	ldr	r0, [r3, #0]
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	20000034 	.word	0x20000034

08006118 <__libc_init_array>:
 8006118:	b570      	push	{r4, r5, r6, lr}
 800611a:	4d0d      	ldr	r5, [pc, #52]	@ (8006150 <__libc_init_array+0x38>)
 800611c:	4c0d      	ldr	r4, [pc, #52]	@ (8006154 <__libc_init_array+0x3c>)
 800611e:	1b64      	subs	r4, r4, r5
 8006120:	10a4      	asrs	r4, r4, #2
 8006122:	2600      	movs	r6, #0
 8006124:	42a6      	cmp	r6, r4
 8006126:	d109      	bne.n	800613c <__libc_init_array+0x24>
 8006128:	4d0b      	ldr	r5, [pc, #44]	@ (8006158 <__libc_init_array+0x40>)
 800612a:	4c0c      	ldr	r4, [pc, #48]	@ (800615c <__libc_init_array+0x44>)
 800612c:	f000 fe2c 	bl	8006d88 <_init>
 8006130:	1b64      	subs	r4, r4, r5
 8006132:	10a4      	asrs	r4, r4, #2
 8006134:	2600      	movs	r6, #0
 8006136:	42a6      	cmp	r6, r4
 8006138:	d105      	bne.n	8006146 <__libc_init_array+0x2e>
 800613a:	bd70      	pop	{r4, r5, r6, pc}
 800613c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006140:	4798      	blx	r3
 8006142:	3601      	adds	r6, #1
 8006144:	e7ee      	b.n	8006124 <__libc_init_array+0xc>
 8006146:	f855 3b04 	ldr.w	r3, [r5], #4
 800614a:	4798      	blx	r3
 800614c:	3601      	adds	r6, #1
 800614e:	e7f2      	b.n	8006136 <__libc_init_array+0x1e>
 8006150:	08006fd0 	.word	0x08006fd0
 8006154:	08006fd0 	.word	0x08006fd0
 8006158:	08006fd0 	.word	0x08006fd0
 800615c:	08006fd4 	.word	0x08006fd4

08006160 <__retarget_lock_init_recursive>:
 8006160:	4770      	bx	lr

08006162 <__retarget_lock_acquire_recursive>:
 8006162:	4770      	bx	lr

08006164 <__retarget_lock_release_recursive>:
 8006164:	4770      	bx	lr

08006166 <memcpy>:
 8006166:	440a      	add	r2, r1
 8006168:	4291      	cmp	r1, r2
 800616a:	f100 33ff 	add.w	r3, r0, #4294967295
 800616e:	d100      	bne.n	8006172 <memcpy+0xc>
 8006170:	4770      	bx	lr
 8006172:	b510      	push	{r4, lr}
 8006174:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006178:	f803 4f01 	strb.w	r4, [r3, #1]!
 800617c:	4291      	cmp	r1, r2
 800617e:	d1f9      	bne.n	8006174 <memcpy+0xe>
 8006180:	bd10      	pop	{r4, pc}
	...

08006184 <_free_r>:
 8006184:	b538      	push	{r3, r4, r5, lr}
 8006186:	4605      	mov	r5, r0
 8006188:	2900      	cmp	r1, #0
 800618a:	d041      	beq.n	8006210 <_free_r+0x8c>
 800618c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006190:	1f0c      	subs	r4, r1, #4
 8006192:	2b00      	cmp	r3, #0
 8006194:	bfb8      	it	lt
 8006196:	18e4      	addlt	r4, r4, r3
 8006198:	f000 f8e0 	bl	800635c <__malloc_lock>
 800619c:	4a1d      	ldr	r2, [pc, #116]	@ (8006214 <_free_r+0x90>)
 800619e:	6813      	ldr	r3, [r2, #0]
 80061a0:	b933      	cbnz	r3, 80061b0 <_free_r+0x2c>
 80061a2:	6063      	str	r3, [r4, #4]
 80061a4:	6014      	str	r4, [r2, #0]
 80061a6:	4628      	mov	r0, r5
 80061a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061ac:	f000 b8dc 	b.w	8006368 <__malloc_unlock>
 80061b0:	42a3      	cmp	r3, r4
 80061b2:	d908      	bls.n	80061c6 <_free_r+0x42>
 80061b4:	6820      	ldr	r0, [r4, #0]
 80061b6:	1821      	adds	r1, r4, r0
 80061b8:	428b      	cmp	r3, r1
 80061ba:	bf01      	itttt	eq
 80061bc:	6819      	ldreq	r1, [r3, #0]
 80061be:	685b      	ldreq	r3, [r3, #4]
 80061c0:	1809      	addeq	r1, r1, r0
 80061c2:	6021      	streq	r1, [r4, #0]
 80061c4:	e7ed      	b.n	80061a2 <_free_r+0x1e>
 80061c6:	461a      	mov	r2, r3
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	b10b      	cbz	r3, 80061d0 <_free_r+0x4c>
 80061cc:	42a3      	cmp	r3, r4
 80061ce:	d9fa      	bls.n	80061c6 <_free_r+0x42>
 80061d0:	6811      	ldr	r1, [r2, #0]
 80061d2:	1850      	adds	r0, r2, r1
 80061d4:	42a0      	cmp	r0, r4
 80061d6:	d10b      	bne.n	80061f0 <_free_r+0x6c>
 80061d8:	6820      	ldr	r0, [r4, #0]
 80061da:	4401      	add	r1, r0
 80061dc:	1850      	adds	r0, r2, r1
 80061de:	4283      	cmp	r3, r0
 80061e0:	6011      	str	r1, [r2, #0]
 80061e2:	d1e0      	bne.n	80061a6 <_free_r+0x22>
 80061e4:	6818      	ldr	r0, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	6053      	str	r3, [r2, #4]
 80061ea:	4408      	add	r0, r1
 80061ec:	6010      	str	r0, [r2, #0]
 80061ee:	e7da      	b.n	80061a6 <_free_r+0x22>
 80061f0:	d902      	bls.n	80061f8 <_free_r+0x74>
 80061f2:	230c      	movs	r3, #12
 80061f4:	602b      	str	r3, [r5, #0]
 80061f6:	e7d6      	b.n	80061a6 <_free_r+0x22>
 80061f8:	6820      	ldr	r0, [r4, #0]
 80061fa:	1821      	adds	r1, r4, r0
 80061fc:	428b      	cmp	r3, r1
 80061fe:	bf04      	itt	eq
 8006200:	6819      	ldreq	r1, [r3, #0]
 8006202:	685b      	ldreq	r3, [r3, #4]
 8006204:	6063      	str	r3, [r4, #4]
 8006206:	bf04      	itt	eq
 8006208:	1809      	addeq	r1, r1, r0
 800620a:	6021      	streq	r1, [r4, #0]
 800620c:	6054      	str	r4, [r2, #4]
 800620e:	e7ca      	b.n	80061a6 <_free_r+0x22>
 8006210:	bd38      	pop	{r3, r4, r5, pc}
 8006212:	bf00      	nop
 8006214:	20004380 	.word	0x20004380

08006218 <sbrk_aligned>:
 8006218:	b570      	push	{r4, r5, r6, lr}
 800621a:	4e0f      	ldr	r6, [pc, #60]	@ (8006258 <sbrk_aligned+0x40>)
 800621c:	460c      	mov	r4, r1
 800621e:	6831      	ldr	r1, [r6, #0]
 8006220:	4605      	mov	r5, r0
 8006222:	b911      	cbnz	r1, 800622a <sbrk_aligned+0x12>
 8006224:	f000 fd6a 	bl	8006cfc <_sbrk_r>
 8006228:	6030      	str	r0, [r6, #0]
 800622a:	4621      	mov	r1, r4
 800622c:	4628      	mov	r0, r5
 800622e:	f000 fd65 	bl	8006cfc <_sbrk_r>
 8006232:	1c43      	adds	r3, r0, #1
 8006234:	d103      	bne.n	800623e <sbrk_aligned+0x26>
 8006236:	f04f 34ff 	mov.w	r4, #4294967295
 800623a:	4620      	mov	r0, r4
 800623c:	bd70      	pop	{r4, r5, r6, pc}
 800623e:	1cc4      	adds	r4, r0, #3
 8006240:	f024 0403 	bic.w	r4, r4, #3
 8006244:	42a0      	cmp	r0, r4
 8006246:	d0f8      	beq.n	800623a <sbrk_aligned+0x22>
 8006248:	1a21      	subs	r1, r4, r0
 800624a:	4628      	mov	r0, r5
 800624c:	f000 fd56 	bl	8006cfc <_sbrk_r>
 8006250:	3001      	adds	r0, #1
 8006252:	d1f2      	bne.n	800623a <sbrk_aligned+0x22>
 8006254:	e7ef      	b.n	8006236 <sbrk_aligned+0x1e>
 8006256:	bf00      	nop
 8006258:	2000437c 	.word	0x2000437c

0800625c <_malloc_r>:
 800625c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006260:	1ccd      	adds	r5, r1, #3
 8006262:	f025 0503 	bic.w	r5, r5, #3
 8006266:	3508      	adds	r5, #8
 8006268:	2d0c      	cmp	r5, #12
 800626a:	bf38      	it	cc
 800626c:	250c      	movcc	r5, #12
 800626e:	2d00      	cmp	r5, #0
 8006270:	4606      	mov	r6, r0
 8006272:	db01      	blt.n	8006278 <_malloc_r+0x1c>
 8006274:	42a9      	cmp	r1, r5
 8006276:	d904      	bls.n	8006282 <_malloc_r+0x26>
 8006278:	230c      	movs	r3, #12
 800627a:	6033      	str	r3, [r6, #0]
 800627c:	2000      	movs	r0, #0
 800627e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006282:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006358 <_malloc_r+0xfc>
 8006286:	f000 f869 	bl	800635c <__malloc_lock>
 800628a:	f8d8 3000 	ldr.w	r3, [r8]
 800628e:	461c      	mov	r4, r3
 8006290:	bb44      	cbnz	r4, 80062e4 <_malloc_r+0x88>
 8006292:	4629      	mov	r1, r5
 8006294:	4630      	mov	r0, r6
 8006296:	f7ff ffbf 	bl	8006218 <sbrk_aligned>
 800629a:	1c43      	adds	r3, r0, #1
 800629c:	4604      	mov	r4, r0
 800629e:	d158      	bne.n	8006352 <_malloc_r+0xf6>
 80062a0:	f8d8 4000 	ldr.w	r4, [r8]
 80062a4:	4627      	mov	r7, r4
 80062a6:	2f00      	cmp	r7, #0
 80062a8:	d143      	bne.n	8006332 <_malloc_r+0xd6>
 80062aa:	2c00      	cmp	r4, #0
 80062ac:	d04b      	beq.n	8006346 <_malloc_r+0xea>
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	4639      	mov	r1, r7
 80062b2:	4630      	mov	r0, r6
 80062b4:	eb04 0903 	add.w	r9, r4, r3
 80062b8:	f000 fd20 	bl	8006cfc <_sbrk_r>
 80062bc:	4581      	cmp	r9, r0
 80062be:	d142      	bne.n	8006346 <_malloc_r+0xea>
 80062c0:	6821      	ldr	r1, [r4, #0]
 80062c2:	1a6d      	subs	r5, r5, r1
 80062c4:	4629      	mov	r1, r5
 80062c6:	4630      	mov	r0, r6
 80062c8:	f7ff ffa6 	bl	8006218 <sbrk_aligned>
 80062cc:	3001      	adds	r0, #1
 80062ce:	d03a      	beq.n	8006346 <_malloc_r+0xea>
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	442b      	add	r3, r5
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	f8d8 3000 	ldr.w	r3, [r8]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	bb62      	cbnz	r2, 8006338 <_malloc_r+0xdc>
 80062de:	f8c8 7000 	str.w	r7, [r8]
 80062e2:	e00f      	b.n	8006304 <_malloc_r+0xa8>
 80062e4:	6822      	ldr	r2, [r4, #0]
 80062e6:	1b52      	subs	r2, r2, r5
 80062e8:	d420      	bmi.n	800632c <_malloc_r+0xd0>
 80062ea:	2a0b      	cmp	r2, #11
 80062ec:	d917      	bls.n	800631e <_malloc_r+0xc2>
 80062ee:	1961      	adds	r1, r4, r5
 80062f0:	42a3      	cmp	r3, r4
 80062f2:	6025      	str	r5, [r4, #0]
 80062f4:	bf18      	it	ne
 80062f6:	6059      	strne	r1, [r3, #4]
 80062f8:	6863      	ldr	r3, [r4, #4]
 80062fa:	bf08      	it	eq
 80062fc:	f8c8 1000 	streq.w	r1, [r8]
 8006300:	5162      	str	r2, [r4, r5]
 8006302:	604b      	str	r3, [r1, #4]
 8006304:	4630      	mov	r0, r6
 8006306:	f000 f82f 	bl	8006368 <__malloc_unlock>
 800630a:	f104 000b 	add.w	r0, r4, #11
 800630e:	1d23      	adds	r3, r4, #4
 8006310:	f020 0007 	bic.w	r0, r0, #7
 8006314:	1ac2      	subs	r2, r0, r3
 8006316:	bf1c      	itt	ne
 8006318:	1a1b      	subne	r3, r3, r0
 800631a:	50a3      	strne	r3, [r4, r2]
 800631c:	e7af      	b.n	800627e <_malloc_r+0x22>
 800631e:	6862      	ldr	r2, [r4, #4]
 8006320:	42a3      	cmp	r3, r4
 8006322:	bf0c      	ite	eq
 8006324:	f8c8 2000 	streq.w	r2, [r8]
 8006328:	605a      	strne	r2, [r3, #4]
 800632a:	e7eb      	b.n	8006304 <_malloc_r+0xa8>
 800632c:	4623      	mov	r3, r4
 800632e:	6864      	ldr	r4, [r4, #4]
 8006330:	e7ae      	b.n	8006290 <_malloc_r+0x34>
 8006332:	463c      	mov	r4, r7
 8006334:	687f      	ldr	r7, [r7, #4]
 8006336:	e7b6      	b.n	80062a6 <_malloc_r+0x4a>
 8006338:	461a      	mov	r2, r3
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	42a3      	cmp	r3, r4
 800633e:	d1fb      	bne.n	8006338 <_malloc_r+0xdc>
 8006340:	2300      	movs	r3, #0
 8006342:	6053      	str	r3, [r2, #4]
 8006344:	e7de      	b.n	8006304 <_malloc_r+0xa8>
 8006346:	230c      	movs	r3, #12
 8006348:	6033      	str	r3, [r6, #0]
 800634a:	4630      	mov	r0, r6
 800634c:	f000 f80c 	bl	8006368 <__malloc_unlock>
 8006350:	e794      	b.n	800627c <_malloc_r+0x20>
 8006352:	6005      	str	r5, [r0, #0]
 8006354:	e7d6      	b.n	8006304 <_malloc_r+0xa8>
 8006356:	bf00      	nop
 8006358:	20004380 	.word	0x20004380

0800635c <__malloc_lock>:
 800635c:	4801      	ldr	r0, [pc, #4]	@ (8006364 <__malloc_lock+0x8>)
 800635e:	f7ff bf00 	b.w	8006162 <__retarget_lock_acquire_recursive>
 8006362:	bf00      	nop
 8006364:	20004378 	.word	0x20004378

08006368 <__malloc_unlock>:
 8006368:	4801      	ldr	r0, [pc, #4]	@ (8006370 <__malloc_unlock+0x8>)
 800636a:	f7ff befb 	b.w	8006164 <__retarget_lock_release_recursive>
 800636e:	bf00      	nop
 8006370:	20004378 	.word	0x20004378

08006374 <__ssputs_r>:
 8006374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006378:	688e      	ldr	r6, [r1, #8]
 800637a:	461f      	mov	r7, r3
 800637c:	42be      	cmp	r6, r7
 800637e:	680b      	ldr	r3, [r1, #0]
 8006380:	4682      	mov	sl, r0
 8006382:	460c      	mov	r4, r1
 8006384:	4690      	mov	r8, r2
 8006386:	d82d      	bhi.n	80063e4 <__ssputs_r+0x70>
 8006388:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800638c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006390:	d026      	beq.n	80063e0 <__ssputs_r+0x6c>
 8006392:	6965      	ldr	r5, [r4, #20]
 8006394:	6909      	ldr	r1, [r1, #16]
 8006396:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800639a:	eba3 0901 	sub.w	r9, r3, r1
 800639e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063a2:	1c7b      	adds	r3, r7, #1
 80063a4:	444b      	add	r3, r9
 80063a6:	106d      	asrs	r5, r5, #1
 80063a8:	429d      	cmp	r5, r3
 80063aa:	bf38      	it	cc
 80063ac:	461d      	movcc	r5, r3
 80063ae:	0553      	lsls	r3, r2, #21
 80063b0:	d527      	bpl.n	8006402 <__ssputs_r+0x8e>
 80063b2:	4629      	mov	r1, r5
 80063b4:	f7ff ff52 	bl	800625c <_malloc_r>
 80063b8:	4606      	mov	r6, r0
 80063ba:	b360      	cbz	r0, 8006416 <__ssputs_r+0xa2>
 80063bc:	6921      	ldr	r1, [r4, #16]
 80063be:	464a      	mov	r2, r9
 80063c0:	f7ff fed1 	bl	8006166 <memcpy>
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80063ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ce:	81a3      	strh	r3, [r4, #12]
 80063d0:	6126      	str	r6, [r4, #16]
 80063d2:	6165      	str	r5, [r4, #20]
 80063d4:	444e      	add	r6, r9
 80063d6:	eba5 0509 	sub.w	r5, r5, r9
 80063da:	6026      	str	r6, [r4, #0]
 80063dc:	60a5      	str	r5, [r4, #8]
 80063de:	463e      	mov	r6, r7
 80063e0:	42be      	cmp	r6, r7
 80063e2:	d900      	bls.n	80063e6 <__ssputs_r+0x72>
 80063e4:	463e      	mov	r6, r7
 80063e6:	6820      	ldr	r0, [r4, #0]
 80063e8:	4632      	mov	r2, r6
 80063ea:	4641      	mov	r1, r8
 80063ec:	f000 fc4a 	bl	8006c84 <memmove>
 80063f0:	68a3      	ldr	r3, [r4, #8]
 80063f2:	1b9b      	subs	r3, r3, r6
 80063f4:	60a3      	str	r3, [r4, #8]
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	4433      	add	r3, r6
 80063fa:	6023      	str	r3, [r4, #0]
 80063fc:	2000      	movs	r0, #0
 80063fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006402:	462a      	mov	r2, r5
 8006404:	f000 fc8a 	bl	8006d1c <_realloc_r>
 8006408:	4606      	mov	r6, r0
 800640a:	2800      	cmp	r0, #0
 800640c:	d1e0      	bne.n	80063d0 <__ssputs_r+0x5c>
 800640e:	6921      	ldr	r1, [r4, #16]
 8006410:	4650      	mov	r0, sl
 8006412:	f7ff feb7 	bl	8006184 <_free_r>
 8006416:	230c      	movs	r3, #12
 8006418:	f8ca 3000 	str.w	r3, [sl]
 800641c:	89a3      	ldrh	r3, [r4, #12]
 800641e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006422:	81a3      	strh	r3, [r4, #12]
 8006424:	f04f 30ff 	mov.w	r0, #4294967295
 8006428:	e7e9      	b.n	80063fe <__ssputs_r+0x8a>
	...

0800642c <_svfiprintf_r>:
 800642c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006430:	4698      	mov	r8, r3
 8006432:	898b      	ldrh	r3, [r1, #12]
 8006434:	061b      	lsls	r3, r3, #24
 8006436:	b09d      	sub	sp, #116	@ 0x74
 8006438:	4607      	mov	r7, r0
 800643a:	460d      	mov	r5, r1
 800643c:	4614      	mov	r4, r2
 800643e:	d510      	bpl.n	8006462 <_svfiprintf_r+0x36>
 8006440:	690b      	ldr	r3, [r1, #16]
 8006442:	b973      	cbnz	r3, 8006462 <_svfiprintf_r+0x36>
 8006444:	2140      	movs	r1, #64	@ 0x40
 8006446:	f7ff ff09 	bl	800625c <_malloc_r>
 800644a:	6028      	str	r0, [r5, #0]
 800644c:	6128      	str	r0, [r5, #16]
 800644e:	b930      	cbnz	r0, 800645e <_svfiprintf_r+0x32>
 8006450:	230c      	movs	r3, #12
 8006452:	603b      	str	r3, [r7, #0]
 8006454:	f04f 30ff 	mov.w	r0, #4294967295
 8006458:	b01d      	add	sp, #116	@ 0x74
 800645a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800645e:	2340      	movs	r3, #64	@ 0x40
 8006460:	616b      	str	r3, [r5, #20]
 8006462:	2300      	movs	r3, #0
 8006464:	9309      	str	r3, [sp, #36]	@ 0x24
 8006466:	2320      	movs	r3, #32
 8006468:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800646c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006470:	2330      	movs	r3, #48	@ 0x30
 8006472:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006610 <_svfiprintf_r+0x1e4>
 8006476:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800647a:	f04f 0901 	mov.w	r9, #1
 800647e:	4623      	mov	r3, r4
 8006480:	469a      	mov	sl, r3
 8006482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006486:	b10a      	cbz	r2, 800648c <_svfiprintf_r+0x60>
 8006488:	2a25      	cmp	r2, #37	@ 0x25
 800648a:	d1f9      	bne.n	8006480 <_svfiprintf_r+0x54>
 800648c:	ebba 0b04 	subs.w	fp, sl, r4
 8006490:	d00b      	beq.n	80064aa <_svfiprintf_r+0x7e>
 8006492:	465b      	mov	r3, fp
 8006494:	4622      	mov	r2, r4
 8006496:	4629      	mov	r1, r5
 8006498:	4638      	mov	r0, r7
 800649a:	f7ff ff6b 	bl	8006374 <__ssputs_r>
 800649e:	3001      	adds	r0, #1
 80064a0:	f000 80a7 	beq.w	80065f2 <_svfiprintf_r+0x1c6>
 80064a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064a6:	445a      	add	r2, fp
 80064a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80064aa:	f89a 3000 	ldrb.w	r3, [sl]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 809f 	beq.w	80065f2 <_svfiprintf_r+0x1c6>
 80064b4:	2300      	movs	r3, #0
 80064b6:	f04f 32ff 	mov.w	r2, #4294967295
 80064ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064be:	f10a 0a01 	add.w	sl, sl, #1
 80064c2:	9304      	str	r3, [sp, #16]
 80064c4:	9307      	str	r3, [sp, #28]
 80064c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80064cc:	4654      	mov	r4, sl
 80064ce:	2205      	movs	r2, #5
 80064d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d4:	484e      	ldr	r0, [pc, #312]	@ (8006610 <_svfiprintf_r+0x1e4>)
 80064d6:	f7f9 fea3 	bl	8000220 <memchr>
 80064da:	9a04      	ldr	r2, [sp, #16]
 80064dc:	b9d8      	cbnz	r0, 8006516 <_svfiprintf_r+0xea>
 80064de:	06d0      	lsls	r0, r2, #27
 80064e0:	bf44      	itt	mi
 80064e2:	2320      	movmi	r3, #32
 80064e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064e8:	0711      	lsls	r1, r2, #28
 80064ea:	bf44      	itt	mi
 80064ec:	232b      	movmi	r3, #43	@ 0x2b
 80064ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064f2:	f89a 3000 	ldrb.w	r3, [sl]
 80064f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80064f8:	d015      	beq.n	8006526 <_svfiprintf_r+0xfa>
 80064fa:	9a07      	ldr	r2, [sp, #28]
 80064fc:	4654      	mov	r4, sl
 80064fe:	2000      	movs	r0, #0
 8006500:	f04f 0c0a 	mov.w	ip, #10
 8006504:	4621      	mov	r1, r4
 8006506:	f811 3b01 	ldrb.w	r3, [r1], #1
 800650a:	3b30      	subs	r3, #48	@ 0x30
 800650c:	2b09      	cmp	r3, #9
 800650e:	d94b      	bls.n	80065a8 <_svfiprintf_r+0x17c>
 8006510:	b1b0      	cbz	r0, 8006540 <_svfiprintf_r+0x114>
 8006512:	9207      	str	r2, [sp, #28]
 8006514:	e014      	b.n	8006540 <_svfiprintf_r+0x114>
 8006516:	eba0 0308 	sub.w	r3, r0, r8
 800651a:	fa09 f303 	lsl.w	r3, r9, r3
 800651e:	4313      	orrs	r3, r2
 8006520:	9304      	str	r3, [sp, #16]
 8006522:	46a2      	mov	sl, r4
 8006524:	e7d2      	b.n	80064cc <_svfiprintf_r+0xa0>
 8006526:	9b03      	ldr	r3, [sp, #12]
 8006528:	1d19      	adds	r1, r3, #4
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	9103      	str	r1, [sp, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	bfbb      	ittet	lt
 8006532:	425b      	neglt	r3, r3
 8006534:	f042 0202 	orrlt.w	r2, r2, #2
 8006538:	9307      	strge	r3, [sp, #28]
 800653a:	9307      	strlt	r3, [sp, #28]
 800653c:	bfb8      	it	lt
 800653e:	9204      	strlt	r2, [sp, #16]
 8006540:	7823      	ldrb	r3, [r4, #0]
 8006542:	2b2e      	cmp	r3, #46	@ 0x2e
 8006544:	d10a      	bne.n	800655c <_svfiprintf_r+0x130>
 8006546:	7863      	ldrb	r3, [r4, #1]
 8006548:	2b2a      	cmp	r3, #42	@ 0x2a
 800654a:	d132      	bne.n	80065b2 <_svfiprintf_r+0x186>
 800654c:	9b03      	ldr	r3, [sp, #12]
 800654e:	1d1a      	adds	r2, r3, #4
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	9203      	str	r2, [sp, #12]
 8006554:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006558:	3402      	adds	r4, #2
 800655a:	9305      	str	r3, [sp, #20]
 800655c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006620 <_svfiprintf_r+0x1f4>
 8006560:	7821      	ldrb	r1, [r4, #0]
 8006562:	2203      	movs	r2, #3
 8006564:	4650      	mov	r0, sl
 8006566:	f7f9 fe5b 	bl	8000220 <memchr>
 800656a:	b138      	cbz	r0, 800657c <_svfiprintf_r+0x150>
 800656c:	9b04      	ldr	r3, [sp, #16]
 800656e:	eba0 000a 	sub.w	r0, r0, sl
 8006572:	2240      	movs	r2, #64	@ 0x40
 8006574:	4082      	lsls	r2, r0
 8006576:	4313      	orrs	r3, r2
 8006578:	3401      	adds	r4, #1
 800657a:	9304      	str	r3, [sp, #16]
 800657c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006580:	4824      	ldr	r0, [pc, #144]	@ (8006614 <_svfiprintf_r+0x1e8>)
 8006582:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006586:	2206      	movs	r2, #6
 8006588:	f7f9 fe4a 	bl	8000220 <memchr>
 800658c:	2800      	cmp	r0, #0
 800658e:	d036      	beq.n	80065fe <_svfiprintf_r+0x1d2>
 8006590:	4b21      	ldr	r3, [pc, #132]	@ (8006618 <_svfiprintf_r+0x1ec>)
 8006592:	bb1b      	cbnz	r3, 80065dc <_svfiprintf_r+0x1b0>
 8006594:	9b03      	ldr	r3, [sp, #12]
 8006596:	3307      	adds	r3, #7
 8006598:	f023 0307 	bic.w	r3, r3, #7
 800659c:	3308      	adds	r3, #8
 800659e:	9303      	str	r3, [sp, #12]
 80065a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065a2:	4433      	add	r3, r6
 80065a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80065a6:	e76a      	b.n	800647e <_svfiprintf_r+0x52>
 80065a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80065ac:	460c      	mov	r4, r1
 80065ae:	2001      	movs	r0, #1
 80065b0:	e7a8      	b.n	8006504 <_svfiprintf_r+0xd8>
 80065b2:	2300      	movs	r3, #0
 80065b4:	3401      	adds	r4, #1
 80065b6:	9305      	str	r3, [sp, #20]
 80065b8:	4619      	mov	r1, r3
 80065ba:	f04f 0c0a 	mov.w	ip, #10
 80065be:	4620      	mov	r0, r4
 80065c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065c4:	3a30      	subs	r2, #48	@ 0x30
 80065c6:	2a09      	cmp	r2, #9
 80065c8:	d903      	bls.n	80065d2 <_svfiprintf_r+0x1a6>
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0c6      	beq.n	800655c <_svfiprintf_r+0x130>
 80065ce:	9105      	str	r1, [sp, #20]
 80065d0:	e7c4      	b.n	800655c <_svfiprintf_r+0x130>
 80065d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80065d6:	4604      	mov	r4, r0
 80065d8:	2301      	movs	r3, #1
 80065da:	e7f0      	b.n	80065be <_svfiprintf_r+0x192>
 80065dc:	ab03      	add	r3, sp, #12
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	462a      	mov	r2, r5
 80065e2:	4b0e      	ldr	r3, [pc, #56]	@ (800661c <_svfiprintf_r+0x1f0>)
 80065e4:	a904      	add	r1, sp, #16
 80065e6:	4638      	mov	r0, r7
 80065e8:	f3af 8000 	nop.w
 80065ec:	1c42      	adds	r2, r0, #1
 80065ee:	4606      	mov	r6, r0
 80065f0:	d1d6      	bne.n	80065a0 <_svfiprintf_r+0x174>
 80065f2:	89ab      	ldrh	r3, [r5, #12]
 80065f4:	065b      	lsls	r3, r3, #25
 80065f6:	f53f af2d 	bmi.w	8006454 <_svfiprintf_r+0x28>
 80065fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065fc:	e72c      	b.n	8006458 <_svfiprintf_r+0x2c>
 80065fe:	ab03      	add	r3, sp, #12
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	462a      	mov	r2, r5
 8006604:	4b05      	ldr	r3, [pc, #20]	@ (800661c <_svfiprintf_r+0x1f0>)
 8006606:	a904      	add	r1, sp, #16
 8006608:	4638      	mov	r0, r7
 800660a:	f000 f9bb 	bl	8006984 <_printf_i>
 800660e:	e7ed      	b.n	80065ec <_svfiprintf_r+0x1c0>
 8006610:	08006f92 	.word	0x08006f92
 8006614:	08006f9c 	.word	0x08006f9c
 8006618:	00000000 	.word	0x00000000
 800661c:	08006375 	.word	0x08006375
 8006620:	08006f98 	.word	0x08006f98

08006624 <__sfputc_r>:
 8006624:	6893      	ldr	r3, [r2, #8]
 8006626:	3b01      	subs	r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	b410      	push	{r4}
 800662c:	6093      	str	r3, [r2, #8]
 800662e:	da08      	bge.n	8006642 <__sfputc_r+0x1e>
 8006630:	6994      	ldr	r4, [r2, #24]
 8006632:	42a3      	cmp	r3, r4
 8006634:	db01      	blt.n	800663a <__sfputc_r+0x16>
 8006636:	290a      	cmp	r1, #10
 8006638:	d103      	bne.n	8006642 <__sfputc_r+0x1e>
 800663a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800663e:	f7ff bc24 	b.w	8005e8a <__swbuf_r>
 8006642:	6813      	ldr	r3, [r2, #0]
 8006644:	1c58      	adds	r0, r3, #1
 8006646:	6010      	str	r0, [r2, #0]
 8006648:	7019      	strb	r1, [r3, #0]
 800664a:	4608      	mov	r0, r1
 800664c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006650:	4770      	bx	lr

08006652 <__sfputs_r>:
 8006652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006654:	4606      	mov	r6, r0
 8006656:	460f      	mov	r7, r1
 8006658:	4614      	mov	r4, r2
 800665a:	18d5      	adds	r5, r2, r3
 800665c:	42ac      	cmp	r4, r5
 800665e:	d101      	bne.n	8006664 <__sfputs_r+0x12>
 8006660:	2000      	movs	r0, #0
 8006662:	e007      	b.n	8006674 <__sfputs_r+0x22>
 8006664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006668:	463a      	mov	r2, r7
 800666a:	4630      	mov	r0, r6
 800666c:	f7ff ffda 	bl	8006624 <__sfputc_r>
 8006670:	1c43      	adds	r3, r0, #1
 8006672:	d1f3      	bne.n	800665c <__sfputs_r+0xa>
 8006674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006678 <_vfiprintf_r>:
 8006678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667c:	460d      	mov	r5, r1
 800667e:	b09d      	sub	sp, #116	@ 0x74
 8006680:	4614      	mov	r4, r2
 8006682:	4698      	mov	r8, r3
 8006684:	4606      	mov	r6, r0
 8006686:	b118      	cbz	r0, 8006690 <_vfiprintf_r+0x18>
 8006688:	6a03      	ldr	r3, [r0, #32]
 800668a:	b90b      	cbnz	r3, 8006690 <_vfiprintf_r+0x18>
 800668c:	f7ff fade 	bl	8005c4c <__sinit>
 8006690:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006692:	07d9      	lsls	r1, r3, #31
 8006694:	d405      	bmi.n	80066a2 <_vfiprintf_r+0x2a>
 8006696:	89ab      	ldrh	r3, [r5, #12]
 8006698:	059a      	lsls	r2, r3, #22
 800669a:	d402      	bmi.n	80066a2 <_vfiprintf_r+0x2a>
 800669c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800669e:	f7ff fd60 	bl	8006162 <__retarget_lock_acquire_recursive>
 80066a2:	89ab      	ldrh	r3, [r5, #12]
 80066a4:	071b      	lsls	r3, r3, #28
 80066a6:	d501      	bpl.n	80066ac <_vfiprintf_r+0x34>
 80066a8:	692b      	ldr	r3, [r5, #16]
 80066aa:	b99b      	cbnz	r3, 80066d4 <_vfiprintf_r+0x5c>
 80066ac:	4629      	mov	r1, r5
 80066ae:	4630      	mov	r0, r6
 80066b0:	f7ff fc2a 	bl	8005f08 <__swsetup_r>
 80066b4:	b170      	cbz	r0, 80066d4 <_vfiprintf_r+0x5c>
 80066b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80066b8:	07dc      	lsls	r4, r3, #31
 80066ba:	d504      	bpl.n	80066c6 <_vfiprintf_r+0x4e>
 80066bc:	f04f 30ff 	mov.w	r0, #4294967295
 80066c0:	b01d      	add	sp, #116	@ 0x74
 80066c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c6:	89ab      	ldrh	r3, [r5, #12]
 80066c8:	0598      	lsls	r0, r3, #22
 80066ca:	d4f7      	bmi.n	80066bc <_vfiprintf_r+0x44>
 80066cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066ce:	f7ff fd49 	bl	8006164 <__retarget_lock_release_recursive>
 80066d2:	e7f3      	b.n	80066bc <_vfiprintf_r+0x44>
 80066d4:	2300      	movs	r3, #0
 80066d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80066d8:	2320      	movs	r3, #32
 80066da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066de:	f8cd 800c 	str.w	r8, [sp, #12]
 80066e2:	2330      	movs	r3, #48	@ 0x30
 80066e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006894 <_vfiprintf_r+0x21c>
 80066e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066ec:	f04f 0901 	mov.w	r9, #1
 80066f0:	4623      	mov	r3, r4
 80066f2:	469a      	mov	sl, r3
 80066f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066f8:	b10a      	cbz	r2, 80066fe <_vfiprintf_r+0x86>
 80066fa:	2a25      	cmp	r2, #37	@ 0x25
 80066fc:	d1f9      	bne.n	80066f2 <_vfiprintf_r+0x7a>
 80066fe:	ebba 0b04 	subs.w	fp, sl, r4
 8006702:	d00b      	beq.n	800671c <_vfiprintf_r+0xa4>
 8006704:	465b      	mov	r3, fp
 8006706:	4622      	mov	r2, r4
 8006708:	4629      	mov	r1, r5
 800670a:	4630      	mov	r0, r6
 800670c:	f7ff ffa1 	bl	8006652 <__sfputs_r>
 8006710:	3001      	adds	r0, #1
 8006712:	f000 80a7 	beq.w	8006864 <_vfiprintf_r+0x1ec>
 8006716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006718:	445a      	add	r2, fp
 800671a:	9209      	str	r2, [sp, #36]	@ 0x24
 800671c:	f89a 3000 	ldrb.w	r3, [sl]
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 809f 	beq.w	8006864 <_vfiprintf_r+0x1ec>
 8006726:	2300      	movs	r3, #0
 8006728:	f04f 32ff 	mov.w	r2, #4294967295
 800672c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006730:	f10a 0a01 	add.w	sl, sl, #1
 8006734:	9304      	str	r3, [sp, #16]
 8006736:	9307      	str	r3, [sp, #28]
 8006738:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800673c:	931a      	str	r3, [sp, #104]	@ 0x68
 800673e:	4654      	mov	r4, sl
 8006740:	2205      	movs	r2, #5
 8006742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006746:	4853      	ldr	r0, [pc, #332]	@ (8006894 <_vfiprintf_r+0x21c>)
 8006748:	f7f9 fd6a 	bl	8000220 <memchr>
 800674c:	9a04      	ldr	r2, [sp, #16]
 800674e:	b9d8      	cbnz	r0, 8006788 <_vfiprintf_r+0x110>
 8006750:	06d1      	lsls	r1, r2, #27
 8006752:	bf44      	itt	mi
 8006754:	2320      	movmi	r3, #32
 8006756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800675a:	0713      	lsls	r3, r2, #28
 800675c:	bf44      	itt	mi
 800675e:	232b      	movmi	r3, #43	@ 0x2b
 8006760:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006764:	f89a 3000 	ldrb.w	r3, [sl]
 8006768:	2b2a      	cmp	r3, #42	@ 0x2a
 800676a:	d015      	beq.n	8006798 <_vfiprintf_r+0x120>
 800676c:	9a07      	ldr	r2, [sp, #28]
 800676e:	4654      	mov	r4, sl
 8006770:	2000      	movs	r0, #0
 8006772:	f04f 0c0a 	mov.w	ip, #10
 8006776:	4621      	mov	r1, r4
 8006778:	f811 3b01 	ldrb.w	r3, [r1], #1
 800677c:	3b30      	subs	r3, #48	@ 0x30
 800677e:	2b09      	cmp	r3, #9
 8006780:	d94b      	bls.n	800681a <_vfiprintf_r+0x1a2>
 8006782:	b1b0      	cbz	r0, 80067b2 <_vfiprintf_r+0x13a>
 8006784:	9207      	str	r2, [sp, #28]
 8006786:	e014      	b.n	80067b2 <_vfiprintf_r+0x13a>
 8006788:	eba0 0308 	sub.w	r3, r0, r8
 800678c:	fa09 f303 	lsl.w	r3, r9, r3
 8006790:	4313      	orrs	r3, r2
 8006792:	9304      	str	r3, [sp, #16]
 8006794:	46a2      	mov	sl, r4
 8006796:	e7d2      	b.n	800673e <_vfiprintf_r+0xc6>
 8006798:	9b03      	ldr	r3, [sp, #12]
 800679a:	1d19      	adds	r1, r3, #4
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	9103      	str	r1, [sp, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	bfbb      	ittet	lt
 80067a4:	425b      	neglt	r3, r3
 80067a6:	f042 0202 	orrlt.w	r2, r2, #2
 80067aa:	9307      	strge	r3, [sp, #28]
 80067ac:	9307      	strlt	r3, [sp, #28]
 80067ae:	bfb8      	it	lt
 80067b0:	9204      	strlt	r2, [sp, #16]
 80067b2:	7823      	ldrb	r3, [r4, #0]
 80067b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80067b6:	d10a      	bne.n	80067ce <_vfiprintf_r+0x156>
 80067b8:	7863      	ldrb	r3, [r4, #1]
 80067ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80067bc:	d132      	bne.n	8006824 <_vfiprintf_r+0x1ac>
 80067be:	9b03      	ldr	r3, [sp, #12]
 80067c0:	1d1a      	adds	r2, r3, #4
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	9203      	str	r2, [sp, #12]
 80067c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067ca:	3402      	adds	r4, #2
 80067cc:	9305      	str	r3, [sp, #20]
 80067ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80068a4 <_vfiprintf_r+0x22c>
 80067d2:	7821      	ldrb	r1, [r4, #0]
 80067d4:	2203      	movs	r2, #3
 80067d6:	4650      	mov	r0, sl
 80067d8:	f7f9 fd22 	bl	8000220 <memchr>
 80067dc:	b138      	cbz	r0, 80067ee <_vfiprintf_r+0x176>
 80067de:	9b04      	ldr	r3, [sp, #16]
 80067e0:	eba0 000a 	sub.w	r0, r0, sl
 80067e4:	2240      	movs	r2, #64	@ 0x40
 80067e6:	4082      	lsls	r2, r0
 80067e8:	4313      	orrs	r3, r2
 80067ea:	3401      	adds	r4, #1
 80067ec:	9304      	str	r3, [sp, #16]
 80067ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067f2:	4829      	ldr	r0, [pc, #164]	@ (8006898 <_vfiprintf_r+0x220>)
 80067f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067f8:	2206      	movs	r2, #6
 80067fa:	f7f9 fd11 	bl	8000220 <memchr>
 80067fe:	2800      	cmp	r0, #0
 8006800:	d03f      	beq.n	8006882 <_vfiprintf_r+0x20a>
 8006802:	4b26      	ldr	r3, [pc, #152]	@ (800689c <_vfiprintf_r+0x224>)
 8006804:	bb1b      	cbnz	r3, 800684e <_vfiprintf_r+0x1d6>
 8006806:	9b03      	ldr	r3, [sp, #12]
 8006808:	3307      	adds	r3, #7
 800680a:	f023 0307 	bic.w	r3, r3, #7
 800680e:	3308      	adds	r3, #8
 8006810:	9303      	str	r3, [sp, #12]
 8006812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006814:	443b      	add	r3, r7
 8006816:	9309      	str	r3, [sp, #36]	@ 0x24
 8006818:	e76a      	b.n	80066f0 <_vfiprintf_r+0x78>
 800681a:	fb0c 3202 	mla	r2, ip, r2, r3
 800681e:	460c      	mov	r4, r1
 8006820:	2001      	movs	r0, #1
 8006822:	e7a8      	b.n	8006776 <_vfiprintf_r+0xfe>
 8006824:	2300      	movs	r3, #0
 8006826:	3401      	adds	r4, #1
 8006828:	9305      	str	r3, [sp, #20]
 800682a:	4619      	mov	r1, r3
 800682c:	f04f 0c0a 	mov.w	ip, #10
 8006830:	4620      	mov	r0, r4
 8006832:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006836:	3a30      	subs	r2, #48	@ 0x30
 8006838:	2a09      	cmp	r2, #9
 800683a:	d903      	bls.n	8006844 <_vfiprintf_r+0x1cc>
 800683c:	2b00      	cmp	r3, #0
 800683e:	d0c6      	beq.n	80067ce <_vfiprintf_r+0x156>
 8006840:	9105      	str	r1, [sp, #20]
 8006842:	e7c4      	b.n	80067ce <_vfiprintf_r+0x156>
 8006844:	fb0c 2101 	mla	r1, ip, r1, r2
 8006848:	4604      	mov	r4, r0
 800684a:	2301      	movs	r3, #1
 800684c:	e7f0      	b.n	8006830 <_vfiprintf_r+0x1b8>
 800684e:	ab03      	add	r3, sp, #12
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	462a      	mov	r2, r5
 8006854:	4b12      	ldr	r3, [pc, #72]	@ (80068a0 <_vfiprintf_r+0x228>)
 8006856:	a904      	add	r1, sp, #16
 8006858:	4630      	mov	r0, r6
 800685a:	f3af 8000 	nop.w
 800685e:	4607      	mov	r7, r0
 8006860:	1c78      	adds	r0, r7, #1
 8006862:	d1d6      	bne.n	8006812 <_vfiprintf_r+0x19a>
 8006864:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006866:	07d9      	lsls	r1, r3, #31
 8006868:	d405      	bmi.n	8006876 <_vfiprintf_r+0x1fe>
 800686a:	89ab      	ldrh	r3, [r5, #12]
 800686c:	059a      	lsls	r2, r3, #22
 800686e:	d402      	bmi.n	8006876 <_vfiprintf_r+0x1fe>
 8006870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006872:	f7ff fc77 	bl	8006164 <__retarget_lock_release_recursive>
 8006876:	89ab      	ldrh	r3, [r5, #12]
 8006878:	065b      	lsls	r3, r3, #25
 800687a:	f53f af1f 	bmi.w	80066bc <_vfiprintf_r+0x44>
 800687e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006880:	e71e      	b.n	80066c0 <_vfiprintf_r+0x48>
 8006882:	ab03      	add	r3, sp, #12
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	462a      	mov	r2, r5
 8006888:	4b05      	ldr	r3, [pc, #20]	@ (80068a0 <_vfiprintf_r+0x228>)
 800688a:	a904      	add	r1, sp, #16
 800688c:	4630      	mov	r0, r6
 800688e:	f000 f879 	bl	8006984 <_printf_i>
 8006892:	e7e4      	b.n	800685e <_vfiprintf_r+0x1e6>
 8006894:	08006f92 	.word	0x08006f92
 8006898:	08006f9c 	.word	0x08006f9c
 800689c:	00000000 	.word	0x00000000
 80068a0:	08006653 	.word	0x08006653
 80068a4:	08006f98 	.word	0x08006f98

080068a8 <_printf_common>:
 80068a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068ac:	4616      	mov	r6, r2
 80068ae:	4698      	mov	r8, r3
 80068b0:	688a      	ldr	r2, [r1, #8]
 80068b2:	690b      	ldr	r3, [r1, #16]
 80068b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068b8:	4293      	cmp	r3, r2
 80068ba:	bfb8      	it	lt
 80068bc:	4613      	movlt	r3, r2
 80068be:	6033      	str	r3, [r6, #0]
 80068c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068c4:	4607      	mov	r7, r0
 80068c6:	460c      	mov	r4, r1
 80068c8:	b10a      	cbz	r2, 80068ce <_printf_common+0x26>
 80068ca:	3301      	adds	r3, #1
 80068cc:	6033      	str	r3, [r6, #0]
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	0699      	lsls	r1, r3, #26
 80068d2:	bf42      	ittt	mi
 80068d4:	6833      	ldrmi	r3, [r6, #0]
 80068d6:	3302      	addmi	r3, #2
 80068d8:	6033      	strmi	r3, [r6, #0]
 80068da:	6825      	ldr	r5, [r4, #0]
 80068dc:	f015 0506 	ands.w	r5, r5, #6
 80068e0:	d106      	bne.n	80068f0 <_printf_common+0x48>
 80068e2:	f104 0a19 	add.w	sl, r4, #25
 80068e6:	68e3      	ldr	r3, [r4, #12]
 80068e8:	6832      	ldr	r2, [r6, #0]
 80068ea:	1a9b      	subs	r3, r3, r2
 80068ec:	42ab      	cmp	r3, r5
 80068ee:	dc26      	bgt.n	800693e <_printf_common+0x96>
 80068f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068f4:	6822      	ldr	r2, [r4, #0]
 80068f6:	3b00      	subs	r3, #0
 80068f8:	bf18      	it	ne
 80068fa:	2301      	movne	r3, #1
 80068fc:	0692      	lsls	r2, r2, #26
 80068fe:	d42b      	bmi.n	8006958 <_printf_common+0xb0>
 8006900:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006904:	4641      	mov	r1, r8
 8006906:	4638      	mov	r0, r7
 8006908:	47c8      	blx	r9
 800690a:	3001      	adds	r0, #1
 800690c:	d01e      	beq.n	800694c <_printf_common+0xa4>
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	6922      	ldr	r2, [r4, #16]
 8006912:	f003 0306 	and.w	r3, r3, #6
 8006916:	2b04      	cmp	r3, #4
 8006918:	bf02      	ittt	eq
 800691a:	68e5      	ldreq	r5, [r4, #12]
 800691c:	6833      	ldreq	r3, [r6, #0]
 800691e:	1aed      	subeq	r5, r5, r3
 8006920:	68a3      	ldr	r3, [r4, #8]
 8006922:	bf0c      	ite	eq
 8006924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006928:	2500      	movne	r5, #0
 800692a:	4293      	cmp	r3, r2
 800692c:	bfc4      	itt	gt
 800692e:	1a9b      	subgt	r3, r3, r2
 8006930:	18ed      	addgt	r5, r5, r3
 8006932:	2600      	movs	r6, #0
 8006934:	341a      	adds	r4, #26
 8006936:	42b5      	cmp	r5, r6
 8006938:	d11a      	bne.n	8006970 <_printf_common+0xc8>
 800693a:	2000      	movs	r0, #0
 800693c:	e008      	b.n	8006950 <_printf_common+0xa8>
 800693e:	2301      	movs	r3, #1
 8006940:	4652      	mov	r2, sl
 8006942:	4641      	mov	r1, r8
 8006944:	4638      	mov	r0, r7
 8006946:	47c8      	blx	r9
 8006948:	3001      	adds	r0, #1
 800694a:	d103      	bne.n	8006954 <_printf_common+0xac>
 800694c:	f04f 30ff 	mov.w	r0, #4294967295
 8006950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006954:	3501      	adds	r5, #1
 8006956:	e7c6      	b.n	80068e6 <_printf_common+0x3e>
 8006958:	18e1      	adds	r1, r4, r3
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	2030      	movs	r0, #48	@ 0x30
 800695e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006962:	4422      	add	r2, r4
 8006964:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006968:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800696c:	3302      	adds	r3, #2
 800696e:	e7c7      	b.n	8006900 <_printf_common+0x58>
 8006970:	2301      	movs	r3, #1
 8006972:	4622      	mov	r2, r4
 8006974:	4641      	mov	r1, r8
 8006976:	4638      	mov	r0, r7
 8006978:	47c8      	blx	r9
 800697a:	3001      	adds	r0, #1
 800697c:	d0e6      	beq.n	800694c <_printf_common+0xa4>
 800697e:	3601      	adds	r6, #1
 8006980:	e7d9      	b.n	8006936 <_printf_common+0x8e>
	...

08006984 <_printf_i>:
 8006984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006988:	7e0f      	ldrb	r7, [r1, #24]
 800698a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800698c:	2f78      	cmp	r7, #120	@ 0x78
 800698e:	4691      	mov	r9, r2
 8006990:	4680      	mov	r8, r0
 8006992:	460c      	mov	r4, r1
 8006994:	469a      	mov	sl, r3
 8006996:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800699a:	d807      	bhi.n	80069ac <_printf_i+0x28>
 800699c:	2f62      	cmp	r7, #98	@ 0x62
 800699e:	d80a      	bhi.n	80069b6 <_printf_i+0x32>
 80069a0:	2f00      	cmp	r7, #0
 80069a2:	f000 80d1 	beq.w	8006b48 <_printf_i+0x1c4>
 80069a6:	2f58      	cmp	r7, #88	@ 0x58
 80069a8:	f000 80b8 	beq.w	8006b1c <_printf_i+0x198>
 80069ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069b4:	e03a      	b.n	8006a2c <_printf_i+0xa8>
 80069b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069ba:	2b15      	cmp	r3, #21
 80069bc:	d8f6      	bhi.n	80069ac <_printf_i+0x28>
 80069be:	a101      	add	r1, pc, #4	@ (adr r1, 80069c4 <_printf_i+0x40>)
 80069c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069c4:	08006a1d 	.word	0x08006a1d
 80069c8:	08006a31 	.word	0x08006a31
 80069cc:	080069ad 	.word	0x080069ad
 80069d0:	080069ad 	.word	0x080069ad
 80069d4:	080069ad 	.word	0x080069ad
 80069d8:	080069ad 	.word	0x080069ad
 80069dc:	08006a31 	.word	0x08006a31
 80069e0:	080069ad 	.word	0x080069ad
 80069e4:	080069ad 	.word	0x080069ad
 80069e8:	080069ad 	.word	0x080069ad
 80069ec:	080069ad 	.word	0x080069ad
 80069f0:	08006b2f 	.word	0x08006b2f
 80069f4:	08006a5b 	.word	0x08006a5b
 80069f8:	08006ae9 	.word	0x08006ae9
 80069fc:	080069ad 	.word	0x080069ad
 8006a00:	080069ad 	.word	0x080069ad
 8006a04:	08006b51 	.word	0x08006b51
 8006a08:	080069ad 	.word	0x080069ad
 8006a0c:	08006a5b 	.word	0x08006a5b
 8006a10:	080069ad 	.word	0x080069ad
 8006a14:	080069ad 	.word	0x080069ad
 8006a18:	08006af1 	.word	0x08006af1
 8006a1c:	6833      	ldr	r3, [r6, #0]
 8006a1e:	1d1a      	adds	r2, r3, #4
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6032      	str	r2, [r6, #0]
 8006a24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e09c      	b.n	8006b6a <_printf_i+0x1e6>
 8006a30:	6833      	ldr	r3, [r6, #0]
 8006a32:	6820      	ldr	r0, [r4, #0]
 8006a34:	1d19      	adds	r1, r3, #4
 8006a36:	6031      	str	r1, [r6, #0]
 8006a38:	0606      	lsls	r6, r0, #24
 8006a3a:	d501      	bpl.n	8006a40 <_printf_i+0xbc>
 8006a3c:	681d      	ldr	r5, [r3, #0]
 8006a3e:	e003      	b.n	8006a48 <_printf_i+0xc4>
 8006a40:	0645      	lsls	r5, r0, #25
 8006a42:	d5fb      	bpl.n	8006a3c <_printf_i+0xb8>
 8006a44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a48:	2d00      	cmp	r5, #0
 8006a4a:	da03      	bge.n	8006a54 <_printf_i+0xd0>
 8006a4c:	232d      	movs	r3, #45	@ 0x2d
 8006a4e:	426d      	negs	r5, r5
 8006a50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a54:	4858      	ldr	r0, [pc, #352]	@ (8006bb8 <_printf_i+0x234>)
 8006a56:	230a      	movs	r3, #10
 8006a58:	e011      	b.n	8006a7e <_printf_i+0xfa>
 8006a5a:	6821      	ldr	r1, [r4, #0]
 8006a5c:	6833      	ldr	r3, [r6, #0]
 8006a5e:	0608      	lsls	r0, r1, #24
 8006a60:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a64:	d402      	bmi.n	8006a6c <_printf_i+0xe8>
 8006a66:	0649      	lsls	r1, r1, #25
 8006a68:	bf48      	it	mi
 8006a6a:	b2ad      	uxthmi	r5, r5
 8006a6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a6e:	4852      	ldr	r0, [pc, #328]	@ (8006bb8 <_printf_i+0x234>)
 8006a70:	6033      	str	r3, [r6, #0]
 8006a72:	bf14      	ite	ne
 8006a74:	230a      	movne	r3, #10
 8006a76:	2308      	moveq	r3, #8
 8006a78:	2100      	movs	r1, #0
 8006a7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a7e:	6866      	ldr	r6, [r4, #4]
 8006a80:	60a6      	str	r6, [r4, #8]
 8006a82:	2e00      	cmp	r6, #0
 8006a84:	db05      	blt.n	8006a92 <_printf_i+0x10e>
 8006a86:	6821      	ldr	r1, [r4, #0]
 8006a88:	432e      	orrs	r6, r5
 8006a8a:	f021 0104 	bic.w	r1, r1, #4
 8006a8e:	6021      	str	r1, [r4, #0]
 8006a90:	d04b      	beq.n	8006b2a <_printf_i+0x1a6>
 8006a92:	4616      	mov	r6, r2
 8006a94:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a98:	fb03 5711 	mls	r7, r3, r1, r5
 8006a9c:	5dc7      	ldrb	r7, [r0, r7]
 8006a9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006aa2:	462f      	mov	r7, r5
 8006aa4:	42bb      	cmp	r3, r7
 8006aa6:	460d      	mov	r5, r1
 8006aa8:	d9f4      	bls.n	8006a94 <_printf_i+0x110>
 8006aaa:	2b08      	cmp	r3, #8
 8006aac:	d10b      	bne.n	8006ac6 <_printf_i+0x142>
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	07df      	lsls	r7, r3, #31
 8006ab2:	d508      	bpl.n	8006ac6 <_printf_i+0x142>
 8006ab4:	6923      	ldr	r3, [r4, #16]
 8006ab6:	6861      	ldr	r1, [r4, #4]
 8006ab8:	4299      	cmp	r1, r3
 8006aba:	bfde      	ittt	le
 8006abc:	2330      	movle	r3, #48	@ 0x30
 8006abe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ac2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ac6:	1b92      	subs	r2, r2, r6
 8006ac8:	6122      	str	r2, [r4, #16]
 8006aca:	f8cd a000 	str.w	sl, [sp]
 8006ace:	464b      	mov	r3, r9
 8006ad0:	aa03      	add	r2, sp, #12
 8006ad2:	4621      	mov	r1, r4
 8006ad4:	4640      	mov	r0, r8
 8006ad6:	f7ff fee7 	bl	80068a8 <_printf_common>
 8006ada:	3001      	adds	r0, #1
 8006adc:	d14a      	bne.n	8006b74 <_printf_i+0x1f0>
 8006ade:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae2:	b004      	add	sp, #16
 8006ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	f043 0320 	orr.w	r3, r3, #32
 8006aee:	6023      	str	r3, [r4, #0]
 8006af0:	4832      	ldr	r0, [pc, #200]	@ (8006bbc <_printf_i+0x238>)
 8006af2:	2778      	movs	r7, #120	@ 0x78
 8006af4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	6831      	ldr	r1, [r6, #0]
 8006afc:	061f      	lsls	r7, r3, #24
 8006afe:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b02:	d402      	bmi.n	8006b0a <_printf_i+0x186>
 8006b04:	065f      	lsls	r7, r3, #25
 8006b06:	bf48      	it	mi
 8006b08:	b2ad      	uxthmi	r5, r5
 8006b0a:	6031      	str	r1, [r6, #0]
 8006b0c:	07d9      	lsls	r1, r3, #31
 8006b0e:	bf44      	itt	mi
 8006b10:	f043 0320 	orrmi.w	r3, r3, #32
 8006b14:	6023      	strmi	r3, [r4, #0]
 8006b16:	b11d      	cbz	r5, 8006b20 <_printf_i+0x19c>
 8006b18:	2310      	movs	r3, #16
 8006b1a:	e7ad      	b.n	8006a78 <_printf_i+0xf4>
 8006b1c:	4826      	ldr	r0, [pc, #152]	@ (8006bb8 <_printf_i+0x234>)
 8006b1e:	e7e9      	b.n	8006af4 <_printf_i+0x170>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	f023 0320 	bic.w	r3, r3, #32
 8006b26:	6023      	str	r3, [r4, #0]
 8006b28:	e7f6      	b.n	8006b18 <_printf_i+0x194>
 8006b2a:	4616      	mov	r6, r2
 8006b2c:	e7bd      	b.n	8006aaa <_printf_i+0x126>
 8006b2e:	6833      	ldr	r3, [r6, #0]
 8006b30:	6825      	ldr	r5, [r4, #0]
 8006b32:	6961      	ldr	r1, [r4, #20]
 8006b34:	1d18      	adds	r0, r3, #4
 8006b36:	6030      	str	r0, [r6, #0]
 8006b38:	062e      	lsls	r6, r5, #24
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	d501      	bpl.n	8006b42 <_printf_i+0x1be>
 8006b3e:	6019      	str	r1, [r3, #0]
 8006b40:	e002      	b.n	8006b48 <_printf_i+0x1c4>
 8006b42:	0668      	lsls	r0, r5, #25
 8006b44:	d5fb      	bpl.n	8006b3e <_printf_i+0x1ba>
 8006b46:	8019      	strh	r1, [r3, #0]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	6123      	str	r3, [r4, #16]
 8006b4c:	4616      	mov	r6, r2
 8006b4e:	e7bc      	b.n	8006aca <_printf_i+0x146>
 8006b50:	6833      	ldr	r3, [r6, #0]
 8006b52:	1d1a      	adds	r2, r3, #4
 8006b54:	6032      	str	r2, [r6, #0]
 8006b56:	681e      	ldr	r6, [r3, #0]
 8006b58:	6862      	ldr	r2, [r4, #4]
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	f7f9 fb5f 	bl	8000220 <memchr>
 8006b62:	b108      	cbz	r0, 8006b68 <_printf_i+0x1e4>
 8006b64:	1b80      	subs	r0, r0, r6
 8006b66:	6060      	str	r0, [r4, #4]
 8006b68:	6863      	ldr	r3, [r4, #4]
 8006b6a:	6123      	str	r3, [r4, #16]
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b72:	e7aa      	b.n	8006aca <_printf_i+0x146>
 8006b74:	6923      	ldr	r3, [r4, #16]
 8006b76:	4632      	mov	r2, r6
 8006b78:	4649      	mov	r1, r9
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	47d0      	blx	sl
 8006b7e:	3001      	adds	r0, #1
 8006b80:	d0ad      	beq.n	8006ade <_printf_i+0x15a>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	079b      	lsls	r3, r3, #30
 8006b86:	d413      	bmi.n	8006bb0 <_printf_i+0x22c>
 8006b88:	68e0      	ldr	r0, [r4, #12]
 8006b8a:	9b03      	ldr	r3, [sp, #12]
 8006b8c:	4298      	cmp	r0, r3
 8006b8e:	bfb8      	it	lt
 8006b90:	4618      	movlt	r0, r3
 8006b92:	e7a6      	b.n	8006ae2 <_printf_i+0x15e>
 8006b94:	2301      	movs	r3, #1
 8006b96:	4632      	mov	r2, r6
 8006b98:	4649      	mov	r1, r9
 8006b9a:	4640      	mov	r0, r8
 8006b9c:	47d0      	blx	sl
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	d09d      	beq.n	8006ade <_printf_i+0x15a>
 8006ba2:	3501      	adds	r5, #1
 8006ba4:	68e3      	ldr	r3, [r4, #12]
 8006ba6:	9903      	ldr	r1, [sp, #12]
 8006ba8:	1a5b      	subs	r3, r3, r1
 8006baa:	42ab      	cmp	r3, r5
 8006bac:	dcf2      	bgt.n	8006b94 <_printf_i+0x210>
 8006bae:	e7eb      	b.n	8006b88 <_printf_i+0x204>
 8006bb0:	2500      	movs	r5, #0
 8006bb2:	f104 0619 	add.w	r6, r4, #25
 8006bb6:	e7f5      	b.n	8006ba4 <_printf_i+0x220>
 8006bb8:	08006fa3 	.word	0x08006fa3
 8006bbc:	08006fb4 	.word	0x08006fb4

08006bc0 <__swhatbuf_r>:
 8006bc0:	b570      	push	{r4, r5, r6, lr}
 8006bc2:	460c      	mov	r4, r1
 8006bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc8:	2900      	cmp	r1, #0
 8006bca:	b096      	sub	sp, #88	@ 0x58
 8006bcc:	4615      	mov	r5, r2
 8006bce:	461e      	mov	r6, r3
 8006bd0:	da0d      	bge.n	8006bee <__swhatbuf_r+0x2e>
 8006bd2:	89a3      	ldrh	r3, [r4, #12]
 8006bd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006bd8:	f04f 0100 	mov.w	r1, #0
 8006bdc:	bf14      	ite	ne
 8006bde:	2340      	movne	r3, #64	@ 0x40
 8006be0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006be4:	2000      	movs	r0, #0
 8006be6:	6031      	str	r1, [r6, #0]
 8006be8:	602b      	str	r3, [r5, #0]
 8006bea:	b016      	add	sp, #88	@ 0x58
 8006bec:	bd70      	pop	{r4, r5, r6, pc}
 8006bee:	466a      	mov	r2, sp
 8006bf0:	f000 f862 	bl	8006cb8 <_fstat_r>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	dbec      	blt.n	8006bd2 <__swhatbuf_r+0x12>
 8006bf8:	9901      	ldr	r1, [sp, #4]
 8006bfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006bfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006c02:	4259      	negs	r1, r3
 8006c04:	4159      	adcs	r1, r3
 8006c06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c0a:	e7eb      	b.n	8006be4 <__swhatbuf_r+0x24>

08006c0c <__smakebuf_r>:
 8006c0c:	898b      	ldrh	r3, [r1, #12]
 8006c0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c10:	079d      	lsls	r5, r3, #30
 8006c12:	4606      	mov	r6, r0
 8006c14:	460c      	mov	r4, r1
 8006c16:	d507      	bpl.n	8006c28 <__smakebuf_r+0x1c>
 8006c18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	6123      	str	r3, [r4, #16]
 8006c20:	2301      	movs	r3, #1
 8006c22:	6163      	str	r3, [r4, #20]
 8006c24:	b003      	add	sp, #12
 8006c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c28:	ab01      	add	r3, sp, #4
 8006c2a:	466a      	mov	r2, sp
 8006c2c:	f7ff ffc8 	bl	8006bc0 <__swhatbuf_r>
 8006c30:	9f00      	ldr	r7, [sp, #0]
 8006c32:	4605      	mov	r5, r0
 8006c34:	4639      	mov	r1, r7
 8006c36:	4630      	mov	r0, r6
 8006c38:	f7ff fb10 	bl	800625c <_malloc_r>
 8006c3c:	b948      	cbnz	r0, 8006c52 <__smakebuf_r+0x46>
 8006c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c42:	059a      	lsls	r2, r3, #22
 8006c44:	d4ee      	bmi.n	8006c24 <__smakebuf_r+0x18>
 8006c46:	f023 0303 	bic.w	r3, r3, #3
 8006c4a:	f043 0302 	orr.w	r3, r3, #2
 8006c4e:	81a3      	strh	r3, [r4, #12]
 8006c50:	e7e2      	b.n	8006c18 <__smakebuf_r+0xc>
 8006c52:	89a3      	ldrh	r3, [r4, #12]
 8006c54:	6020      	str	r0, [r4, #0]
 8006c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c5a:	81a3      	strh	r3, [r4, #12]
 8006c5c:	9b01      	ldr	r3, [sp, #4]
 8006c5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006c62:	b15b      	cbz	r3, 8006c7c <__smakebuf_r+0x70>
 8006c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c68:	4630      	mov	r0, r6
 8006c6a:	f000 f837 	bl	8006cdc <_isatty_r>
 8006c6e:	b128      	cbz	r0, 8006c7c <__smakebuf_r+0x70>
 8006c70:	89a3      	ldrh	r3, [r4, #12]
 8006c72:	f023 0303 	bic.w	r3, r3, #3
 8006c76:	f043 0301 	orr.w	r3, r3, #1
 8006c7a:	81a3      	strh	r3, [r4, #12]
 8006c7c:	89a3      	ldrh	r3, [r4, #12]
 8006c7e:	431d      	orrs	r5, r3
 8006c80:	81a5      	strh	r5, [r4, #12]
 8006c82:	e7cf      	b.n	8006c24 <__smakebuf_r+0x18>

08006c84 <memmove>:
 8006c84:	4288      	cmp	r0, r1
 8006c86:	b510      	push	{r4, lr}
 8006c88:	eb01 0402 	add.w	r4, r1, r2
 8006c8c:	d902      	bls.n	8006c94 <memmove+0x10>
 8006c8e:	4284      	cmp	r4, r0
 8006c90:	4623      	mov	r3, r4
 8006c92:	d807      	bhi.n	8006ca4 <memmove+0x20>
 8006c94:	1e43      	subs	r3, r0, #1
 8006c96:	42a1      	cmp	r1, r4
 8006c98:	d008      	beq.n	8006cac <memmove+0x28>
 8006c9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ca2:	e7f8      	b.n	8006c96 <memmove+0x12>
 8006ca4:	4402      	add	r2, r0
 8006ca6:	4601      	mov	r1, r0
 8006ca8:	428a      	cmp	r2, r1
 8006caa:	d100      	bne.n	8006cae <memmove+0x2a>
 8006cac:	bd10      	pop	{r4, pc}
 8006cae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cb6:	e7f7      	b.n	8006ca8 <memmove+0x24>

08006cb8 <_fstat_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4d07      	ldr	r5, [pc, #28]	@ (8006cd8 <_fstat_r+0x20>)
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	4608      	mov	r0, r1
 8006cc2:	4611      	mov	r1, r2
 8006cc4:	602b      	str	r3, [r5, #0]
 8006cc6:	f7fe fcf2 	bl	80056ae <_fstat>
 8006cca:	1c43      	adds	r3, r0, #1
 8006ccc:	d102      	bne.n	8006cd4 <_fstat_r+0x1c>
 8006cce:	682b      	ldr	r3, [r5, #0]
 8006cd0:	b103      	cbz	r3, 8006cd4 <_fstat_r+0x1c>
 8006cd2:	6023      	str	r3, [r4, #0]
 8006cd4:	bd38      	pop	{r3, r4, r5, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20004374 	.word	0x20004374

08006cdc <_isatty_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	4d06      	ldr	r5, [pc, #24]	@ (8006cf8 <_isatty_r+0x1c>)
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	4608      	mov	r0, r1
 8006ce6:	602b      	str	r3, [r5, #0]
 8006ce8:	f7fe fe46 	bl	8005978 <_isatty>
 8006cec:	1c43      	adds	r3, r0, #1
 8006cee:	d102      	bne.n	8006cf6 <_isatty_r+0x1a>
 8006cf0:	682b      	ldr	r3, [r5, #0]
 8006cf2:	b103      	cbz	r3, 8006cf6 <_isatty_r+0x1a>
 8006cf4:	6023      	str	r3, [r4, #0]
 8006cf6:	bd38      	pop	{r3, r4, r5, pc}
 8006cf8:	20004374 	.word	0x20004374

08006cfc <_sbrk_r>:
 8006cfc:	b538      	push	{r3, r4, r5, lr}
 8006cfe:	4d06      	ldr	r5, [pc, #24]	@ (8006d18 <_sbrk_r+0x1c>)
 8006d00:	2300      	movs	r3, #0
 8006d02:	4604      	mov	r4, r0
 8006d04:	4608      	mov	r0, r1
 8006d06:	602b      	str	r3, [r5, #0]
 8006d08:	f7f9 ff52 	bl	8000bb0 <_sbrk>
 8006d0c:	1c43      	adds	r3, r0, #1
 8006d0e:	d102      	bne.n	8006d16 <_sbrk_r+0x1a>
 8006d10:	682b      	ldr	r3, [r5, #0]
 8006d12:	b103      	cbz	r3, 8006d16 <_sbrk_r+0x1a>
 8006d14:	6023      	str	r3, [r4, #0]
 8006d16:	bd38      	pop	{r3, r4, r5, pc}
 8006d18:	20004374 	.word	0x20004374

08006d1c <_realloc_r>:
 8006d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d20:	4607      	mov	r7, r0
 8006d22:	4614      	mov	r4, r2
 8006d24:	460d      	mov	r5, r1
 8006d26:	b921      	cbnz	r1, 8006d32 <_realloc_r+0x16>
 8006d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	f7ff ba95 	b.w	800625c <_malloc_r>
 8006d32:	b92a      	cbnz	r2, 8006d40 <_realloc_r+0x24>
 8006d34:	f7ff fa26 	bl	8006184 <_free_r>
 8006d38:	4625      	mov	r5, r4
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d40:	f000 f81a 	bl	8006d78 <_malloc_usable_size_r>
 8006d44:	4284      	cmp	r4, r0
 8006d46:	4606      	mov	r6, r0
 8006d48:	d802      	bhi.n	8006d50 <_realloc_r+0x34>
 8006d4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d4e:	d8f4      	bhi.n	8006d3a <_realloc_r+0x1e>
 8006d50:	4621      	mov	r1, r4
 8006d52:	4638      	mov	r0, r7
 8006d54:	f7ff fa82 	bl	800625c <_malloc_r>
 8006d58:	4680      	mov	r8, r0
 8006d5a:	b908      	cbnz	r0, 8006d60 <_realloc_r+0x44>
 8006d5c:	4645      	mov	r5, r8
 8006d5e:	e7ec      	b.n	8006d3a <_realloc_r+0x1e>
 8006d60:	42b4      	cmp	r4, r6
 8006d62:	4622      	mov	r2, r4
 8006d64:	4629      	mov	r1, r5
 8006d66:	bf28      	it	cs
 8006d68:	4632      	movcs	r2, r6
 8006d6a:	f7ff f9fc 	bl	8006166 <memcpy>
 8006d6e:	4629      	mov	r1, r5
 8006d70:	4638      	mov	r0, r7
 8006d72:	f7ff fa07 	bl	8006184 <_free_r>
 8006d76:	e7f1      	b.n	8006d5c <_realloc_r+0x40>

08006d78 <_malloc_usable_size_r>:
 8006d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d7c:	1f18      	subs	r0, r3, #4
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	bfbc      	itt	lt
 8006d82:	580b      	ldrlt	r3, [r1, r0]
 8006d84:	18c0      	addlt	r0, r0, r3
 8006d86:	4770      	bx	lr

08006d88 <_init>:
 8006d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8a:	bf00      	nop
 8006d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d8e:	bc08      	pop	{r3}
 8006d90:	469e      	mov	lr, r3
 8006d92:	4770      	bx	lr

08006d94 <_fini>:
 8006d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d96:	bf00      	nop
 8006d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d9a:	bc08      	pop	{r3}
 8006d9c:	469e      	mov	lr, r3
 8006d9e:	4770      	bx	lr
